{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Aplicacoes/agenda/Unidade/Sala/unidade-sala-cadastro/unidade-sala-cadastro.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/Sala/unidade-sala-cadastro/unidade-sala-cadastro.component.html","webpack:///src/app/Aplicacoes/agenda/Unidade/Sala/unidade-sala-delete/unidade-sala-delete.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/Sala/unidade-sala-delete/unidade-sala-delete.component.html","webpack:///src/app/Aplicacoes/agenda/Unidade/Sala/unidade-sala-update/unidade-sala-update.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/Sala/unidade-sala-update/unidade-sala-update.component.html","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-alterar-unidade/agenda-alterar-unidade.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-alterar-unidade/agenda-alterar-unidade.component.html","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component.html","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-excluir-unidade/agenda-excluir-unidade.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-excluir-unidade/agenda-excluir-unidade.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-create/agenda-create.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-create/agenda-create.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-delete/agenda-delete.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-delete/agenda-delete.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-read/agenda-read.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-read/agenda-read.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-update/agenda-update.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-update/agenda-update.component.html","webpack:///src/app/Aplicacoes/agenda/home-agenda/home-agenda.component.ts","webpack:///src/app/Aplicacoes/agenda/home-agenda/home-agenda.component.html","webpack:///src/app/Negocio/Aplicacao.ts","webpack:///src/app/Negocio/Endpoint.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.conponent.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/chamados/chamado-create/chamado-create.component.ts","webpack:///src/app/components/chamados/chamado-create/chamado-create.component.html","webpack:///src/app/components/chamados/chamado-delete/chamado-delete.component.ts","webpack:///src/app/components/chamados/chamado-delete/chamado-delete.component.html","webpack:///src/app/components/chamados/chamado-read/chamado-read.component.ts","webpack:///src/app/components/chamados/chamado-read/chamado-read.component.html","webpack:///src/app/components/chamados/chamado-update/chamado-update.component.ts","webpack:///src/app/components/chamados/chamado-update/chamado-update.component.html","webpack:///src/app/components/empresa/empresa-create/empresa-create.component.ts","webpack:///src/app/components/empresa/empresa-create/empresa-create.component.html","webpack:///src/app/components/empresa/empresa-delete/empresa-delete.component.ts","webpack:///src/app/components/empresa/empresa-delete/empresa-delete.component.html","webpack:///src/app/components/empresa/empresa-read/empresa-read.component.ts","webpack:///src/app/components/empresa/empresa-read/empresa-read.component.html","webpack:///src/app/components/empresa/empresa-update/empresa-update.component.ts","webpack:///src/app/components/empresa/empresa-update/empresa-update.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/product/product-create/product-create.component.ts","webpack:///src/app/components/product/product-create/product-create.component.html","webpack:///src/app/components/product/product-delete/product-delete.component.ts","webpack:///src/app/components/product/product-delete/product-delete.component.html","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos-datasource.ts","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos.component.ts","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos.component.html","webpack:///src/app/components/product/product-read/product-read.component.ts","webpack:///src/app/components/product/product-read/product-read.component.html","webpack:///src/app/components/product/product-update/product-update.component.ts","webpack:///src/app/components/product/product-update/product-update.component.html","webpack:///src/app/components/template/footer/footer.component.ts","webpack:///src/app/components/template/footer/footer.component.html","webpack:///src/app/components/template/header/header.component.ts","webpack:///src/app/components/template/header/header.component.html","webpack:///src/app/components/template/header/header.service.ts","webpack:///src/app/components/template/nav/nav.component.ts","webpack:///src/app/components/template/nav/nav.component.html","webpack:///src/app/components/usuario/usuario-create/usuario-create.component.ts","webpack:///src/app/components/usuario/usuario-create/usuario-create.component.html","webpack:///src/app/components/usuario/usuario-delete/usuario-delete.component.ts","webpack:///src/app/components/usuario/usuario-delete/usuario-delete.component.html","webpack:///src/app/components/usuario/usuario-read/usuario-read.component.html","webpack:///src/app/components/usuario/usuario-read/usuario-read.component.ts","webpack:///src/app/components/usuario/usuario-update/usuario-update.component.ts","webpack:///src/app/components/usuario/usuario-update/usuario-update.component.html","webpack:///src/app/components/usuario/usuario.component.ts","webpack:///src/app/components/usuario/usuario.component.html","webpack:///src/app/diretivas/red.directive.ts","webpack:///src/app/models/Sala/SalaModel.ts","webpack:///src/app/models/Unidade/unidadeModel.ts","webpack:///src/app/models/acessoModel.ts","webpack:///src/app/models/produtos/product.model.ts","webpack:///src/app/models/usuarios/GrupoUsuarios.ts","webpack:///src/app/models/usuarios/enumUsuarios.ts","webpack:///src/app/models/usuarios/modelLogin.ts","webpack:///src/app/services/login.service.ts","webpack:///src/app/services/product.service.ts","webpack:///src/app/services/service-all.service.ts","webpack:///src/app/services/util.service.ts","webpack:///src/app/views/chamado-crud/chamado-crud.component.ts","webpack:///src/app/views/chamado-crud/chamado-crud.component.html","webpack:///src/app/views/empresa/empresa.component.ts","webpack:///src/app/views/empresa/empresa.component.html","webpack:///src/app/views/home/home.component.ts","webpack:///src/app/views/home/home.component.html","webpack:///src/app/views/product-crud/product-crud.component.ts","webpack:///src/app/views/product-crud/product-crud.component.html","webpack:///src/app/views/usuario-crud/usuario-crud.component.ts","webpack:///src/app/views/usuario-crud/usuario-crud.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","UnidadeSalaCadastroComponent","servicoSala","servico","dialog","sala","buscaSala","unidadeid","Number","empresaid","Sessao","IdEmpresa","dtCriacao","Date","criadoPor","UsuarioId","create","Sala","subscribe","showMessage","close","read","sl","listasala","addSala","fecharPopup","selector","templateUrl","styleUrls","UnidadeSalaDeleteComponent","UnidadeSalaUpdateComponent","buscarSala","readById","x","update","alterarSala","AgendaAlterarUnidadeComponent","servicoUnidade","buscarUnidade","Unidade","un","unidade","componentInstance","AgendaCadastroUnidadeComponent","ServicoUnidade","Colunas","ColunasSala","novaUnidade","atualizarChamada","vlrsala","unidadeSelecionada","atualizaRota","vlrTxt","unidades","filter","toString","nomeUnidade","toLowerCase","includes","Popup","keyEvent","which","document","getElementById","value","tab","index","salas","nomeSala","selecionaAba","AgendaExcluirUnidadeComponent","AgendaCreateComponent","route","dialogRef","overlay","_serviceAgenda","_serviceUnidade","_serviceSala","_serviceGrupoAgenda","_serviceUsuario","_utilService","agenda","DtCriacao","nomeAgenda","profissionalid","Empresaid","salaid","substituicao","grupoAgendaid","vigenciaInicio","vigenciaFim","considerarFeriado","bloqueado","carregaCombos","Agenda","ag","navigate","carregaComboProfissional","GrupoUsuario","carregaComboUnidade","carregaComboSala","carregaComboGrupoAgenda","grpId","empId","Usuario","pro","comboProfissional","Master","Administrador","comboUnidade","comboSala","GrupoAgenda","ga","comboTipoGrupoAgenda","scrollStrategy","scrollStrategies","reposition","open","width","height","afterClosed","result","console","log","novoUsuario","AgendaDeleteComponent","dialgRef","serviceAgenda","utilService","buscarAgendaByid","ExcluirAgenda","AgendaReadComponent","_repAgenda","AtualizarMenu","buscarAgenda","filtroAgenda","empresaId","addNovaAgenda","addUnidade","AgendaUpdateComponent","router","agendaService","serviceUnidade","serviceSala","serviceGrupoAGenda","serviceEmpresa","serviceUsuario","buscarAgendaPorId","agId","pr","HomeAgendaComponent","Aplicacao","TipoAplicacao","Map","Endpoint","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","authService","nome","mostrarMenu","mostrarlogin","mostrarMenuEmitter","mostrar","mostrarLoginEmitter","mostrarLogin","AppModule","provide","useValue","declarations","providers","bootstrap","ChamadoCreateComponent","ChamadoDeleteComponent","ChamadoReadComponent","ChamadoUpdateComponent","EmpresaCreateComponent","servicoEmpresa","dialofRef","empresa","cnpj","razaoSocial","nomeFantasia","inscricaoEstadual","inscricaoMunicipal","cnes","codPIS","observacao","codCnae","empresaPai","empPai","isValid","Empresa","bemp","retornoEmp","retornomaster","length","emp","localStorage","getItem","EmpresaDeleteComponent","mensagem","utilservice","BuscarEmpresa","existeUsuario","usr","excluirEmpresa","EmpresaReadComponent","displayedColumns","buscarEmpresa","filtroEmpresa","Array","forEach","element","push","master","empresaFIltrada","addEmpresa","EmpresaUpdateComponent","empresaService","usuariologado","ObterEmpresa","error","LoginComponent","authservice","acesso","logarSistema","ProductCreateComponent","ProdutoEmpresa","ServiceEmpresa","matDialogref","comboProduto","product","valor","buscarProduto","Produto","p","ativo","associarProdutoEmpresa","ProductDeleteComponent","productService","deleteProduto","deleteProduct","EXAMPLE_DATA","name","ProductReadTableprodutosDataSource","data","dataMutations","paginator","page","sort","sortChange","pipe","getPagedData","getSortedData","startIndex","pageIndex","pageSize","splice","active","direction","a","b","isAsc","compare","ProductReadTableprodutosComponent","dataSource","table","ProductReadComponent","serviceProduto","products","addProduto","ProductUpdateComponent","ProdutoService","matdialogRef","updateProduct","FooterComponent","HeaderComponent","headerService","headerData","title","icon","routeUrl","HeaderService","_headerData","next","providedIn","NavComponent","auth","opened","lock","validarAcesso","sairSistema","UsuarioCreateComponent","serviceGrupoUsuario","serviceLogin","tipoLogin","usuario","criargrupousuario","comboTipousuario","alimentarCombo","grupoUsuarioid","trim","Sistema","user","login","empresasCarregadas","tipo","hasOwnProperty","isNaN","parseInt","get","UsuarioDeleteComponent","usuarioService","carregaUsuario","deleteUsuario","UsuarioReadComponent","userAutenticado","getUser","filtroUsuario","logado","u","responseUsuarios","usuarioFIltrados","responseEmpresa","empresaID","idEmpresa","IdEmpresaPai","addUsuario","UsuarioUpdateComponent","usarioService","buscarUsuario","tipousuario","carregarComboTipoUsuario","UsuarioComponent","RedDirective","el","nativeElement","style","color","Acesso","Product","TipoUsuario","TipoUsuarioSistema","httpOptions","headers","LoginService","snackbar","http","environmentName","environmentUrl","tipoUsuarios","usuarioAutenticado","BASE_URL","post","Token","toPromise","response","statusEmpresa","erroLogin","emit","setItem","token","gruposUsuarios","message","removeItem","reqHeader","ProductService","loginservice","header","obj","erroHandler","url","put","ServiceAllService","T","UtilService","msg","isErro","duration","horizontalPosition","verticalPosition","panelClass","txt","btoa","atob","titulo","icone","urlIcone","chaveEntrada","convertBase64toText","dados","StatusUsuario","TokenSessao","routeReuseStrategy","shouldReuseRoute","currentUrl","navigateByUrl","skipLocationChange","largura","altura","ChamadoCrudComponent","navigateToChamadoCreate","EmpresaComponent","HomeComponent","serviceProdutos","ObterComponentes","prod","produtos","ProductCrudComponent","UsuarioCrudComponent","environment","production","apiUrl","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYaC,4B;AAOX,4CACoBC,WADpB,EAEoBC,OAFpB,EAGmBC,MAHnB,EAGsE;AAAA;;AAFlD,aAAAF,WAAA,GAAAA,WAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AALrB,aAAAC,IAAA,GAAc,IAAI,kEAAJ,EAAd;AAOO;;;;mCAEG;AACJ,eAAKC,SAAL;AAGH;;;kCAEM;AAAA;;AAEL,eAAKD,IAAL,CAAUE,SAAV,GAAsBC,MAAM,CAAC,KAAKJ,MAAL,CAAYJ,EAAb,CAA5B;AACA,eAAKK,IAAL,CAAUI,SAAV,GAAsBD,MAAM,CAAC,KAAKL,OAAL,CAAaO,MAAb,GAAsBC,SAAvB,CAA5B;AACA,eAAKN,IAAL,CAAUO,SAAV,GAAsB,IAAIC,IAAJ,EAAtB;AACA,eAAKR,IAAL,CAAUS,SAAV,GAAsB,KAAKX,OAAL,CAAaO,MAAb,GAAsBK,SAA5C;AAEA,eAAKb,WAAL,CAAiBc,MAAjB,CAAwB,KAAKX,IAA7B,EAAmC,kEAASY,IAA5C,EAAkDC,SAAlD,CAA4D,YAAM;AAChE,iBAAI,CAACf,OAAL,CAAagB,WAAb,CAAyB,6BAAzB,EAAwD,KAAxD;AAED,WAHD;AAMD;;;sCAEU;AACP,eAAKf,MAAL,CAAYgB,KAAZ;AACH;;;oCAEQ;AAAA;;AAEH,eAAKlB,WAAL,CAAiBmB,IAAjB,CAAsB,kEAASJ,IAA/B,EAAqCC,SAArC,CAA+C,UAAAI,EAAE,EAAI;AACnD,kBAAI,CAACC,SAAL,GAAiBD,EAAjB;AACD,WAFD;AAIL;;;;;;;uBA7CUrB,4B,EAA4B,uJ,EAAA,0I,EAAA,sI;AAAA,K;;;YAA5BA,4B;AAA4B,gD;AAAA,e;AAAA,a;AAAA,qS;AAAA;AAAA;ACZzC;;AACI;;AAAgB;;AAAS;;AACrB;;AACI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACI;;AAAoB;AAAA;AAAA;;AAApB;;AACR;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAuB,OAAA,EAAT;AAAkB,WAAlB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAC,WAAA,EAAT;AAAsB,WAAtB;;AACxB;;AACF;;AAER;;;;AAlBgB;;AAAA;;AAKwB;;AAAA,8FAAwB,SAAxB,EAAwB,cAAxB;;;;;;;;;sEDE3BxB,4B,EAA4B;cALxC,uDAKwC;eAL9B;AACTyB,kBAAQ,EAAE,2BADD;AAETC,qBAAW,EAAE,wCAFJ;AAGTC,mBAAS,EAAE,CAAC,uCAAD;AAHF,S;AAK8B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZzC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,0B;AAEX,4CAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,0B;AAA0B,K;;;YAA1BA,0B;AAA0B,8C;AAAA,c;AAAA,a;AAAA;AAAA;ACPvC;;AAAG;;AAA0B;;;;;;;;sEDOhBA,0B,EAA0B;cALtC,uDAKsC;eAL5B;AACTH,kBAAQ,EAAE,yBADD;AAETC,qBAAW,EAAE,sCAFJ;AAGTC,mBAAS,EAAE,CAAC,qCAAD;AAHF,S;AAK4B,Q;;;;;;;;;;;;;;;;;;;;AEPvC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYaE,0B;AAIX,0CACmB1B,MADnB,EAEoBD,OAFpB,EAGoBD,WAHpB,EAGyD;AAAA;;AAFtC,aAAAE,MAAA,GAAAA,MAAA;AACC,aAAAD,OAAA,GAAAA,OAAA;AACA,aAAAD,WAAA,GAAAA,WAAA;AACH;;;;mCAET;AACJ,eAAK6B,UAAL;AAEH;;;qCAGS;AAAA;;AACJ,eAAK7B,WAAL,CAAiB8B,QAAjB,CAA0B,KAAK5B,MAAL,CAAYJ,EAAtC,EAA0C,kEAASiB,IAAnD,EAAyDC,SAAzD,CAAmE,UAAAe,CAAC,EAAI;AACpE,kBAAI,CAAC5B,IAAL,GAAY4B,CAAZ;AACH,WAFD;AAGL;;;sCAEU;AAAA;;AAEP,eAAK/B,WAAL,CAAiBgC,MAAjB,CAAwB,KAAK7B,IAA7B,EAAmC,kEAASY,IAA5C,EAAkDC,SAAlD,CAA4D,UAAAe,CAAC,EAAI;AAC/D,kBAAI,CAAC9B,OAAL,CAAagB,WAAb,CAAyB,4BAAzB,EAAuD,KAAvD;AACD,WAFD;AAKH;;;sCAEU;AACT,eAAKf,MAAL,CAAYgB,KAAZ;AACD;;;;;;;uBAjCUU,0B,EAA0B,sI,EAAA,0I,EAAA,uJ;AAAA,K;;;YAA1BA,0B;AAA0B,8C;AAAA,e;AAAA,a;AAAA,qS;AAAA;AAAA;ACZvC;;AACI;;AAAgB;;AAAS;;AACrB;;AACI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACI;;AAAoB;AAAA;AAAA;;AAApB;;AACR;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAK,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAV,WAAA,EAAT;AAAsB,WAAtB;;AACxB;;AACF;;AAER;;;;AAlBgB;;AAAA;;AAKwB;;AAAA,8FAAwB,SAAxB,EAAwB,cAAxB;;;;;;;;;sEDE3BK,0B,EAA0B;cALtC,uDAKsC;eAL5B;AACTJ,kBAAQ,EAAE,yBADD;AAETC,qBAAW,EAAE,sCAFJ;AAGTC,mBAAS,EAAE,CAAC,qCAAD;AAHF,S;AAK4B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZvC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACsBQ;;AAAsD;AAAA;;AAAA;;AAAA;AAAA;;AAClD;;AACJ;;;;QDXKQ,6B;AAIX,6CACmBhC,MADnB,EAEoBiC,cAFpB,EAGoBlC,OAHpB,EAGyC;AAAA;;AAFtB,aAAAC,MAAA,GAAAA,MAAA;AACC,aAAAiC,cAAA,GAAAA,cAAA;AACA,aAAAlC,OAAA,GAAAA,OAAA;AAEH;;;;mCAKT;AACJ,eAAKmC,aAAL;AACH;;;wCAEY;AAAA;;AACX,eAAKD,cAAL,CAAoBL,QAApB,CAA6B,KAAK5B,MAAL,CAAYJ,EAAzC,EAA6C,kEAASuC,OAAtD,EAA+DrB,SAA/D,CAAyE,UAAAsB,EAAE,EAAI;AAC7E,kBAAI,CAACC,OAAL,GAAeD,EAAf;AACD,WAFD;AAGD;;;wCAGY;AAAA;;AAET,eAAKH,cAAL,CAAoBH,MAApB,CAA2B,KAAKO,OAAhC,EAAyC,kEAASF,OAAlD,EAA2DrB,SAA3D,CAAqE,YAAM;AACzE,kBAAI,CAACf,OAAL,CAAagB,WAAb,CAAyB,+BAAzB,EAA0D,KAA1D;;AACA,kBAAI,CAACM,WAAL;AAGD,WALD;AAMH;;;sCAEU;AACP,eAAKrB,MAAL,CAAYgB,KAAZ;AACA,eAAKhB,MAAL,CAAYsC,iBAAZ;AACH;;;;;;;uBAtCUN,6B,EAA6B,sI,EAAA,uJ,EAAA,0I;AAAA,K;;;YAA7BA,6B;AAA6B,iD;AAAA,e;AAAA,a;AAAA,ie;AAAA;AAAA;ACb1C;;AACI;;AAAgB;;AAAe;;AAC3B;;AAEI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAGA;;AACI;;AACI;;AAAwB;AAAA;AAAA;;AAAxB;;AACR;;AAEJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAX,WAAA,EAAT;AAAsB,WAAtB;;AACxB;;AACF;;AAER;;;;AAxBgB;;AAAA;;AAKA;;AAAA;;AAM4B;;AAAA,qGAA+B,SAA/B,EAA+B,qBAA/B;;AAK5B;;AAAA;;;;;;;;;sEDTHW,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACTV,kBAAQ,EAAE,4BADD;AAETC,qBAAW,EAAE,yCAFJ;AAGTC,mBAAS,EAAE,CAAC,wCAAD;AAHF,S;AAK+B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEX1C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACiB4B;;AAAsD;AAAA;;AAAA;;AAAA;AAAA;;AAClD;;AACJ;;;;;;;;AAhBR;;AACI;;AAAgB;;AAAY;;AACxB;;AACI;;AACI;;AACA;AAAA;;AAAA;;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACI;;AAAwB;AAAA;;AAAA;;AAAA;AAAA;;AAAxB;;AACR;;AACJ;;AAEA;;AAIA;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACxB;;AACF;;AACA;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACxB;;AACF;;AACR;;;;;;AAnBgB;;AAAA;;AAK4B;;AAAA,uGAA+B,SAA/B,EAA+B,yBAA/B;;AAI5B;;AAAA;;;;;;AAmCV;;AAAsC;;AAAE;;;;;;AACxC;;AAAkD;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAIlD;;AAAsC;;AAAS;;;;;;AAC/C;;AAAoC;;;;AAAsC;;;;;;AAAtC;;AAAA;;;;;;AAIpC;;AAAsC;;AAAY;;;;;;AAClD;;AAAmC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAInC;;AAAsC;;AAAM;;;;;;AAExC;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAUT;;AAAsC;;AAAK;;;;;;;;AAC3C;;AAEE;;AAAI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACF;;AACG;;AACH;;AACA;;AACF;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACD;;AACE;;AACF;;AACF;;AAEF;;;;;;AAGF;;;;;;;;AACA;;AAAoD;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAqC;;;;;;;;AAxErG;;AAEE;;AAAmC;;AAAQ;;AAEzC;;AAEE;;AAAyB;AAAA;;AAAA;;AAAA;AAAA;;AACvB;;AAA0B;;AAAM;;AAClC;;AAEA;;AAAiE;AAAA;;AAAA;;AAAA;AAAA;;AAAjE;;AAEA;;AAAG;AAAA;;AAAA;;AAAA;AAAA;;AACD;;AAA0B;;AAAG;;AAC/B;;AACA;;AAAG;AAAA;;AAAA;;AAAA;AAAA;;AACD;;AAA0B;;AAAM;;AAClC;;AAEA;;AAEM;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACE;;AAYF;;AAGF;;AACE;;AACA;;AAcF;;AAEA;;AACA;;AACN;;AACF;;AACJ;;;;;;AAxD6C;;AAAA;;AAoDd;;AAAA;;AACP;;AAAA;;;;;;AA6BhB;;AAAsC;;AAAE;;;;;;AACxC;;AAA+C;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAI/C;;AAAsC;;AAAS;;;;;;AAC/C;;AAAoC;;;;AAAsC;;;;;;AAAtC;;AAAA;;;;;;AAIpC;;AAAsC;;AAAS;;;;;;AAC/C;;AAAmC;;AAAgB;;;;;;AAAhB;;AAAA;;;;;;AAMnC;;AAAsC;;AAAM;;;;;;AAExC;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAUT;;AAAsC;;AAAK;;;;;;;;AAC3C;;AAEE;;AAAI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACF;;AACG;;AACH;;AACA;;AACF;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACD;;AACE;;AACF;;AACF;;AAEF;;;;;;AAGF;;;;;;AACA;;;;;;;;AAzEd;;AAEE;;AAEE;;AAAmC;;AAAK;;AAEtC;;AAEE;;AAAyB;AAAA;;AAAA;;AAAA;AAAA;;AACvB;;AAA0B;;AAAM;;AAClC;;AAEA;;AAAiE;AAAA;;AAAA;;AAAA;AAAA;;AAAjE;;AAEA;;AAAG;AAAA;;AAAA;;AAAA;AAAA;;AACD;;AAA0B;;AAAG;;AAC/B;;AAEA;;AAEM;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAIA;;AACE;;AACE;;AAYF;;AAGF;;AACE;;AACA;;AAcF;;AAEA;;AACA;;AACN;;AACF;;AACJ;;AAKF;;;;;;AA/DwC;;AAAA;;AAsDP;;AAAA;;AACP;;AAAA;;;;QDlKjBe,8B;AAgBX,8CACkBvC,MADlB,EAEmBD,OAFnB,EAGmByC,cAHnB,EAImB1C,WAJnB,EAIwD;AAAA;;AAHtC,aAAAE,MAAA,GAAAA,MAAA;AACC,aAAAD,OAAA,GAAAA,OAAA;AACA,aAAAyC,cAAA,GAAAA,cAAA;AACA,aAAA1C,WAAA,GAAAA,WAAA;AAlBrB,aAAA2C,OAAA,GAAU,CAAC,IAAD,EAAM,WAAN,EAAmB,aAAnB,EAAiC,WAAjC,EAA6C,QAA7C,CAAV;AACA,aAAAC,WAAA,GAAc,CAAC,IAAD,EAAM,WAAN,EAAmB,UAAnB,EAA+B,OAA/B,EAAuC,QAAvC,CAAd;AAEA,aAAAL,OAAA,GAAoB,IAAI,oEAAJ,EAApB;AAEA,aAAAM,WAAA,GAAwB,KAAxB;AAGA,aAAAC,gBAAA,GAA4B,KAA5B;AAEA,aAAAC,OAAA,GAAmB,IAAnB;AAGA,aAAAC,kBAAA,GAA8B,CAA9B;AAOmB;;;;mCAET;AACJ,eAAKZ,aAAL,CAAmB,EAAnB;AAEH;;;qCAGS;AACR,eAAKS,WAAL,GAAmB,IAAnB;AACD;;;qCAES;AAAA;;AACR,eAAKG,kBAAL,GAA0B,CAA1B;AAEA,eAAKT,OAAL,CAAa3B,SAAb,GAAyB,KAAKX,OAAL,CAAaO,MAAb,GAAsBK,SAA/C;AACA,eAAK0B,OAAL,CAAa7B,SAAb,GAAyB,IAAIC,IAAJ,EAAzB;AACA,eAAK4B,OAAL,CAAahC,SAAb,GAA0BD,MAAM,CAAC,KAAKL,OAAL,CAAaO,MAAb,GAAsBC,SAAvB,CAAhC;AAEA,eAAKiC,cAAL,CAAoB5B,MAApB,CAA2B,KAAKyB,OAAhC,EAAyC,kEAASF,OAAlD,EAA2DrB,SAA3D,CAAqE,YAAM;AAC1E,kBAAI,CAACf,OAAL,CAAagB,WAAb,CAAyB,gCAAzB,EAA2D,KAA3D;;AACA,kBAAI,CAAChB,OAAL,CAAagD,YAAb;;AACA,kBAAI,CAACJ,WAAL,GAAmB,KAAnB;AACD,WAJA;AAMD;;;sCAEaK,M,EAAe;AAAA;;AAE3B,eAAKR,cAAL,CAAoBvB,IAApB,CAAyB,kEAASkB,OAAlC,EAA2CrB,SAA3C,CAAqD,UAAAsB,EAAE,EAAI;AACzD,kBAAI,CAACa,QAAL,GAAgBD,MAAM,IAAI,IAAV,GAAiBZ,EAAE,CAACc,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,CAAY8C,QAAZ,MAA0B,MAAI,CAACpD,OAAL,CAAaO,MAAb,GAAsBC,SAApD;AAAA,aAAX,CAAjB,GACmB6B,EAAE,CAACc,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,CAAY8C,QAAZ,MAA0B,MAAI,CAACpD,OAAL,CAAaO,MAAb,GAAsBC,SAAhD,IAA6DsB,CAAC,CAACuB,WAAF,CAAcC,WAAd,GAA4BC,QAA5B,CAAqCN,MAAM,CAACK,WAAP,EAArC,CAAjE;AAAA,aAAX,CADnC;AAED,WAHD;AAKD;;;yCAEgBzD,E,EAAU;AAEzB,eAAKG,OAAL,CAAawD,KAAb,CAAmB3D,EAAnB,EAAuB,sHAAvB,EAAsD,OAAtD,EAA+D,OAA/D;AAGD;;;uCAEcA,E,EAAW;AACxB,eAAKG,OAAL,CAAawD,KAAb,CAAmB3D,EAAnB,EAAuB,sHAAvB,EAAsD,OAAtD,EAA+D,OAA/D;AAED;;;sCAGU;AACP,eAAKI,MAAL,CAAYgB,KAAZ;AACH;;;iCACK;AACJ,eAAK2B,WAAL,GAAmB,KAAnB;AACD;;;0CAEiBa,Q,EAAc;AAE9B,cAAIA,QAAQ,CAACC,KAAT,KAAmB,EAAnB,IAAyBD,QAAQ,CAACC,KAAT,IAAkB,CAA/C,EAAiD;AAC/C,gBAAIT,MAAM,GAAuBU,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAqCC,KAAtE;AACA,iBAAK1B,aAAL,CAAmBc,MAAnB;AACD;AAGF;;;qCAGS;AACR,eAAKjD,OAAL,CAAawD,KAAb,CAAmB,EAAnB,EAAsB,wHAAtB,EAAoD,OAApD,EAA6D,OAA7D;AACD;;;2CAEkB3D,E,EAAE;AACjB,eAAKkD,kBAAL,GAA0BlD,EAA1B;AACH;;;qCAEYiE,G,EAAG;AAIhB,cAAIA,GAAG,CAACC,KAAJ,IAAa,CAAjB,EACA;AACG,iBAAKnC,UAAL;AAGF,WALD,MAKK;AACH,iBAAKmB,kBAAL,GAA0B,CAA1B;AACD;AAGF;;;qCAGW;AAAA;;AAER,eAAKhD,WAAL,CAAiBmB,IAAjB,CAAsB,kEAASJ,IAA/B,EAAqCC,SAArC,CAA+C,UAAAI,EAAE,EAAI;AACnD,kBAAI,CAAC6C,KAAL,GAAa,MAAI,CAAClB,OAAL,IAAgB,IAAhB,GAAyB3B,EAAE,CAACgC,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAAC1B,SAAF,IAAe,MAAI,CAAC2C,kBAAxB;AAAA,aAAX,CAAzB,GACyB5B,EAAE,CAACgC,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAAC1B,SAAF,IAAe,MAAI,CAAC2C,kBAApB,IAA0CjB,CAAC,CAACmC,QAAF,CAAWX,WAAX,GAAyBC,QAAzB,CAAkC,MAAI,CAACT,OAAL,CAAaQ,WAAb,EAAlC,CAA9C;AAAA,aAAX,CADtC;AAED,WAHD;AAMD;;;uCAEcG,Q,EAAc;AAE3B,cAAIA,QAAQ,CAACC,KAAT,IAAkB,EAAlB,IAAwBD,QAAQ,CAACC,KAAT,IAAkB,CAA9C,EAAgD;AAC9C,iBAAKZ,OAAL,GAAmCa,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAqCC,KAAxE;AACD;;AAED,eAAKjC,UAAL;AAED;;;sCACa/B,E,EAAQ;AAClB,eAAKG,OAAL,CAAawD,KAAb,CAAmB3D,EAAnB,EAAuB,kHAAvB,EAAmD,OAAnD,EAA4D,OAA5D;AACH;;;oCAEWA,E,EAAQ,CAEnB;;;kCAEM;AACL,eAAKG,OAAL,CAAawD,KAAb,CAAmB,KAAKT,kBAAL,CAAwBK,QAAxB,EAAnB,EAAuD,wHAAvD,EAAqF,OAArF,EAA8F,OAA9F;AACD;;;;;;;uBA/IUZ,8B,EAA8B,sI,EAAA,0I,EAAA,uJ,EAAA,uJ;AAAA,K;;;YAA9BA,8B;AAA8B,kD;AAAA,c;AAAA,a;AAAA,irD;AAAA;AAAA;ACvB3C;;AAAe;AAAA,mBAAqB,IAAA0B,YAAA,QAArB;AAAyC,WAAzC;;AAEX;;AAEI;;AACY;;AA2BR;;AA4EJ;;AACJ;;AAGA;;AAmFJ;;;;AA9L8B;;AAAA;;AA2BR;;AAAA;;AAgFT;;AAAA;;;;;;;;;;sEDzFA1B,8B,EAA8B;cAL1C,uDAK0C;eALhC;AACTjB,kBAAQ,EAAE,6BADD;AAETC,qBAAW,EAAE,0CAFJ;AAGTC,mBAAS,EAAE,CAAC,yCAAD;AAHF,S;AAKgC,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEvB3C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACgBQ;;AAAsD;AAAA;;AAAA;;AAAA;AAAA;;AAClD;;AACJ;;;;QDLK0C,6B;AAKX,6CACmBlE,MADnB,EAEoBiC,cAFpB,EAGoBlC,OAHpB,EAGyC;AAAA;;AAFtB,aAAAC,MAAA,GAAAA,MAAA;AACC,aAAAiC,cAAA,GAAAA,cAAA;AACA,aAAAlC,OAAA,GAAAA,OAAA;AACH;;;;mCAET;AACN,eAAKmC,aAAL;AACD;;;wCAEY;AAAA;;AACT,eAAKD,cAAL,CAAoBL,QAApB,CAA6B,KAAK5B,MAAL,CAAYJ,EAAzC,EAA6C,kEAASuC,OAAtD,EAA+DrB,SAA/D,CAAyE,UAAAsB,EAAE,EAAI;AAC7E,mBAAI,CAACC,OAAL,GAAeD,EAAf;AACD,WAFD;AAGH;;;yCAEa;AAAA;;AACV,eAAKH,cAAL,WAA2B7B,MAAM,CAAC,KAAKJ,MAAL,CAAYJ,EAAb,CAAjC,EAAmD,kEAASuC,OAA5D,EAAqErB,SAArE,CAA+E,YAAM;AACnF,mBAAI,CAACf,OAAL,CAAagB,WAAb,CAAyB,+BAAzB,EAA0D,KAA1D;;AACA,mBAAI,CAACM,WAAL;AACD,WAHD;AAIH;;;sCAGU;AACT,eAAKrB,MAAL,CAAYgB,KAAZ;AACD;;;;;;;uBA/BUkD,6B,EAA6B,sI,EAAA,uJ,EAAA,0I;AAAA,K;;;YAA7BA,6B;AAA6B,iD;AAAA,e;AAAA,a;AAAA,kX;AAAA;AAAA;ACb1C;;AACI;;AAAgB;;AAAe;;AAC3B;;AAEI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAA7C,WAAA,EAAT;AAAsB,WAAtB;;AACxB;;AACF;;AAER;;;;AAlBgB;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;;;;;;;;sEDHH6C,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACT5C,kBAAQ,EAAE,4BADD;AAETC,qBAAW,EAAE,yCAFJ;AAGTC,mBAAS,EAAE,CAAC,wCAAD;AAHF,S;AAK+B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEb1C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACeoC;;AACI;;AACJ;;;;;;AAFwD;;AACpD;;AAAA;;;;;;AASR;;AACI;;AACJ;;;;;;AAFsD;;AAClD;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFgD;;AAC5C;;AAAA;;;;;;AAeJ;;AACI;;AACJ;;;;;;AAF4D;;AACxD;;AAAA;;;;;;;;AA8BhB;;AAAoG;AAAA;;AAAA;;AAAA;AAAA;;AAChG;;AACJ;;;;QD3DP2C,qB;AAuBX,qCAAoBC,KAApB,EACmBC,SADnB,EAEmBC,OAFnB,EAGmBtE,MAHnB,EAIoBuE,cAJpB,EAKoBC,eALpB,EAMoBC,YANpB,EAOoBC,mBAPpB,EAQoBC,eARpB,EASoBC,YATpB,EAS8C;AAAA;;AAT1B,aAAAR,KAAA,GAAAA,KAAA;AACD,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AACA,aAAAtE,MAAA,GAAAA,MAAA;AACC,aAAAuE,cAAA,GAAAA,cAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,mBAAA,GAAAA,mBAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AA9BpB,aAAAC,MAAA,GAAkB;AAChBC,mBAAS,EAAE,IAAIrE,IAAJ,EADK;AAEhBsE,oBAAU,EAAE,IAFI;AAGhBC,wBAAc,EAAE,IAHA;AAIhBC,mBAAS,EAAE,IAJK;AAKhB9E,mBAAS,EAAE,IALK;AAMhB+E,gBAAM,EAAE,IANQ;AAOhBC,sBAAY,EAAE,KAPE;AAQhBC,uBAAa,EAAE,IARC;AAShBC,wBAAc,EAAE,IATA;AAUhBC,qBAAW,EAAE,IAVG;AAWhBC,2BAAiB,EAAE,KAXH;AAYhBC,mBAAS,EAAE;AAZK,SAAlB;AA+BO;;;;mCAGC;AACL,eAAKC,aAAL;AACF;;;uCAEW;AAAA;;AACT,eAAKZ,MAAL,CAAYI,SAAZ,GAAwB7E,MAAM,CAAC,KAAKwE,YAAL,CAAkBtE,MAAlB,GAA2BC,SAA5B,CAA9B;;AAEC,eAAKgE,cAAL,CAAoB3D,MAApB,CAA2B,KAAKiE,MAAhC,EAAwC,2DAASa,MAAjD,EAAyD5E,SAAzD,CAAmE,UAAA6E,EAAE,EAAI;AACzE,mBAAI,CAACf,YAAL,CAAkB7D,WAAlB,CAA8B,gCAA9B,EAA+D,KAA/D;;AACA,mBAAI,CAACqD,KAAL,CAAWwB,QAAX,CAAoB,CAAC,gBAAD,CAApB;AACC,WAHD;;AAIE,eAAKxB,KAAL,CAAWwB,QAAX,CAAoB,CAAC,gBAAD,CAApB;AACL;;;iCAEK;AACJ,eAAKxB,KAAL,CAAWwB,QAAX,CAAoB,CAAC,gBAAD,CAApB;AACD;;;wCAEY;AAEX,eAAKC,wBAAL,CAA8B,KAAKjB,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAAzD,EAAuE,KAAKlB,YAAL,CAAkBtE,MAAlB,GAA2BC,SAAlG;AACE,eAAKwF,mBAAL,CAAyB,KAAKnB,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAApD,EAAkE,KAAKlB,YAAL,CAAkBtE,MAAlB,GAA2BC,SAA7F;AACA,eAAKyF,gBAAL,CAAsB,KAAKpB,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAAjD,EAA+D,KAAKlB,YAAL,CAAkBtE,MAAlB,GAA2BC,SAA1F;AACA,eAAK0F,uBAAL,CAA6B,KAAKrB,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAAxD,EAAsE,KAAKlB,YAAL,CAAkBtE,MAAlB,GAA2BC,SAAjG;AACH;;;iDAEwB2F,K,EAAgBC,K,EAAa;AAAA;;AACpD,eAAKxB,eAAL,CAAqB1D,IAArB,CAA0B,2DAASmF,OAAnC,EAA4CtF,SAA5C,CAAsD,UAAAuF,GAAG,EAAI;AAC3DA,eAAG,GAAG,OAAI,CAACC,iBAAL,GAAyBJ,KAAK,IAAI,iFAAYK,MAArB,IAA+BL,KAAK,IAAI,iFAAYM,aAApD,GAAoE,OAAI,CAACF,iBAAL,GAAyBD,GAAG,CAACnD,MAAJ,CAAW,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,CAAY8C,QAAZ,MAA0BgD,KAA9B;AAAA,aAAZ,CAA7F,GAAgJ,IAA/K;AACD,WAFD;AAGD;;;4CAEmBD,K,EAAgBC,K,EAAa;AAAA;;AAC/C,eAAK3B,eAAL,CAAqBvD,IAArB,CAA0B,2DAASkB,OAAnC,EAA4CrB,SAA5C,CAAsD,UAAAsB,EAAE,EAAI;AAC1DA,cAAE,GAAG,OAAI,CAACqE,YAAL,GAAoBP,KAAK,IAAI,iFAAYK,MAArB,IAA+BL,KAAK,IAAI,iFAAYM,aAApD,GAAoE,OAAI,CAACC,YAAL,GAAoBrE,EAAE,CAACc,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,CAAY8C,QAAZ,MAA0BgD,KAA9B;AAAA,aAAX,CAAxF,GAA0I,IAAnK;AACD,WAFD;AAGD;;;yCAEgBD,K,EAAgBC,K,EAAa;AAAA;;AAC5C,eAAK1B,YAAL,CAAkBxD,IAAlB,CAAuB,2DAASJ,IAAhC,EAAsCC,SAAtC,CAAgD,UAAAI,EAAE,EAAI;AACpDA,cAAE,GAAG,OAAI,CAACwF,SAAL,GAAiBR,KAAK,IAAI,iFAAYK,MAArB,IAA+BL,KAAK,IAAI,iFAAYM,aAApD,GAAmE,OAAI,CAACE,SAAL,GAAiBxF,EAAE,CAACgC,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,CAAa8C,QAAb,MAA2BgD,KAA/B;AAAA,aAAX,CAApF,GAAuI,IAA7J;AACD,WAFD;AAGD;;;gDAEuBD,K,EAAgBC,K,EAAa;AAAA;;AACnD,eAAKzB,mBAAL,CAAyBzD,IAAzB,CAA8B,2DAAS0F,WAAvC,EAAoD7F,SAApD,CAA8D,UAAA8F,EAAE,EAAI;AAClEA,cAAE,GAAG,OAAI,CAACC,oBAAL,GAA4BX,KAAK,IAAI,iFAAYK,MAArB,IAA+BL,KAAK,IAAI,iFAAYM,aAApD,GAAoE,OAAI,CAACK,oBAAL,GAA4BD,EAAE,CAAC1D,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,CAAa8C,QAAb,MAA2BgD,KAA/B;AAAA,aAAX,CAAhG,GAAmJ,IAApL;AACD,WAFD;AAGD;;;sCAEU;AACT,eAAK9B,SAAL,CAAerD,KAAf;AACD;;;sCAEU;AAET,cAAG,KAAK4D,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,yHAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA;AAHyD,aAAzC,CAAlB;AAMAzC,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAZD,MAYK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,wDAA9B,EAAuF,IAAvF;AACD;AACF;;;;;;;uBA3GUoD,qB,EAAqB,uH,EAAA,sI,EAAA,6H,EAAA,mI,EAAA,gJ,EAAA,gJ,EAAA,gJ,EAAA,gJ,EAAA,gJ,EAAA,0I;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,e;AAAA,c;AAAA,k/C;AAAA;AAAA;ACzB1B;;AAEI;;AACI;;AAAgB;;AAAW;;AACvB;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AAA2C;;AAAgC;AAAA,mBAAS,IAAAqD,WAAA,EAAT;AAAsB,WAAtB;;AAAyB;;AAAU;;AAC9G;;AACA;;AAAY;AAAA;AAAA;;AACJ;;AACA;;AAGJ;;AACR;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAGA;;AACI;;AACI;;AAA2B;AAAA;AAAA;;AAA3B;;AACR;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAGA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACI;;AAAgC;AAAA;AAAA;;AAAhC;;AACR;;AAGA;;AACI;;AACI;;AAAwB;AAAA;AAAA;;AAAxB;;AACR;;AAGJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAnG,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;AAEJ;;;;AApFqB;;AAAA;;AAMW;;AAAA;;AAEQ;;AAAA;;AASR;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AASe;;AAAA,uGAAiC,SAAjC,EAAiC,uBAAjC;;AAMnB;;AAAA;;AACI;;AAAA;;AAQf;;AAAA;;AAMA;;AAAA;;AAKmC;;AAAA,4GAAsC,SAAtC,EAAsC,4BAAtC;;AAMR;;AAAA,oGAA8B,SAA9B,EAA8B,oBAA9B;;AAM5B;;AAAA;;;;;;;;;sEDzDf8C,qB,EAAqB;cALjC,uDAKiC;eALvB;AACT7C,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AExBlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAaaiG,qB;AAkBX,qCACmBC,QADnB,EAEoBC,aAFpB,EAGoBC,WAHpB,EAIoBxD,KAJpB,EAIkC;AAAA;;AAHf,aAAAsD,QAAA,GAAAA,QAAA;AACC,aAAAC,aAAA,GAAAA,aAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAxD,KAAA,GAAAA,KAAA;AApBpB,aAAAS,MAAA,GAAkB;AAChBjF,YAAE,EAAE,IADY;AAEhBkF,mBAAS,EAAE,IAAIrE,IAAJ,EAFK;AAGhBsE,oBAAU,EAAE,IAHI;AAIhBC,wBAAc,EAAE,IAJA;AAKhBC,mBAAS,EAAE,IALK;AAMhB9E,mBAAS,EAAE,IANK;AAOhB+E,gBAAM,EAAE,IAPQ;AAQhBC,sBAAY,EAAE,KARE;AAShBC,uBAAa,EAAE,IATC;AAUhBC,wBAAc,EAAE,IAVA;AAWhBC,qBAAW,EAAE,IAXG;AAYhBC,2BAAiB,EAAE,KAZH;AAahBC,mBAAS,EAAE;AAbK,SAAlB;AAsBgB;;;;mCAER;AACN,eAAKqC,gBAAL;AAED;;;wCAEY;AAAA;;AACT,eAAKF,aAAL,WAA0BvH,MAAM,CAAC,KAAKsH,QAAL,CAAc9H,EAAf,CAAhC,EAAoD,kEAAS8F,MAA7D,EAAqE5E,SAArE,CAA+E,UAAAe,CAAC,EAAI;AAChF,mBAAI,CAAC+F,WAAL,CAAiB7G,WAAjB,CAA6B,6BAA7B,EAA4D,KAA5D;;AACA,mBAAI,CAACqD,KAAL,CAAWwB,QAAX,CAAoB,CAAC,gBAAD,CAApB;;AACA,mBAAI,CAACvE,WAAL;AAEH,WALD;AAMH;;;sCAEU;AACP,eAAKqG,QAAL,CAAc1G,KAAd;AACH;;;2CACkB;AAAA;;AAChB,eAAK2G,aAAL,CAAmB/F,QAAnB,CAA4B,KAAK8F,QAAL,CAAc9H,EAA1C,EAA8C,kEAAS8F,MAAvD,EAA+D5E,SAA/D,CAAyE,UAAA6E,EAAE,EAAI;AAC7E,mBAAI,CAACd,MAAL,GAAcc,EAAd;AACD,WAFD;AAGF;;;;;;;uBA/CU8B,qB,EAAqB,sI,EAAA,uJ,EAAA,0I,EAAA,uH;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,e;AAAA,a;AAAA,yU;AAAA;AAAA;ACdlC;;AAEI;;AACI;;AAAgB;;AAAc;;AAC1B;;AAEI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAK,aAAA,EAAT;AAAwB,WAAxB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAzG,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;AAEJ;;;;AAnBqB;;AAAA;;AAKD;;AAAA;;;;;;;;;sEDCPoG,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTnG,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC4Bc;;AAAsC;;AAAE;;;;;;AACxC;;AAAiD;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKjD;;AAAsC;;AAAS;;;;;;AAC/C;;AAAmC;;;;AAA+C;;;;;;AAA/C;;AAAA;;;;;;AAKnC;;AAAsC;;AAAW;;;;;;AACjD;;AAAmC;;AAAkB;;;;;;AAAlB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAW;;;;;;AACjD;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAKnC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAIjC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAgB;;;;;;AAAhB;;AAAA;;;;;;AAInC;;AAAsC;;AAAY;;;;;;AAClD;;AAAmC;;AAAuB;;;;;;AAAvB;;AAAA;;;;;;AAInC;;AAAsC;;AAAgB;;;;;;AACtD;;AAAmC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;;;AAAqD;;;;;;AAArD;;AAAA;;;;;;AAKnC;;AAAsC;;AAAU;;;;;;AAChD;;AAAmC;;;;AAAiD;;;;;;AAAjD;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;AAAyB;;;;;;AAAzB;;AAAA;;;;;;AAKrC;;AAAsC;;AAAK;;;;;;AAEvC;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAWT;;AAAsC;;AAAK;;;;;;;;AAC3C;;AAEI;;AAAI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACA;;AACI;;AACJ;;AACJ;;AACA;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACC;;AACI;;AACJ;;AACJ;;AAEJ;;;;;;AAIF;;;;;;AACA;;;;QD/GCuG,mB;AAMX,mCACmB/H,MADnB,EAEmBsE,OAFnB,EAGoBvE,OAHpB,EAIoBiI,UAJpB,EAI6D;AAAA;;AAH1C,aAAAhI,MAAA,GAAAA,MAAA;AACA,aAAAsE,OAAA,GAAAA,OAAA;AACC,aAAAvE,OAAA,GAAAA,OAAA;AACA,aAAAiI,UAAA,GAAAA,UAAA;AARpB,aAAAvF,OAAA,GAAU,CAAC,IAAD,EAAM,WAAN,EAAmB,YAAnB,EAAgC,aAAhC,EAA8C,aAA9C,EAA4D,aAA5D,EAA0E,UAA1E,EACU,cADV,EACyB,aADzB,EACuC,gBADvC,EACwD,aADxD,EACsE,mBADtE,EAC0F,WAD1F,EACsG,QADtG,CAAV;AAUgB;;;;mCAER;AACN,eAAK1C,OAAL,CAAakI,aAAb,CAA2B,6DAAUvC,MAArC,EAA4C,kBAA5C,EAA+D,EAA/D;AACA,eAAKwC,YAAL;AACD;;;uCAGW;AAAA;;AAEV,cAAIC,YAAY,GAAuBzE,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAkCC,KAAzE;;AAEA,eAAKoE,UAAL,CAAgB/G,IAAhB,CAAqB,kEAASyE,MAA9B,EAAsC5E,SAAtC,CAAgD,UAAA6E,EAAE,EAAI;AACpD,mBAAI,CAACd,MAAL,GAAcsD,YAAY,IAAI,IAAhB,GAAuBxC,EAAE,CAACzC,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACuG,SAAF,CAAYjF,QAAZ,MAA0B,OAAI,CAACpD,OAAL,CAAaO,MAAb,GAAsBC,SAApD;AAAA,aAAX,CAAvB,GACGoF,EAAE,CAACzC,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACkD,UAAF,CAAa1B,WAAb,GAA2BC,QAA3B,CAAoC6E,YAAY,CAAC9E,WAAb,EAApC,KAAmExB,CAAC,CAACuG,SAAF,CAAYjF,QAAZ,MAA0B,OAAI,CAACpD,OAAL,CAAaO,MAAb,GAAsBC,SAAvH;AAAA,aAAX,CADjB;AAED,WAHD;AAID;;;wCAEY;AAEX,cAAG,KAAKR,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYS,MAAlD,IAA4D,KAAKxG,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYU,aAAjH,EACA;AACE,iBAAKzG,OAAL,CAAawD,KAAb,CAAmB,GAAnB,EAAuB,4FAAvB,EAA8C,OAA9C,EAAsD,OAAtD;AACD,WAHD,MAGK;AACH,iBAAKxD,OAAL,CAAagB,WAAb,CAAyB,wDAAzB,EAAkF,IAAlF;AACD;AACF;;;wCAEenB,E,EAAW;AACzB,cAAG,KAAKG,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYS,MAAlD,IAA4D,KAAKxG,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYU,aAAjH,EACA;AACE,iBAAKzG,OAAL,CAAawD,KAAb,CAAmB3D,EAAnB,EAAuB,4FAAvB,EAA8C,KAA9C,EAAoD,KAApD;AAEC,WAJH,MAIO;AACH,iBAAKG,OAAL,CAAagB,WAAb,CAAyB,iEAAzB,EAA2F,IAA3F;AACD;AACJ;;;sCAEanB,E,EAAW;AAEvB,cAAG,KAAKG,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYS,MAAlD,IAA4D,KAAKxG,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYU,aAAjH,EACE;AACE,iBAAKzG,OAAL,CAAawD,KAAb,CAAmB3D,EAAnB,EAAuB,4FAAvB,EAA6C,KAA7C,EAAmD,KAAnD;AACD,WAHH,MAKE;AACE,iBAAKG,OAAL,CAAagB,WAAb,CAAyB,uDAAzB,EAAiF,IAAjF;AACD;AACJ;;;qCAGS;AAER,cAAG,KAAKhB,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYS,MAAlD,IAA4D,KAAKxG,OAAL,CAAaO,MAAb,GAAsBwF,YAAtB,IAAsC,iFAAYU,aAAjH,EACE,KAAKzG,OAAL,CAAawD,KAAb,CAAmB,GAAnB,EAAwB,iIAAxB,EAAwD,OAAxD,EAAiE,OAAjE,EADF,KAGE,KAAKxD,OAAL,CAAagB,WAAb,CAAyB,oDAAzB,EAA8E,IAA9E;AACH;;;;;;;uBArEUgH,mB,EAAmB,mI,EAAA,6H,EAAA,oI,EAAA,wJ;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,e;AAAA,a;AAAA,yvC;AAAA;AAAA;ACzBhC;;AACI;;AAGI;;AAA8C;;AAAa;;AACzD;;AACE;;AAAiB;;AAAW;;AAC5B;;AAAiB;;AAAkB;;AACnC;;AAAiB;;AAAqB;;AAExC;;AAEA;;AAAsD;;AAAQ;;AAC5D;;AACE;;AAAG;AAAA,mBAAS,IAAAM,aAAA,EAAT;AAAwB,WAAxB;;AAAwC;;AAAM;;AACjD;;AAAG;AAAA,mBAAS,IAAAC,UAAA,EAAT;AAAqB,WAArB;;AAAqC;;AAAO;;AACjD;;AAIA;;AAAyB;AAAA,mBAAS,IAAAJ,YAAA,EAAT;AAAuB,WAAvB,EAAwB,UAAxB,EAAwB;AAAA,mBAAa,IAAAA,YAAA,EAAb;AAA2B,WAAnD;;AACvB;;AAA0B;;AAAM;;AAClC;;AAEA;;AAEF;;AAGE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACI;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGF;;AACE;;AACE;;AAYF;;AAIF;;AACE;;AACA;;AAcF;;AAGA;;AACA;;AACF;;AAEJ;;AAEA;;AACE;;AACF;;AACN;;;;;;;;AA5I2B;;AAAA;;AAQE;;AAAA;;AAcmB;;AAAA;;AA6GjB;;AAAA;;AACP;;AAAA;;;;;;;;;;sED/GXH,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTzG,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEzBhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACiByB;;AACM;;AACP;;;;;;AAFoD;;AAC7C;;AAAA;;;;;;AASP;;AACI;;AACJ;;;;;;AAFsD;;AAClD;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFgD;;AAC5C;;AAAA;;;;;;AAeJ;;AACI;;AACJ;;;;;;AAF4D;;AACxD;;AAAA;;;;;;;;AA8BhB;;AAAoG;AAAA;;AAAA;;AAAA;AAAA;;AAChG;;AACJ;;;;QDnEC+G,qB;AAEX,qCACkBC,MADlB,EAEkBZ,WAFlB,EAGkBa,aAHlB,EAIkBC,cAJlB,EAKkBC,WALlB,EAMkBC,kBANlB,EAOkBC,cAPlB,EAQkBC,cARlB,EASiBzE,SATjB,EASgE;AAAA;;AAR9C,aAAAmE,MAAA,GAAAA,MAAA;AACA,aAAAZ,WAAA,GAAAA,WAAA;AACA,aAAAa,aAAA,GAAAA,aAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAC,kBAAA,GAAAA,kBAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACD,aAAAzE,SAAA,GAAAA,SAAA;AAWjB,aAAAQ,MAAA,GAAkB;AAChBjF,YAAE,EAAE,IADY;AAEhBkF,mBAAS,EAAE,IAAIrE,IAAJ,EAFK;AAGhBsE,oBAAU,EAAE,IAHI;AAIhBC,wBAAc,EAAE,IAJA;AAKhBC,mBAAS,EAAE,IALK;AAMhB9E,mBAAS,EAAE,IANK;AAOhB+E,gBAAM,EAAE,IAPQ;AAQhBC,sBAAY,EAAE,KARE;AAShBC,uBAAa,EAAE,IATC;AAUhBC,wBAAc,EAAE,IAVA;AAWhBC,qBAAW,EAAE,IAXG;AAYhBC,2BAAiB,EAAE,KAZH;AAahBC,mBAAS,EAAE;AAbK,SAAlB;AARe;;;;mCA0BP;AAEN,eAAKuD,iBAAL;AAGD;;;4CAEoB;AAAA;;AAEf,eAAKN,aAAL,CAAmB7G,QAAnB,CAA4B,KAAKyC,SAAL,CAAezE,EAA3C,EAA+C,kEAAS8F,MAAxD,EAAgE5E,SAAhE,CAA0E,UAAAkI,IAAI,EAAI;AAC5E,mBAAI,CAACnE,MAAL,GAAcmE,IAAd;;AACA,mBAAI,CAACvD,aAAL;AACD,WAHL;AAID;;;wCAEY;AAAA;;AAEX,eAAKqD,cAAL,CAAoB7H,IAApB,CAAyB,kEAASmF,OAAlC,EAA2CtF,SAA3C,CAAqD,UAAAmI,EAAE,EAAI;AACzD,mBAAI,CAAC3C,iBAAL,GAAyB2C,EAAE,CAAC/F,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,IAAe,OAAI,CAACuH,WAAL,CAAiBtH,MAAjB,GAA0BC,SAA7C;AAAA,aAAX,CAAzB;AACD,WAFD;AAKA,eAAKmI,cAAL,CAAoBzH,IAApB,CAAyB,kEAASkB,OAAlC,EAA2CrB,SAA3C,CAAqD,UAAAsB,EAAE,EAAI;AACzD,mBAAI,CAACqE,YAAL,GAAoBrE,EAAE,CAACc,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,IAAeD,MAAM,CAAC,OAAI,CAACwH,WAAL,CAAiBtH,MAAjB,GAA0BC,SAA3B,CAAzB;AAAA,aAAX,CAApB;AACD,WAFD;AAIA,eAAKoI,WAAL,CAAiB1H,IAAjB,CAAsB,kEAASJ,IAA/B,EAAqCC,SAArC,CAA+C,UAAAI,EAAE,EAAG;AAClD,mBAAI,CAACwF,SAAL,GAAiBxF,EAAE,CAACgC,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,IAAeD,MAAM,CAAC,OAAI,CAACwH,WAAL,CAAiBtH,MAAjB,GAA0BC,SAA3B,CAAzB;AAAA,aAAX,CAAjB;AACD,WAFD;AAIA,eAAKqI,kBAAL,CAAwB3H,IAAxB,CAA6B,kEAAS0F,WAAtC,EAAmD7F,SAAnD,CAA6D,UAAA8F,EAAE,EAAI;AACjE,mBAAI,CAACC,oBAAL,GAA4BD,EAAE,CAAC1D,MAAH,CAAU,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,IAAeD,MAAM,CAAC,OAAI,CAACwH,WAAL,CAAiBtH,MAAjB,GAA0BC,SAA3B,CAAzB;AAAA,aAAX,CAA5B;AACD,WAFD;AAID;;;uCAEW;AAAA;;AACV,eAAKsE,MAAL,CAAYjF,EAAZ,GAAiB,KAAKyE,SAAL,CAAezE,EAAhC;AACA,eAAK6I,aAAL,CAAmB3G,MAAnB,CAA0B,KAAK+C,MAA/B,EAAuC,kEAASa,MAAhD,EAAwD5E,SAAxD,CAAkE,YAAM;AACtE,mBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,gCAA7B,EAA+D,KAA/D;;AACA,mBAAI,CAACyH,MAAL,CAAY5C,QAAZ,CAAqB,CAAC,gBAAD,CAArB;;AACA,mBAAI,CAACvE,WAAL;AAED,WALD;AAOD;;;sCAEU;AACT,eAAKgD,SAAL,CAAerD,KAAf;AACD;;;;;;;uBAzFMuH,qB,EAAqB,uH,EAAA,0I,EAAA,uJ,EAAA,uJ,EAAA,uJ,EAAA,uJ,EAAA,uJ,EAAA,uJ,EAAA,sI;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,e;AAAA,c;AAAA,04C;AAAA;AAAA;ACnBlC;;AAEI;;AACI;;AAAgB;;AAAgB;;AAC5B;;AAEI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAGA;;AACQ;;AACA;;AACJ;;AACO;AAAA;AAAA;;AACF;;AAGL;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAGA;;AACI;;AACI;;AAA2B;AAAA;AAAA;;AAA3B;;AACR;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAGA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACI;;AAAgC;AAAA;AAAA;;AAAhC;;AACR;;AAGA;;AACI;;AACI;;AAAwB;AAAA;AAAA;;AAAxB;;AACR;;AAGJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAlH,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;AAEJ;;;;AArFqB;;AAAA;;AAQM;;AAAA;;AACU;;AAAA;;AASL;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AASe;;AAAA,uGAAiC,SAAjC,EAAiC,uBAAjC;;AAMnB;;AAAA;;AACI;;AAAA;;AAQf;;AAAA;;AAMA;;AAAA;;AAKmC;;AAAA,4GAAsC,SAAtC,EAAsC,4BAAtC;;AAMR;;AAAA,oGAA8B,SAA9B,EAA8B,oBAA9B;;AAM5B;;AAAA;;;;;;;;;sEDjEPkH,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTjH,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AElBlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa0H,mB;AAEX,mCAAoB9E,KAApB,EAAoC;AAAA;;AAAhB,aAAAA,KAAA,GAAAA,KAAA;AAAmB;;;;mCAE/B;AACN,eAAKA,KAAL,CAAWwB,QAAX,CAAoB,CAAC,QAAD,CAApB;AACD;;;;;;;uBANUsD,mB,EAAmB,uH;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,c;AAAA,a;AAAA;AAAA;ACRhC;;;;;;;;;sEDQaA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACT5H,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;AERhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAY2H,SAAZ;;AAAA,eAAYA,SAAZ,EAAqB;AACnB;AACA;AACA;AACA;AAED,KAND,EAAYA,SAAS,KAATA,SAAS,MAArB;;AAQO,QAAMC,aAAa,GAAG,IAAIC,GAAJ,CAAwB,CACnD,CAAC,QAAD,EAAW,QAAX,CADmD,EAEnD,CAAC,SAAD,EAAY,SAAZ,CAFmD,EAGnD,CAAC,aAAD,EAAgB,aAAhB,CAHmD,EAInD,CAAC,UAAD,EAAa,UAAb,CAJmD,CAAxB,CAAtB;;;;;;;;;;;;;;;;ACRP;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAYC,QAAZ;;AAAA,eAAYA,QAAZ,EAAoB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,KAXD,EAAYA,QAAQ,KAARA,QAAQ,MAApB;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,8D,CAkCA;;;AAEA,QAAMC,MAAM,GAAW,CACrB;AAACC,UAAI,EAAG,EAAR;AAAYC,eAAS,EAAC;AAAtB,KADqB,EAErB;AAACD,UAAI,EAAE,OAAP;AAAgBC,eAAS,EAAE;AAA3B,KAFqB,EAGrB;AACA;AAACD,UAAI,EAAE,UAAP;AAAmBC,eAAS,EAAE;AAA9B,KAJqB,EAMrB;AACA;AAACD,UAAI,EAAE,UAAP;AAAmBC,eAAS,EAAG;AAA/B,KAPqB,EASrB;AACA;AAACD,UAAI,EAAE,UAAP;AAAmBC,eAAS,EAAG;AAA/B,KAVqB,EAYrB;AACA;AAACD,UAAI,EAAE,SAAP;AAAkBC,eAAS,EAAG;AAA9B,KAbqB,EAerB;AACA;AACA;AAACD,UAAI,EAAE,6DAAU9D,MAAjB;AAA0B+D,eAAS,EAAG;AAAtC,KAjBqB,CAAvB;;QA0BaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBJ,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBG,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBJ,MAArB,CAAD,CADD;AAER5J,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;AC9D7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,gE,CAAA;;;;;ACAA;;;;;;AACA;;;;;;AACA;;;;;;AACA;;;;QDOakK,Y;AAMb,4BAAoBC,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AALlB,aAAAC,IAAA,GAAO,MAAP;AAEF,aAAAC,WAAA,GAAwB,KAAxB;AACA,aAAAC,YAAA,GAAyB,IAAzB;AAIC;;;;mCAEO;AAAA;;AACJ,eAAKH,WAAL,CAAiBI,kBAAjB,CAAoCpJ,SAApC,CACI,UAAAqJ,OAAO;AAAA,mBAAI,OAAI,CAACH,WAAL,GAAmBG,OAAvB;AAAA,WADX;AAIA,eAAKL,WAAL,CAAiBM,mBAAjB,CAAqCtJ,SAArC,CACI,UAAAuJ,YAAY;AAAA,mBAAI,OAAI,CAACJ,YAAL,GAAoBI,YAAxB;AAAA,WADhB;AAGH;;;;;;;uBAlBYR,Y,EAAY,qI;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,2B;AAAA;AAAA;ACVzB;;AACA;;AACA;;AACA;;;;AAHW;;AACC;;AAAA;;AACH;;AAAA;;AACG;;AAAA;;;;;;;;;sEDOCA,Y,EAAY;cAJxB,uDAIwB;eAJd;AACTvI,kBAAQ,EAAE,UADD;AAEXC,qBAAW,EAAE;AAFF,S;AAIc,Q;;;;;;;;;;;;;;;;;;;;;;AEVzqG,CA2BA;;;AAFA,gFAAmB,kEAAnB;;QA4Ia+I,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAVpB,CACE;AACAC,eAAO,EAAG,uDADV;AAEAC,gBAAQ,EAAG;AAFX,OADF,EAKA,CAAC,oEAAD,CALA,C;AAMA,gBAlCS,CACP,uEADO,EAEP,2DAFO,EAGP,oEAHO,EAIP,4FAJO,EAKP,2EALO,EAMP,2EANO,EAOP,qEAPO,EAQP,qEARO,EASP,yEATO,EAUP,8EAVO,EAWP,sEAXO,EAYP,gFAZO,EAaP,uEAbO,EAcP,uEAdO,EAeP,+EAfO,EAgBP,qEAhBO,EAiBP,qEAjBO,EAkBP,yEAlBO,EAmBP,mEAnBO,EAoBP,qEApBO,EAqBP,6EArBO,EAsBP,yEAtBO,EAuBP,sEAvBO,EAwBP,qEAxBO,EAyBP,2EAzBO,CAkCT;;;;0HAIWF,S,EAAS;AAAA,uBAjFlB,2DAiFkB,EAhFlB,4FAgFkB,EA/ElB,4FA+EkB,EA9ElB,mFA8EkB,EA7ElB,wEA6EkB,EA5ElB,gGA4EkB,EA3ElB,mHA2EkB,EA1ElB,6GA0EkB,EAzElB,sJAyEkB,EAxElB,mHAwEkB,EAvElB,mHAuEkB,EAtElB,iFAsEkB,EArElB,sEAqEkB,EApElB,gGAoEkB,EAnElB,uFAmEkB,EAlElB,6GAkEkB,EAjElB,mHAiEkB,EAhElB,mHAgEkB,EA/DlB,mHA+DkB,EA9DlB,gGA8DkB,EA7DlB,oHA6DkB,EA5DlB,oHA4DkB,EA3DlB,oHA2DkB,EA1DlB,8GA0DkB,EAzDlB,kFAyDkB,EAxDlB,mHAwDkB,EAvDlB,mHAuDkB,EAtDlB,mHAsDkB,EArDlB,6GAqDkB,EApDlB,+GAoDkB,EAnDlB,+GAmDkB,EAlDlB,+GAkDkB,EAjDlB,yGAiDkB,EAhDlB,yGAgDkB,EA/ClB,oJA+CkB,EA9ClB,iJA8CkB,EA7ClB,iJA6CkB,EA5ClB,mJA4CkB,EA3ClB,6IA2CkB,EA1ClB,6IA0CkB;AA1CQ,kBAK1B,uEAL0B,EAM1B,2DAN0B,EAO1B,oEAP0B,EAQ1B,4FAR0B,EAS1B,2EAT0B,EAU1B,2EAV0B,EAW1B,qEAX0B,EAY1B,qEAZ0B,EAa1B,yEAb0B,EAc1B,8EAd0B,EAe1B,sEAf0B,EAgB1B,gFAhB0B,EAiB1B,uEAjB0B,EAkB1B,uEAlB0B,EAmB1B,+EAnB0B,EAoB1B,qEApB0B,EAqB1B,qEArB0B,EAsB1B,yEAtB0B,EAuB1B,mEAvB0B,EAwB1B,qEAxB0B,EAyB1B,6EAzB0B,EA0B1B,yEA1B0B,EA2B1B,sEA3B0B,EA4B1B,qEA5B0B,EA6B1B,2EA7B0B;AA0CR,O;AAbF,K;;;;;sEAaPA,S,EAAS;cAnFrB,sDAmFqB;eAnFZ;AACRG,sBAAY,EAAE,CACZ,2DADY,EAEZ,4FAFY,EAGZ,4FAHY,EAIZ,mFAJY,EAKZ,wEALY,EAMZ,gGANY,EAOZ,mHAPY,EAQZ,6GARY,EASZ,sJATY,EAUZ,mHAVY,EAWZ,mHAXY,EAYZ,iFAZY,EAaZ,sEAbY,EAcZ,gGAdY,EAeZ,uFAfY,EAgBZ,6GAhBY,EAiBZ,mHAjBY,EAkBZ,mHAlBY,EAmBZ,mHAnBY,EAoBZ,gGApBY,EAqBZ,oHArBY,EAsBZ,oHAtBY,EAuBZ,oHAvBY,EAwBZ,8GAxBY,EAyBZ,kFAzBY,EA0BZ,mHA1BY,EA2BZ,mHA3BY,EA4BZ,mHA5BY,EA6BZ,6GA7BY,EA8BZ,+GA9BY,EA+BZ,+GA/BY,EAgCZ,+GAhCY,EAiCZ,yGAjCY,EAkCZ,yGAlCY,EAmCZ,oJAnCY,EAoCZ,iJApCY,EAqCZ,iJArCY,EAsCZ,mJAtCY,EAuCZ,6IAvCY,EAwCZ,6IAxCY,CADN;AA6CRb,iBAAO,EAAE,CACP,uEADO,EAEP,2DAFO,EAGP,oEAHO,EAIP,4FAJO,EAKP,2EALO,EAMP,2EANO,EAOP,qEAPO,EAQP,qEARO,EASP,yEATO,EAUP,8EAVO,EAWP,sEAXO,EAYP,gFAZO,EAaP,uEAbO,EAcP,uEAdO,EAeP,+EAfO,EAgBP,qEAhBO,EAiBP,qEAjBO,EAkBP,yEAlBO,EAmBP,mEAnBO,EAoBP,qEApBO,EAqBP,6EArBO,EAsBP,yEAtBO,EAuBP,sEAvBO,EAwBP,qEAxBO,EAyBP,2EAzBO,CA7CD;AAwERc,mBAAS,EACT,CACE;AACAH,mBAAO,EAAG,uDADV;AAEAC,oBAAQ,EAAG;AAFX,WADF,EAKA,CAAC,oEAAD,CALA,CAzEQ;AAiFRG,mBAAS,EAAE,CAAC,2DAAD;AAjFH,S;AAmFY,Q;;;;;;;;;;;;;;;;;;ACrKtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,sB;AAEX,wCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,sB;AAAsB,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA;AAAA;ACPnC;;AAAG;;AAAqB;;;;;;;;sEDOXA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTtJ,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;AEPnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaqJ,sB;AAEX,wCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,sB;AAAsB,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA;AAAA;ACPnC;;AAAG;;AAAqB;;;;;;;;sEDOXA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTvJ,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;AEPnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOasJ,oB;AAEX,sCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,oB;AAAoB,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA;AAAA;ACPjC;;AAAG;;AAAmB;;;;;;;;sEDOTA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTxJ,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;AEPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOauJ,sB;AAEX,wCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,sB;AAAsB,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA;AAAA;ACPnC;;AAAG;;AAAqB;;;;;;;;sEDOXA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTzJ,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;AEPnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACgDoB;;AAA+F;AAAA;;AAAA;;AAAA;AAAA;;AAC3F;;AACJ;;;;QDhCPwJ,sB;AAsBX,sCAAoBpD,WAApB,EACoBY,MADpB,EAEoByC,cAFpB,EAGmBC,SAHnB,EAGmE;AAAA;;AAH/C,aAAAtD,WAAA,GAAAA,WAAA;AACA,aAAAY,MAAA,GAAAA,MAAA;AACA,aAAAyC,cAAA,GAAAA,cAAA;AACD,aAAAC,SAAA,GAAAA,SAAA;AAtBrB,aAAAC,OAAA,GAAoB;AAChB3K,mBAAS,EAAG,IADI;AAEhB4K,cAAI,EAAE,IAFU;AAGhBC,qBAAW,EAAE,IAHG;AAIhBC,sBAAY,EAAE,IAJE;AAKhBC,2BAAiB,EAAE,IALH;AAMhBC,4BAAkB,EAAE,IANJ;AAOhBC,cAAI,EAAG,IAPS;AAQhBC,gBAAM,EAAG,IARO;AAShBC,oBAAU,EAAG,IATG;AAUhBC,iBAAO,EAAG,IAVM;AAWhBC,oBAAU,EAAG,IAXG;AAYhBnL,mBAAS,EAAG,IAZI;AAahB8E,mBAAS,EAAG;AAbI,SAApB;AA2BgB;;;;mCAEN,CAEP;;;2CAEe;AAAA;;AAEd,cAAIU,KAAK,GAAG9F,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BwF,YAA3B,CAAlB;AACA,cAAIgG,MAAM,GAAG1L,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BC,SAA3B,CAAnB;AACA,eAAK4K,OAAL,CAAazK,SAAb,GAA0BN,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BK,SAA3B,CAAhC;AACA,eAAKwK,OAAL,CAAa3K,SAAb,GAAyB,IAAIC,IAAJ,EAAzB;AACA,eAAK0K,OAAL,CAAaU,UAAb,GAA0BC,MAA1B;AAEA,eAAKX,OAAL,CAAa3F,SAAb,GAAyB,KAAzB;;AAEA,cAAGU,KAAK,IAAI,0EAAYE,OAAxB,EACA;AACE,iBAAKwB,WAAL,CAAiB7G,WAAjB,CAA6B,qDAA7B,EAAoF,KAApF;AAED,WAJD,MAKA;AACC,gBAAG,wDAAKgL,OAAL,CAAa,KAAKZ,OAAL,CAAaC,IAA1B,CAAH,EAAmC;AACjC,mBAAKH,cAAL,CAAoBhK,IAApB,CAAyB,2DAAS+K,OAAlC,EAA2ClL,SAA3C,CAAqD,UAAAmL,IAAI,EAAI;AAC1DA,oBAAI,GAAGA,IAAP;AACD,oBAAIC,UAAU,GAAGD,IAAI,CAAC/I,MAAL,CAAY,UAAArB,CAAC;AAAA,yBAAIA,CAAC,CAACuJ,IAAF,IAAU,OAAI,CAACD,OAAL,CAAaC,IAA3B;AAAA,iBAAb,CAAjB;AACA,oBAAIe,aAAa,GAAGF,IAAI,CAAC/I,MAAL,CAAY,UAAArB,CAAC;AAAA,yBAAIA,CAAC,CAACjC,EAAF,IAAQkM,MAAZ;AAAA,iBAAb,CAApB;;AAEC,oBAAII,UAAU,CAACE,MAAX,IAAqB,CAAzB,EAA4B;AAE1B,sBAAGlG,KAAK,IAAI,0EAAYM,aAAxB,EAAsC;AAElC,2BAAI,CAACyE,cAAL,CAAoBrK,MAApB,CAA2B,OAAI,CAACuK,OAAhC,EAAyC,2DAASa,OAAlD,EAA2DlL,SAA3D,CAAqE,UAAAuL,GAAG,EAAI;AAC1EA,yBAAG,GAAGA,GAAN;AAEA,0BAAIR,UAAU,GAAGQ,GAAG,CAACzM,EAArB;AAEYyM,yBAAG,CAACR,UAAJ,GAAiBA,UAAjB;;AACA,6BAAI,CAACZ,cAAL,CAAoBnJ,MAApB,CAA2BuK,GAA3B,EAA+B,2DAASL,OAAxC,EAAiDlL,SAAjD,CAA2D,YAAM,CAAE,CAAnE;;AAEJ,6BAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,iCAA7B,EAA+D,KAA/D;;AACA,6BAAI,CAAC6G,WAAL,CAAiB7E,YAAjB;;AACA,6BAAI,CAACoI,OAAL,GAAe,IAAf;AACD,qBAXT;AAYC,mBAdL,MAcU,IAAIjF,KAAK,IAAI,0EAAYK,MAArB,IAA+B4F,aAAa,CAACjJ,MAAd,CAAqB,UAAArB,CAAC;AAAA,2BAAIA,CAAC,CAACgK,UAAF,IAAgBC,MAApB;AAAA,mBAAtB,EAAkDM,MAAlD,GAA2D,CAA9F,EACN;AAEE,2BAAI,CAACnB,cAAL,CAAoBrK,MAApB,CAA2B,OAAI,CAACuK,OAAhC,EAAyC,2DAASa,OAAlD,EAA2DlL,SAA3D,CAAqE,UAAAuL,GAAG,EAAI;AAC1EA,yBAAG,GAAGA,GAAN;AAEA,0BAAIR,UAAU,GAAGQ,GAAG,CAACzM,EAArB;AAEUyM,yBAAG,CAAC7G,SAAJ,GAAgB,IAAhB;AACA6G,yBAAG,CAACR,UAAJ,GAAiBzL,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAvB;;AACA,6BAAI,CAACtB,cAAL,CAAoBnJ,MAApB,CAA2BuK,GAA3B,EAA+B,2DAASL,OAAxC,EAAiDlL,SAAjD,CAA2D,YAAM,CAAE,CAAnE;;AAEF,6BAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,iCAA7B,EAA+D,KAA/D;;AACA,6BAAI,CAAC6G,WAAL,CAAiB7E,YAAjB;;AACA,6BAAI,CAACoI,OAAL,GAAe,IAAf;AACD,qBAZT;AAaD,mBAhBK,MAgBD;AACH,2BAAI,CAACvD,WAAL,CAAiB7G,WAAjB,CAA6B,gEAA7B,EAA8F,KAA9F;AACD;AACN,iBAnCD,MAqCC,OAAI,CAAC6G,WAAL,CAAiB7G,WAAjB,CAA6B,qBAA7B,EAAmD,KAAnD;AACF,eA3CF;AA4CA,aA7CF,MA8CK;AACF,mBAAK6G,WAAL,CAAiB7G,WAAjB,CAA6B,eAA7B,EAA6C,KAA7C;AACD;AACF;AACF;;;sCAEU;AACT,eAAKmK,SAAL,CAAelK,KAAf;AACD;;;;;;;uBA1GUgK,sB,EAAsB,mI,EAAA,uH,EAAA,gJ,EAAA,sI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,8nC;AAAA;AAAA;AClBnC;;AACI;;AACI;;AAEA;;AAEI;;AACI;;AAAgB;;AAAY;;AACxB;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAA3J,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;AAEJ;;AAEA;;AACR;;AACA;;AAA0B;;AAAQ;;AAClC;;AAA2B;;AAAU;;AACrC;;;;AApD6B;;AAAA;;AAID;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAKA;;AAAA;;;;;;;;;sED9Bf2J,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT1J,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AElBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAeagL,sB;AAIX,sCAAoB3D,cAApB,EACoBC,cADpB,EAEoB2D,QAFpB,EAGmBpI,SAHnB,EAIoBqI,WAJpB,EAI6C;AAAA;;AAJzB,aAAA7D,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAA2D,QAAA,GAAAA,QAAA;AACD,aAAApI,SAAA,GAAAA,SAAA;AACC,aAAAqI,WAAA,GAAAA,WAAA;AAEL;;;;mCAEP;AACN,eAAKC,aAAL;AACD;;;yCAGa;AAAA;;AAEZ,cAAIC,aAAa,GAAG,IAApB;AAEA,eAAK9D,cAAL,CAAoB7H,IAApB,CAAyB,2DAASmF,OAAlC,EAA2CtF,SAA3C,CAAqD,UAAA+L,GAAG,EAAI;AACxDA,eAAG,GAAGA,GAAN;AACAD,yBAAa,GAAGC,GAAG,CAAC3J,MAAJ,CAAW,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACxB,SAAF,IAAe,OAAI,CAAC8K,OAAL,CAAavL,EAAb,CAAgBuD,QAAhB,EAAnB;AAAA,aAAZ,CAAhB;;AAEA,gBAAIyJ,aAAa,CAACR,MAAd,GAAuB,CAA3B,EACA;AACE,qBAAI,CAACK,QAAL,CAAc1L,WAAd,CAA0B,uEAA1B,EAAmG,KAAnG;AACD,aAHD,MAKA;AACI,kBAAIX,MAAM,CAAC,OAAI,CAACsM,WAAL,CAAiBpM,MAAjB,GAA0BwF,YAA3B,CAAN,IAAkD,iFAAYU,aAAlE,EAAgF;AAC9E,uBAAI,CAACqC,cAAL,WAA2B,OAAI,CAACsC,OAAL,CAAavL,EAAxC,EAA4C,2DAASoM,OAArD,EAA8DlL,SAA9D,CAAwE,YAAI;AAC1E,yBAAI,CAAC2L,QAAL,CAAc1L,WAAd,CAA0B,gCAA1B,EAA4D,KAA5D;;AACD,yBAAI,CAAC2L,WAAL,CAAiB3J,YAAjB;AACA,iBAHD;AAID,eALD,MAMM;AACF,uBAAI,CAAC0J,QAAL,CAAc1L,WAAd,CAA0B,gCAA1B,EAA4D,KAA5D;;AACA,uBAAI,CAAC2L,WAAL,CAAiB3J,YAAjB;AACD;AACN;AACJ,WArBD;AAsBD;;;sCAEU;AACT,eAAKsB,SAAL,CAAerD,KAAf;AACD;;;wCAEa;AAAA;;AAGZ,eAAK6H,cAAL,CAAoBjH,QAApB,CAA6B,KAAKyC,SAAL,CAAezE,EAA5C,EAAgD,2DAASoM,OAAzD,EAAkElL,SAAlE,CAA4E,UAAAuL,GAAG,EAAI;AACjF,mBAAI,CAAClB,OAAL,GAAekB,GAAf;AAED,WAHD;AAKA;;;;;;;uBAzDSG,sB,EAAsB,gJ,EAAA,gJ,EAAA,mI,EAAA,sI,EAAA,mI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,wa;AAAA;AAAA;ACfnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AAEI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAGA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAM,cAAA,EAAT;AAAyB,WAAzB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAzL,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;;;AAxBgB;;AAAA;;AAKA;;AAAA;;AAMC;;AAAA;;;;;;;;;sEDFJmL,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTlL,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEfnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmBQ;;AAAsC;;AAAE;;;;;;AACxC;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAKnC;;AAAsC;;AAAY;;;;;;AAClD;;AAAmC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;AAAyB;;;;;;AAAzB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAc;;;;;;AACpD;;AAAmC;;AAA0B;;;;;;AAA1B;;AAAA;;;;;;AAKnC;;AAAsC;;AAAS;;;;;;AAE3C;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAWT;;AAAsC;;AAAK;;;;;;;;AAC3C;;AAEI;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACC;;AACI;;AACJ;;AACJ;;AACA;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACC;;AACI;;AACJ;;AACJ;;AAGJ;;;;;;AAIF;;;;;;AACA;;;;QDvEOuL,oB;AASX,oCAAoBvE,MAApB,EACoBK,cADpB,EAEmB7I,MAFnB,EAGoB4E,YAHpB,EAIoBN,OAJpB,EAIqC;AAAA;;AAJjB,aAAAkE,MAAA,GAAAA,MAAA;AACA,aAAAK,cAAA,GAAAA,cAAA;AACD,aAAA7I,MAAA,GAAAA,MAAA;AACC,aAAA4E,YAAA,GAAAA,YAAA;AACA,aAAAN,OAAA,GAAAA,OAAA;AANpB,aAAA0I,gBAAA,GAAmB,CAAC,IAAD,EAAM,MAAN,EAAc,aAAd,EAA4B,cAA5B,EAA2C,mBAA3C,EAA+D,oBAA/D,EAAoF,WAApF,EAAgG,QAAhG,CAAnB;AAOgB;;;;mCAER;AAEN,eAAKC,aAAL;AAED;;;wCAEY;AAAA;;AAEX,cAAIC,aAAa,GAAuBxJ,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAkCC,KAA1E;AACA,cAAIuC,KAAK,GAAGmG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIrG,KAAK,GAAG9F,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAK1D,cAAL,CAAoB5H,IAApB,CAAyB,2DAAS+K,OAAlC,EAA2ClL,SAA3C,CAAqD,UAAAuL,GAAG,EAAI;AAC1DA,eAAG,GAAGA,GAAN;AAGA,mBAAI,CAAClB,OAAL,GAAgB,IAAIgC,KAAJ,EAAhB;;AAEI,gBAAGjH,KAAK,IAAI,0EAAYM,aAAxB,EACA;AACE6F,iBAAG,CAACe,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACvB,uBAAI,CAAClC,OAAL,CAAamC,IAAb,CAAkBD,OAAlB;AACE,eAFF;AAGD,aALD,MAMK,IAAGnH,KAAK,IAAI,0EAAYK,MAAxB,EACL;AACE8F,iBAAG,CAACe,OAAJ,CAAY,UAAAG,MAAM,EAAI;AACpB,oBAAGA,MAAM,CAAC1B,UAAP,CAAkB1I,QAAlB,MAA+BgD,KAAlC,EACA,OAAI,CAACgF,OAAL,CAAamC,IAAb,CAAkBC,MAAlB;AACD,eAHD;AAKD;;AAEL,gBAAIC,eAAe,GAAG,IAAIL,KAAJ,EAAtB;;AACA,gBAAID,aAAJ,EAAkB;AAEhB,mBAAK,IAAIpJ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,OAAI,CAACqH,OAAL,CAAaiB,MAAzC,EAAiDtI,KAAK,EAAtD,EAA0D;AACxD,oBAAMuJ,OAAO,GAAG,OAAI,CAAClC,OAAL,CAAarH,KAAb,CAAhB;AACE,oBAAIuJ,OAAO,CAAC/B,YAAR,CAAqBjI,WAArB,GAAmCC,QAAnC,CAA4C4J,aAAa,CAAC7J,WAAd,EAA5C,CAAJ,EACAmK,eAAe,CAACF,IAAhB,CAAqBD,OAArB;AACH;;AACD,qBAAI,CAAClC,OAAL,GAAe,IAAIgC,KAAJ,EAAf;AACA,qBAAI,CAAChC,OAAL,GAAeqC,eAAf;AACD,aATD,MASK;AACH,qBAAI,CAACrC,OAAL,GAAe,OAAI,CAACA,OAApB;AACD;AAGF,WApCD;AAqCD;;;qCAES;AAER,cAAG,KAAKvG,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,0EAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,0EAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA;AAHyD,aAAzC,CAAlB;AAMAzC,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAZD,MAYK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,oDAA9B,EAAmF,IAAnF;AACD;AAEF;;;sCAGanB,E,EAAW;AAEvB,cAAG,KAAKgF,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,0EAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,0EAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA,cAHyD;AAIzDlH,gBAAE,EAAFA;AAJyD,aAAzC,CAAlB;AAOAyE,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAbD,MAaK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,oDAA9B,EAAmF,IAAnF;AACD;AAEF;;;uCAIcnB,E,EAAW;AAExB,cAAG,KAAKgF,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,0EAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,0EAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,KADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA,cAHyD;AAIzDlH,gBAAE,EAAFA;AAJyD,aAAzC,CAAlB;AAOAyE,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAbD,MAaK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,oDAA9B,EAAmF,IAAnF;AACD;AAEF;;;;;;;uBAlIUgM,oB,EAAoB,uH,EAAA,gJ,EAAA,mI,EAAA,0I,EAAA,8H;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,e;AAAA,a;AAAA,qxB;AAAA;AAAA;ACtBjC;;AACE;;AAEC;;AAAM;AAAA,mBAAS,IAAAE,aAAA,EAAT;AAAwB,WAAxB;;AACJ;;AAA0B;;AAAM;;AAClC;;AACH;;AAEA;;AACE;;AAAM;AAAA,mBAAS,IAAAQ,UAAA,EAAT;AAAqB,WAArB;;AACJ;;AAA0B;;AAAU;;AACtC;;AACF;;AAEA;;AACI;;AAGE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGC;;AACC;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGC;;AACC;;AACA;;AACF;;AAGA;;AACE;;AACE;;AAYF;;AAIF;;AACE;;AACA;;AAeF;;AAGA;;AACA;;AACF;;AACJ;;;;AAhFqB;;AAAA;;AA6EI;;AAAA;;AACP;;AAAA;;;;;;;;;sEDvELV,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTzL,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEtBjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACoCY;;AACI;;AACY;;AACY;;AAAqB;AAAA;;AAAA;;AAAA;AAAA;;AAArB;;AACxB;;AACJ;;;;;;AAFiD;;AAAA,wGAA+B,SAA/B,EAA+B,0BAA/B;;;;;;;;AAYrD;;AAA+F;AAAA;;AAAA;;AAAA;AAAA;;AAC3F;;AACJ;;;;QDrCKkM,sB;AAIX,sCACoBC,cADpB,EAEoBjB,WAFpB,EAGmB1M,MAHnB,EAGgE;AAAA;;AAF5C,aAAA2N,cAAA,GAAAA,cAAA;AACA,aAAAjB,WAAA,GAAAA,WAAA;AACD,aAAA1M,MAAA,GAAAA,MAAA;AACF;;;;mCAET;AAER,cAAII,MAAM,CAAC,KAAKsM,WAAL,CAAiBpM,MAAjB,GAA0BwF,YAA3B,CAAN,IAAkD,0EAAYU,aAAlE,EACG,KAAKoH,aAAL,GAAqB,IAArB;AAEH,eAAKC,YAAL;AAEC;;;2CAGkB;AAAA;;AAEjB,cAAI3H,KAAK,GAAG9F,MAAM,CAAC,KAAKsM,WAAL,CAAiBpM,MAAjB,GAA0BwF,YAA3B,CAAlB;;AACA,cAAGI,KAAK,IAAI,0EAAYE,OAAxB,EACA;AACE,iBAAKsG,WAAL,CAAiB3L,WAAjB,CAA6B,8DAA7B,EAA6F,KAA7F;AAED,WAJD,MAKA;AACC,gBAAI,wDAAKgL,OAAL,CAAa,KAAKZ,OAAL,CAAaC,IAA1B,CAAJ,EAAoC;AAC1B,kBAAI;AACK,qBAAKuC,cAAL,CAAoB7L,MAApB,CAA2B,KAAKqJ,OAAhC,EAAyC,2DAASa,OAAlD,EAA2DlL,SAA3D,CAAqE,YAAI;AACzE,yBAAI,CAAC4L,WAAL,CAAiB3L,WAAjB,CAA6B,gCAA7B,EAA+D,KAA/D;;AACA,yBAAI,CAAC2L,WAAL,CAAiB3J,YAAjB;AACD,iBAHC;AAKH,eANN,CAMO,OAAO+K,KAAP,EAAc;AACd,qBAAKpB,WAAL,CAAiB3L,WAAjB,CAA6B,mCAAmC+M,KAAhE,EAAuE,IAAvE;AACD;AAEd,aAXF,MAWM;AACH,mBAAKpB,WAAL,CAAiB3L,WAAjB,CAA6B,gBAA7B,EAAgD,KAAhD;AACD;AACA;AACJ;;;sCAEU;AACT,eAAKf,MAAL,CAAYgB,KAAZ;AACD;;;uCAGc;AAAA;;AACb,eAAK2M,cAAL,CAAoB/L,QAApB,CAA6B,KAAK5B,MAAL,CAAYJ,EAAzC,EAA6C,2DAASoM,OAAtD,EAA+DlL,SAA/D,CAAyE,UAAAuL,GAAG,EAAI;AAC9E,mBAAI,CAAClB,OAAL,GAAekB,GAAf;AACD,WAFD;AAID;;;;;;;uBAxDUqB,sB,EAAsB,gJ,EAAA,mI,EAAA,sI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,ssC;AAAA;AAAA;AChBnC;;AACI;;AAAgB;;AAA0B;;AACtC;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AAOA;;AAEI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAArM,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;;;AArDiB;;AAAA;;AAID;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAGC;;AAAA;;AAUD;;AAAA;;AAKA;;AAAA;;;;;;;;;sEDnCHqM,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTpM,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEbnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACmBY;;AACI;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACtB;;AACJ;;AACJ;;;;QDXCuM,c;AAMb,8BAAoBvF,MAApB,EACqBwF,WADrB,EAC+C;AAAA;;AAD3B,aAAAxF,MAAA,GAAAA,MAAA;AACC,aAAAwF,WAAA,GAAAA,WAAA;AALrB,aAAAC,MAAA,GAAkB,IAAI,0DAAJ,EAAlB;AAMkB;;;;mCAER,CAEP;;;qCAEYzK,Q,EAAc;AAEzB,cAAIA,QAAQ,CAACC,KAAT,KAAmB,EAAnB,IAAyBD,QAAQ,CAACC,KAAT,IAAkB,CAA/C,EACE,KAAKuK,WAAL,CAAiBE,YAAjB,CAA8B,KAAKD,MAAnC;AAEH;;;;;;;uBAnBUF,c,EAAc,uH,EAAA,qI;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,md;AAAA;AAAA;ACf3B;;AACI;;AAAgB;;AAA0B;;AAAW;;AAAI;;AACrD;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAEA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAEA;;AACI;;AACA;AAAA;AAAA,aAA0B,UAA1B,EAA0B;AAAA,mBAA0C,IAAAG,YAAA,QAA1C;AAA8D,WAAxF;;AADA;;AAGJ;;AACJ;;AAEI;;AAUZ;;;;AA3BiB;;AAAA;;AAMA;;AAAA;;AAMD;;AAAA;;AAKC;;AAAA;;;;;;;;;sEDPJH,c,EAAc;cAL1B,uDAK0B;eALhB;AACTzM,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEd3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMoB;;AACK;;AACL;;;;;;AAFkD;;AAC7C;;AAAA;;;;;;AAUL;;AACQ;;AACR;;;;;;AAFiD;;AACzC;;AAAA;;;;QDAf2M,sB;AAeX,sCACoBvG,WADpB,EAEoBY,MAFpB,EAGoB4F,cAHpB,EAIoBC,cAJpB,EAKmBC,YALnB,EAKsE;AAAA;;AAJlD,aAAA1G,WAAA,GAAAA,WAAA;AACA,aAAAY,MAAA,GAAAA,MAAA;AACA,aAAA4F,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACD,aAAAC,YAAA,GAAAA,YAAA;AAlBnB,aAAAC,YAAA,GAAgB,EAAhB;AAIE,aAAAC,OAAA,GAAoB;AACpBhO,mBAAS,EAAG,IADQ;AAEpBE,mBAAS,EAAG,IAFQ;AAGpBqJ,cAAI,EAAG,IAHa;AAIpB0E,eAAK,EAAG,CAJY;AAKpBpO,mBAAS,EAAG,IALQ;AAMpBmF,mBAAS,EAAG;AANQ,SAApB;AAegB;;;;mCAEV;AACN,eAAKkJ,aAAL;AACA,eAAKzB,aAAL;AACD;;;iDAEwB;AAAA;;AAEvB,eAAKuB,OAAL,CAAa9N,SAAb,GAA0BN,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAhC;AACA,eAAKiC,OAAL,CAAahO,SAAb,GAAyB,IAAIC,IAAJ,EAAzB;AACA,eAAK+N,OAAL,CAAahJ,SAAb,GAAyB,KAAzB;AAEA,eAAK4I,cAAL,CAAoBnN,IAApB,CAAyB,2DAAS0N,OAAlC,EAA2C7N,SAA3C,CAAqD,UAAA8N,CAAC,EAAI;AACxDA,aAAC,GAAGA,CAAJ;AAEA,gBAAIC,KAAK,GAAGD,CAAC,CAAC1L,MAAF,CAAS,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACkI,IAAF,IAAU,OAAI,CAACyE,OAAL,CAAazE,IAAvB,IAA+BlI,CAAC,CAACxB,SAAF,IAAe,OAAI,CAACmO,OAAL,CAAanO,SAA/D;AAAA,aAAV,CAAZ;;AAEA,gBAAIwO,KAAK,CAACzC,MAAN,IAAgB,CAApB,EACA;AACE,qBAAI,CAACgC,cAAL,CAAoBxN,MAApB,CAA2B,OAAI,CAAC4N,OAAhC,EAAyC,2DAASG,OAAlD,EAA2D7N,SAA3D,CAAqE,YAAM;AACzE,uBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,mBAA7B;;AACA,uBAAI,CAAC6G,WAAL,CAAiB7E,YAAjB;AACC,eAHH;AAKD,aAPD,MAOK;AACH,qBAAI,CAAC6E,WAAL,CAAiB7G,WAAjB,CAA6B,mDAA7B;AACD;AAEF,WAhBD;AAkBD;;;sCAEa;AACZ,eAAKuN,YAAL,CAAkBtN,KAAlB;AACD;;;wCAEY;AAAA;;AAET,2EAAcoM,OAAd,CAAsB,UAAAC,OAAO,EAAI;AAC/B,mBAAI,CAACkB,YAAL,CAAkBjB,IAAlB,CAAuBD,OAAvB;AACD,WAFD;;AAGD,iBAAO,KAAKkB,YAAZ;AACF;;;wCACY;AAAA;;AACX,eAAKF,cAAL,CAAoBpN,IAApB,CAAyB,2DAAS+K,OAAlC,EAA2ClL,SAA3C,CAAqD,UAAAuL,GAAG,EAAI;AAC1D,mBAAI,CAAClB,OAAL,GAAekB,GAAf;AACD,WAFD;AAGD;;;;;;;uBArEU8B,sB,EAAsB,mI,EAAA,uH,EAAA,gJ,EAAA,gJ,EAAA,sI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,sa;AAAA;AAAA;ACnBnC;;AACI;;AAAgB;;AAA2B;;AACvC;;AACI;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAGA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAW,sBAAA,EAAT;AAAiC,WAAjC;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAzN,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;;;AAjC4B;;AAAA;;AACI;;AAAA;;AAUJ;;AAAA;;AACI;;AAAA;;AAQhB;;AAAA;;;;;;;;;sEDPH8M,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT7M,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEnBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAcauN,sB;AAYX,sCAAoBC,cAApB,EACoBpH,WADpB,EAEoBqH,aAFpB,EAGmB5K,SAHnB,EAGmE;AAAA;;AAH/C,aAAA2K,cAAA,GAAAA,cAAA;AACA,aAAApH,WAAA,GAAAA,WAAA;AACA,aAAAqH,aAAA,GAAAA,aAAA;AACD,aAAA5K,SAAA,GAAAA,SAAA;AAbnB,aAAAmK,OAAA,GAAoB;AAClB5O,YAAE,EAAE,IADc;AAElBY,mBAAS,EAAG,IAFM;AAGlBE,mBAAS,EAAG,IAHM;AAIlBqJ,cAAI,EAAE,IAJY;AAKlB0E,eAAK,EAAG,CALU;AAMlBpO,mBAAS,EAAG,IANM;AAOlBmF,mBAAS,EAAG;AAPM,SAApB;AAciB;;;;mCAET;AACN,eAAKkJ,aAAL;AACD;;;wCAEY;AAAA;;AAEX,eAAKO,aAAL,WAA0B7O,MAAM,CAAC,KAAKiE,SAAL,CAAezE,EAAhB,CAAhC,EAAqD,2DAAS+O,OAA9D,EAAuE7N,SAAvE,CAAiF,YAAM;AACnF,mBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,+BAA7B;;AACA,mBAAI,CAAC6G,WAAL,CAAiB7E,YAAjB;AACD,WAHH;AAKD;;;wCAEY;AAAA;;AACX,eAAKiM,cAAL,CAAoBpN,QAApB,CAA6B,KAAKyC,SAAL,CAAezE,EAA5C,EAAgDkB,SAAhD,CAA0D,UAAA0N,OAAO,EAAI;AACnE,mBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,WAFD;AAGD;;;sCAEU;AACT,eAAKnK,SAAL,CAAerD,KAAf;AACD;;;;;;;uBAvCU+N,sB,EAAsB,yI,EAAA,mI,EAAA,gJ,EAAA,sI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,iL;AAAA;AAAA;ACdnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAG,aAAA,EAAT;AAAwB,WAAxB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAA7N,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;;;AAbgB;;AAAA;;;;;;;;;sEDSH0N,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTzN,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEdnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,6C,CAYA;;;AACA,QAAM2N,YAAY,GAAmC,CACnD;AAACvP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KADmD,EAEnD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KAFmD,EAGnD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KAHmD,EAInD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KAJmD,EAKnD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KALmD,EAMnD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KANmD,EAOnD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KAPmD,EAQnD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KARmD,EASnD;AAACxP,QAAE,EAAE,CAAL;AAAQwP,UAAI,EAAE;AAAd,KATmD,EAUnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAVmD,EAWnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAXmD,EAYnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAZmD,EAanD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAbmD,EAcnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAdmD,EAenD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAfmD,EAgBnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAhBmD,EAiBnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAjBmD,EAkBnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAlBmD,EAmBnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KAnBmD,EAoBnD;AAACxP,QAAE,EAAE,EAAL;AAASwP,UAAI,EAAE;AAAf,KApBmD,CAArD;AAuBA;;;;;;QAKaC,kC;;;;;AAKX,oDAAc;AAAA;;AAAA;;AACZ;AALF,gBAAAC,IAAA,GAAuCH,YAAvC;AAIc;AAEb;AAED;;;;;;;;;kCAKO;AAAA;;AACL;AACA;AACA,cAAMI,aAAa,GAAG,CACpB,gDAAa,KAAKD,IAAlB,CADoB,EAEpB,KAAKE,SAAL,CAAeC,IAFK,EAGpB,KAAKC,IAAL,CAAUC,UAHU,CAAtB;AAMA,iBAAO,iEAASJ,aAAT,EAAwBK,IAAxB,CAA6B,2DAAI,YAAM;AAC5C,mBAAO,OAAI,CAACC,YAAL,CAAkB,OAAI,CAACC,aAAL,oBAAuB,OAAI,CAACR,IAA5B,EAAlB,CAAP;AACD,WAFmC,CAA7B,CAAP;AAGD;AAED;;;;;;;qCAIa,CAAE;AAEf;;;;;;;qCAIqBA,I,EAAsC;AACzD,cAAMS,UAAU,GAAG,KAAKP,SAAL,CAAeQ,SAAf,GAA2B,KAAKR,SAAL,CAAeS,QAA7D;AACA,iBAAOX,IAAI,CAACY,MAAL,CAAYH,UAAZ,EAAwB,KAAKP,SAAL,CAAeS,QAAvC,CAAP;AACD;AAED;;;;;;;sCAIsBX,I,EAAsC;AAAA;;AAC1D,cAAI,CAAC,KAAKI,IAAL,CAAUS,MAAX,IAAqB,KAAKT,IAAL,CAAUU,SAAV,KAAwB,EAAjD,EAAqD;AACnD,mBAAOd,IAAP;AACD;;AAED,iBAAOA,IAAI,CAACI,IAAL,CAAU,UAACW,CAAD,EAAIC,CAAJ,EAAU;AACzB,gBAAMC,KAAK,GAAG,OAAI,CAACb,IAAL,CAAUU,SAAV,KAAwB,KAAtC;;AACA,oBAAQ,OAAI,CAACV,IAAL,CAAUS,MAAlB;AACE,mBAAK,MAAL;AAAa,uBAAOK,OAAO,CAACH,CAAC,CAACjB,IAAH,EAASkB,CAAC,CAAClB,IAAX,EAAiBmB,KAAjB,CAAd;;AACb,mBAAK,IAAL;AAAW,uBAAOC,OAAO,CAAC,CAACH,CAAC,CAACzQ,EAAJ,EAAQ,CAAC0Q,CAAC,CAAC1Q,EAAX,EAAe2Q,KAAf,CAAd;;AACX;AAAS,uBAAO,CAAP;AAHX;AAKD,WAPM,CAAP;AAQD;;;;MA5DqD,mE;AA+DxD;;;AACA,aAASC,OAAT,CAAiBH,CAAjB,EAAqCC,CAArC,EAAyDC,KAAzD,EAAyE;AACvE,aAAO,CAACF,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAd,KAAoBC,KAAK,GAAG,CAAH,GAAO,CAAC,CAAjC,CAAP;AACD;;;;;;;;;;;;;;;;;AC3GD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACIM;;AAAsD;;AAAE;;;;;;AACxD;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsD;;AAAI;;;;;;AAC1D;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAGrC;;;;;;AACA;;;;;;;;QDJSE,iC;AALb;AAAA;;AAWE;AACA,aAAAzD,gBAAA,GAAmB,CAAC,IAAD,EAAO,MAAP,CAAnB;AAWD;;;;mCATY;AACT,eAAK0D,UAAL,GAAkB,IAAI,yGAAJ,EAAlB;AACD;;;0CAEiB;AAChB,eAAKA,UAAL,CAAgBhB,IAAhB,GAAuB,KAAKA,IAA5B;AACA,eAAKgB,UAAL,CAAgBlB,SAAhB,GAA4B,KAAKA,SAAjC;AACA,eAAKmB,KAAL,CAAWD,UAAX,GAAwB,KAAKA,UAA7B;AACD;;;;;;;uBAjBUD,iC;AAAiC,K;;;YAAjCA,iC;AAAiC,qD;AAAA;AAAA;oEACjC,wE,EAAY,I;;oEACZ,8D,EAAO,I;;oEACP,gE,EAAQ,I;;;;;;;;;;;;;;;;ACdrB;;AACE;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACA;;AACF;;AAEA;;AAMF;;;;AAVuB;;AAAA;;AACP;;AAAA;;AAIV;;AAAA,yIAAkC,WAAlC,EAAkC,CAAlC,EAAkC,UAAlC,EAAkC,EAAlC,EAAkC,iBAAlC,EAAkC,qEAAlC;;;;;;;;;sEDROA,iC,EAAiC;cAL7C,uDAK6C;eALnC;AACTnP,kBAAQ,EAAE,gCADD;AAETC,qBAAW,EAAE,6CAFJ;AAGTC,mBAAS,EAAE,CAAC,4CAAD;AAHF,S;AAKmC,Q;;gBAC3C,uD;iBAAU,wE;;;gBACV,uD;iBAAU,8D;;;gBACV,uD;iBAAU,gE;;;;;;;;;;;;;;;;;;;;AEXb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACQQ;;AAAsC;;AAAE;;;;;;AACxC;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAKnC;;AAAsC;;AAAK;;;;;;AAC3C;;AAAmC;;;;AAA+B;;;;;;AAA/B;;AAAA;;;;;;AAInC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAInC;;AAAsC;;AAAM;;;;;;AAExC;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVJ;;AACI;;AAKA;;AAKJ;;;;;;AAVS;;AAAA;;AAKA;;AAAA;;;;;;AAUT;;AAAsC;;AAAK;;;;;;;;AAC3C;;AAEI;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACC;;AACI;;AACJ;;AACJ;;AACA;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACC;;AACI;;AACJ;;AACJ;;AACJ;;;;;;AAIF;;;;;;AACA;;;;QD9COoP,oB;AAQX,oCAAoBpI,MAApB,EACoBqI,cADpB,EAEoBhI,cAFpB,EAGoBjE,YAHpB,EAImB5E,MAJnB,EAKoBsE,OALpB,EAKqC;AAAA;;AALjB,aAAAkE,MAAA,GAAAA,MAAA;AACA,aAAAqI,cAAA,GAAAA,cAAA;AACA,aAAAhI,cAAA,GAAAA,cAAA;AACA,aAAAjE,YAAA,GAAAA,YAAA;AACD,aAAA5E,MAAA,GAAAA,MAAA;AACC,aAAAsE,OAAA,GAAAA,OAAA;AAPtB,aAAA0I,gBAAA,GAAmB,CAAC,IAAD,EAAM,MAAN,EAAc,OAAd,EAAsB,WAAtB,EAAkC,WAAlC,EAA8C,QAA9C,CAAnB;AAQkB;;;;mCAER;AACJ,eAAK0B,aAAL;AACH;;;qCAES;AAGR,cAAG,KAAK9J,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,KADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA;AAHyD,aAAzC,CAAlB;AAMAzC,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAZD,MAYK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,oDAA9B,EAAmF,IAAnF;AACD;AAGF;;;sCAEanB,E,EAAW;AAEvB,cAAG,KAAKgF,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYU,aAA1D,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA,cAHyD;AAIzDlH,gBAAE,EAAFA;AAJyD,aAAzC,CAAlB;AAOAyE,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAbD,MAaK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,gEAA9B,EAA+F,IAA/F;AACD;AACF;;;8CAGqBnB,E,EAAW;AAE/B,cAAG,KAAKgF,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYU,aAA1D,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA,cAHyD;AAIzDlH,gBAAE,EAAFA;AAJyD,aAAzC,CAAlB;AAOAyE,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAbD,MAaK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,gEAA9B,EAA+F,IAA/F;AACD;AAGF;;;wCAGe;AAAA;;AAEd,eAAK8P,cAAL,CAAoB5P,IAApB,CAAyB,2DAAS0N,OAAlC,EAA2C7N,SAA3C,CAAqD,UAAA0N,OAAO,EAAI;AAC5DA,mBAAO,GAAGA,OAAV;AAEA,mBAAI,CAACsC,QAAL,GAAgB,IAAI3D,KAAJ,EAAhB;AAEAqB,mBAAO,CAACpB,OAAR,CAAgB,UAAAC,OAAO,EAAI;AAEvB,qBAAI,CAACxE,cAAL,CAAoBjH,QAApB,CAA6ByL,OAAO,CAAChN,SAAR,CAAkB8C,QAAlB,EAA7B,EAA2D,2DAAS6I,OAApE,EAA6ElL,SAA7E,CAAuF,UAAAxB,CAAC,EAAI;AAC1FA,iBAAC,GAAGA,CAAJ;AACA,oBAAIA,CAAJ,EACE+N,OAAO,CAAChN,SAAR,GAAoBf,CAAC,CAAC+L,WAAtB;AACH,eAJD;;AAKA,qBAAI,CAACyF,QAAL,CAAcxD,IAAd,CAAmBD,OAAnB;AACH,aARD;AASH,WAdD;AAeD;;;;;;;uBAvGUuD,oB,EAAoB,uH,EAAA,gJ,EAAA,gJ,EAAA,mI,EAAA,mI,EAAA,8H;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,e;AAAA,a;AAAA,+mB;AAAA;AAAA;ACtBjC;;AAEE;;AACE;;AAAM;AAAA,mBAAS,IAAAG,UAAA,EAAT;AAAqB,WAArB;;AACJ;;AAA0B;;AAAU;;AACtC;;AACF;;AAEE;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGC;;AACC;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AAYF;;AAGA;;AACE;;AACA;;AAaF;;AAGA;;AACA;;AACF;;AAEF;;;;AA/DmB;;AAAA;;AA2DI;;AAAA;;AACP;;AAAA;;;;;;;;;;sED9CLH,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTtP,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEtBjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAgBawP,sB;AAKX,sCACoBpJ,WADpB,EAEoBqJ,cAFpB,EAGmBC,YAHnB,EAIoB9M,KAJpB,EAIkC;AAAA;;AAHd,aAAAwD,WAAA,GAAAA,WAAA;AACA,aAAAqJ,cAAA,GAAAA,cAAA;AACD,aAAAC,YAAA,GAAAA,YAAA;AACC,aAAA9M,KAAA,GAAAA,KAAA;AAPtB,aAAAoK,OAAA,GAAmB,IAAI,sEAAJ,EAAnB;AAQmB;;;;mCAGT;AAEN,eAAKE,aAAL;AAED;;;wCAEY;AAAA;;AACX,eAAKF,OAAL,CAAa9N,SAAb,GAA0BN,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAhC;AACE,eAAK0E,cAAL,CAAoBnP,MAApB,CAA2B,KAAK0M,OAAhC,EAAyC,2DAASG,OAAlD,EAA2D7N,SAA3D,CAAqE,YAAM;AAC3E,mBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,iCAA7B;;AACA,mBAAI,CAACM,WAAL;AACD,WAHC;AAKH;;;sCAEU;AAET,eAAK6P,YAAL,CAAkBlQ,KAAlB;AAED;;;wCACe;AAAA;;AACZ,eAAKiQ,cAAL,CAAoBrP,QAApB,CAA6B,KAAKsP,YAAL,CAAkBtR,EAA/C,EAAmD,2DAAS+O,OAA5D,EAAqE7N,SAArE,CAA+E,UAAA0N,OAAO,EAAI;AACtF,mBAAI,CAACA,OAAL,GAAeA,OAAf;AACH,WAFD;AAGH;;;;;;;uBArCUwC,sB,EAAsB,mI,EAAA,gJ,EAAA,sI,EAAA,uH;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,yY;AAAA;AAAA;AChBnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEA;;AACI;;AACI;;AAA6B;AAAA;AAAA;;AAA7B;;AACR;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAG,aAAA,EAAT;AAAwB,WAAxB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAA9P,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AAER;;;;AAxBiB;;AAAA;;AAKD;;AAAA;;AAMiC;;AAAA,qGAA+B,SAA/B,EAA+B,qBAA/B;;;;;;;;;sEDApC2P,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT1P,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEhBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa4P,e;AAEX,iCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,e;AAAe,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,qF;AAAA;AAAA;ACP5B;;AACI;;AACA;;AACI;;AACI;;AACJ;;AACA;;AAAI;;AAAQ;;AAAM;;AAAO;;AAAO;;AACpC;;AACJ;;;;;;;;;sEDDaA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT9P,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;AEN5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa6P,e;AAEX,+BAAoBC,aAApB,EAAmD;AAAA;;AAA/B,aAAAA,aAAA,GAAAA,aAAA;AAAkC;;;;mCAE9C,CACP;;;4BAEM;AACP,iBAAO,KAAKA,aAAL,CAAmBC,UAAnB,CAA8BC,KAArC;AACD;;;4BAEO;AACN,iBAAO,KAAKF,aAAL,CAAmBC,UAAnB,CAA8BE,IAArC;AACD;;;4BAEW;AACV,iBAAO,KAAKH,aAAL,CAAmBC,UAAnB,CAA8BG,QAArC;AACD;;;;;;;uBAjBYL,e,EAAe,8H;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,8L;AAAA;AAAA;ACR5B;;AACI;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACJ;;AAEA;;AACJ;;AACJ;;AACJ;;;;AARW;;AAAA;;AAEK;;AAAA;;AAGJ;;AAAA;;;;;;;;;sEDJCA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT/P,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;AEP5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMamQ,a;AASX,+BAAc;AAAA;;AAPN,aAAAC,WAAA,GAAc,IAAI,oDAAJ,CAAgC;AACpDJ,eAAK,EAAG,QAD4C;AAEpDC,cAAI,EAAG,MAF6C;AAGpDC,kBAAQ,EAAG;AAHyC,SAAhC,CAAd;AAOS;;;;4BAEF;AACf,iBAAO,KAAKE,WAAL,CAAiBhO,KAAxB;AACD,S;0BAEc2N,U,EAAyB;AACrC,eAAKK,WAAL,CAAiBC,IAAjB,CAAsBN,UAAtB;AACF;;;;;;;uBAjBYI,a;AAAa,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFZ;;;;;sEAEDA,a,EAAa;cAHzB,wDAGyB;eAHd;AACVG,oBAAU,EAAE;AADF,S;AAGc,Q;;;;;;;;;;;;;;;;;;;;ACP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACsBwB;;AACI;;AACI;;AACJ;;AACA;;AACJ;;;;;;;;AA4BhB;;AACI;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACtB;;AACJ;;AACJ;;;;;;;;AAEA;;AACQ;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACtB;;AACJ;;AACR;;;;QDvDKC,Y;AAGX,4BAAoBC,IAApB,EAAwC;AAAA;;AAApB,aAAAA,IAAA,GAAAA,IAAA;AAFtB,aAAAC,MAAA,GAAS,KAAT;AACA,aAAAC,IAAA,GAAO,KAAP;AAC6C;;;;mCAEnC;AACR,eAAKC,aAAL;AACC;;;sCAEU;AAET,eAAKH,IAAL,CAAUI,WAAV;AAED;;;wCACU;AACX,eAAKF,IAAL,GAAY9R,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAN,IAAyC,0EAAY/F,aAArD,GAAqE,IAArE,GAA4E,KAAxF;AACD;;;;;;;uBAhBYuL,Y,EAAY,4I;AAAA,K;;;YAAZA,Y;AAAY,8B;AAAA,e;AAAA,a;AAAA,0qB;AAAA;AAAA;ACVzB;;AACI;;AACoE;AAAA;AAAA;;AAC5D;;AAEI;;AACA;;AACI;;AACJ;;AACA;;AACJ;;AAEA;;AACI;;AAA0B;;AAAU;;AAEpC;;AACQ;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AACA;;AAMA;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AACR;;AACJ;;AAEA;;AAAiB;AAAA,mBAAS,IAAAK,WAAA,EAAT;AAAsB,WAAtB;;AACb;;AACI;;AACJ;;AACA;;AACJ;;AACJ;;AACJ;;AAIA;;AACI;;AAMA;;AAKA;;AACJ;;AAEJ;;;;;;AAnEwE;;AAAA;;AAUzC;;AAAA;;AAUJ;;AAAA;;AAiCd;;AAAA;;AAMA;;AAAA;;;;;;;;;sEDnDAL,Y,EAAY;cALxB,uDAKwB;eALd;AACTzQ,kBAAQ,EAAE,SADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACsBY;;AACI;;AACI;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAA7B;;AACR;;;;;;AADqC;;AAAA,wGAAgC,SAAhC,EAAgC,0BAAhC;;;;;;AAa7B;;AACI;;AACJ;;;;;;AAFmD;;AAC/C;;AAAA;;;;;;AASJ;;AACA;;AACA;;;;;;AAFiD;;AACjD;;AAAA;;;;;;;;AAWR;;AAAgI;AAAA;;AAAA;;AAAA;AAAA;;AAC5H;;AACJ;;;;QD3CC6Q,sB;AAcb,sCAAsBvJ,cAAtB,EACsBD,cADtB,EAEsByJ,mBAFtB,EAGsB1K,WAHtB,EAIsB2K,YAJtB,EAKqBlO,SALrB,EAOsBmE,MAPtB,EAOuC;AAAA;;AAPjB,aAAAM,cAAA,GAAAA,cAAA;AACA,aAAAD,cAAA,GAAAA,cAAA;AACA,aAAAyJ,mBAAA,GAAAA,mBAAA;AACA,aAAA1K,WAAA,GAAAA,WAAA;AACA,aAAA2K,YAAA,GAAAA,YAAA;AACD,aAAAlO,SAAA,GAAAA,SAAA;AAEC,aAAAmE,MAAA,GAAAA,MAAA;AAnBtB,aAAAgK,SAAA,GAAsB,KAAtB;AAIA,aAAAC,OAAA,GAAoB,IAAI,mEAAJ,EAApB;AAIA,aAAAC,iBAAA,GAAmC,IAAI,2EAAJ,EAAnC;AAEA,aAAAC,gBAAA,GAAmB,EAAnB;AAS0C;;;;mCAEhC;AACJ,cAAIzM,KAAK,GAAG9F,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BwF,YAA3B,CAAlB;AAEA,cAAII,KAAK,IAAI,0EAAYM,aAAzB,EACG,KAAKgM,SAAL,GAAe,IAAf;AAEH,eAAKI,cAAL;AACA,eAAK3F,aAAL;AACH;;;wCAEe;AAAA;;AAEd,eAAKwF,OAAL,CAAa/R,SAAb,GAA0BN,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BK,SAA3B,CAAhC;AACA,eAAK8R,OAAL,CAAajS,SAAb,GAAyB,IAAIC,IAAJ,EAAzB;AAEA,eAAKgS,OAAL,CAAaI,cAAb,GAA8B,KAAKJ,OAAL,CAAaI,cAAb,CAA4B1P,QAA5B,GAAuC2P,IAAvC,MAAiD,eAAjD,GAAmE,0EAAYtM,aAAZ,CAA0BrD,QAA1B,EAAnE,GACA,KAAKsP,OAAL,CAAaI,cAAb,CAA4B1P,QAA5B,GAAuC2P,IAAvC,MAAiD,SAAjD,GAA6D,0EAAYC,OAAZ,CAAoB5P,QAApB,EAA7D,GACA,KAAKsP,OAAL,CAAaI,cAAb,CAA4B1P,QAA5B,GAAuC2P,IAAvC,MAAiD,QAAjD,GAA4D,0EAAYvM,MAAZ,CAAmBpD,QAAnB,EAA5D,GACA,KAAKsP,OAAL,CAAaI,cAAb,CAA4B1P,QAA5B,MAA0C,SAA1C,GAAsD,0EAAYiD,OAAZ,CAAoBjD,QAApB,EAAtD,GAAuF,IAHrH;AAOA,eAAK2F,cAAL,CAAoB7H,IAApB,CAAyB,2DAASmF,OAAlC,EAA2CtF,SAA3C,CAAqD,UAAAkS,IAAI,EAAI;AAC3DA,gBAAI,GAAGA,IAAP;AAEA,gBAAInE,KAAK,GAAGmE,IAAI,CAAC9P,MAAL,CAAY,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACoR,KAAF,CAAQ5P,WAAR,MAAyB,OAAI,CAACoP,OAAL,CAAaQ,KAAb,CAAmB5P,WAAnB,EAAzB,IAA6DxB,CAAC,CAACxB,SAAF,IAAe,OAAI,CAACoS,OAAL,CAAapS,SAA7F;AAAA,aAAb,CAAZ;;AAEM,gBAAIwO,KAAK,CAACzC,MAAN,GAAe,CAAnB,EACA;AACE,qBAAI,CAACxE,WAAL,CAAiB7G,WAAjB,CAA6B,0CAA7B;;AACA,qBAAI,CAAC0R,OAAL,CAAaQ,KAAb,GAAsB,IAAtB;AACAD,kBAAI,GAAI,IAAI7F,KAAJ,EAAR;AACD,aALD,MAKK;AAEH,qBAAI,CAACtE,cAAL,CAAoBjH,QAApB,CAA6B,OAAI,CAAC6Q,OAAL,CAAapS,SAA1C,EAAqD,2DAAS2L,OAA9D,EAAuElL,SAAvE,CAAiF,UAAAuL,GAAG,EAAI;AACtFA,mBAAG,GAAGA,GAAN;;AACA,oBAAI,CAACA,GAAG,CAAC7G,SAAT,EAAmB;AACjB,yBAAI,CAACsD,cAAL,CAAoBlI,MAApB,CAA2B,OAAI,CAAC6R,OAAhC,EAAyC,2DAASrM,OAAlD,EAA2DtF,SAA3D,CAAqE,YAAM;AACzE,2BAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,iBAA7B;;AACA,2BAAI,CAAC6G,WAAL,CAAiB7E,YAAjB;AACD,mBAHD;AAID,iBALD,MAOA;AACE,yBAAI,CAAC6E,WAAL,CAAiB7G,WAAjB,0DAAyEsL,GAAG,CAAChB,WAA7E,8CAAgI,KAAhI;AACD;AACF,eAZD;;AAcA2H,kBAAI,GAAI,IAAI7F,KAAJ,EAAR;AACD;AAER,WA7BD;AA8BD;;;sCAEU;AACT,eAAK9I,SAAL,CAAerD,KAAf;AACD;;;wCAEe;AAAA;;AAEd,cAAImF,KAAK,GAAG,KAAKyB,WAAL,CAAiBtH,MAAjB,GAA0BC,SAAtC;AACA,cAAI2F,KAAK,GAAG9F,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BwF,YAA3B,CAAlB;AAEA,eAAK+C,cAAL,CAAoB5H,IAApB,CAAyB,2DAAS+K,OAAlC,EAA2ClL,SAA3C,CAAqD,UAAAuL,GAAG,EAAI;AACxDA,eAAG,GAAGA,GAAN;AAEA,mBAAI,CAAClB,OAAL,GAAgB,IAAIgC,KAAJ,EAAhB;AAEEd,eAAG,CAACe,OAAJ,CAAY,UAAA8F,kBAAkB,EAAI;AAEhC,kBAAGhN,KAAK,IAAI,0EAAYM,aAAxB,EACE,OAAI,CAAC2E,OAAL,CAAamC,IAAb,CAAkB4F,kBAAlB,EADF,KAEK,IAAIhN,KAAK,IAAI,0EAAYK,MAArB,IAA+BJ,KAAK,IAAI+M,kBAAkB,CAACrH,UAAnB,CAA8B1I,QAA9B,EAA5C,EACD,OAAI,CAACgI,OAAL,CAAamC,IAAb,CAAkB4F,kBAAlB;AACH,aANH;AAOL,WAZD;AAaD;;;yCAEgB;AAEf,cAAIhN,KAAK,GAAG9F,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BwF,YAA3B,CAAlB;;AAEA,eAAK,IAAIqN,IAAT,IAAiB,yEAAjB,EAA8B;AAC5B,gBAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACDE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADJ,IACyBjN,KAAK,IAAI,0EAAYM,aADlD,EACkE;AAE9D,mBAAKmM,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAEH,aALD,MAMK,IAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACRE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADG,IACkBjN,KAAK,IAAI,0EAAYK,MAD3C,EACmD;AAEtD,kBAAG,iFAAmBgN,GAAnB,CAAuBJ,IAAvB,KAAgC,0EAAY5M,MAA5C,IAAsD,iFAAmBgN,GAAnB,CAAuBJ,IAAvB,KAAgC,0EAAY/M,OAArG,EACI,KAAKuM,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AACH;AACJ;AACF;;;6CAEiB;AAAA;;AAChB,eAAKT,iBAAL,CAAuBhS,SAAvB,GAAoCN,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BK,SAA3B,CAA1C;AACA,eAAK+R,iBAAL,CAAuBlS,SAAvB,GAAmC,IAAIC,IAAJ,EAAnC;AACA,eAAKiS,iBAAL,CAAuBtK,SAAvB,GAAmChI,MAAM,CAAC,KAAKwH,WAAL,CAAiBtH,MAAjB,GAA0BC,SAA3B,CAAzC;AAEE,eAAK+R,mBAAL,CAAyB1R,MAAzB,CAAgC,KAAK8R,iBAArC,EAAwD,2DAAS5M,YAAjE,EAA+EhF,SAA/E,CAAyF,YAAM;AAC7F,mBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,0BAA7B;AACD,WAFD;AAGH;;;;;;;uBAjIUsR,sB,EAAsB,gJ,EAAA,gJ,EAAA,gJ,EAAA,mI,EAAA,4I,EAAA,sI,EAAA,uH;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,otC;AAAA;AAAA;ACpBnC;;AACI;;AAAI;;AAAmB;;AACvB;;AACQ;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AAKA;;AACI;;AACI;;AAAgC;AAAA;AAAA;;AAAhC;;AACR;;AAGA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACI;;AAAkC;AAAA;AAAA;;AAAlC;;AACR;;AAER;;AACQ;;AAIA;;AAA0B;AAAA,mBAAS,IAAAhR,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AAGZ;;;;AAjEgB;;AAAA;;AAMA;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;AAGY;;AAAA;;AAOwB;;AAAA,0GAAoC,SAApC,EAAoC,0BAApC;;AAOxB;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AAQsB;;AAAA,wGAAkC,SAAlC,EAAkC,wBAAlC;;AAIlC;;AAAA;;;;;;;;;sEDzCPgR,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT/Q,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEpBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAgBagS,sB;AAIX,sCAAoBC,cAApB,EACoB9F,cADpB,EAEoB/F,WAFpB,EAGoBxD,KAHpB,EAImBC,SAJnB,EAImE;AAAA;;AAJ/C,aAAAoP,cAAA,GAAAA,cAAA;AACA,aAAA9F,cAAA,GAAAA,cAAA;AACA,aAAA/F,WAAA,GAAAA,WAAA;AACA,aAAAxD,KAAA,GAAAA,KAAA;AACD,aAAAC,SAAA,GAAAA,SAAA;AACH;;;;mCAER;AACN,eAAKqP,cAAL;AACD;;;yCAEW;AAAA;;AAGZ,eAAKD,cAAL,CAAoB7R,QAApB,CAA6B,KAAKyC,SAAL,CAAezE,EAA5C,EAAgD,2DAASwG,OAAzD,EAAkEtF,SAAlE,CAA4E,UAAA2R,OAAO,EAAI;AACrF,mBAAI,CAACA,OAAL,GAAeA,OAAf;;AAEA,mBAAI,CAACxF,aAAL,GAAqBnM,SAArB,CAA+B,UAAAqK,OAAO,EAAG;AACvC,qBAAI,CAACA,OAAL,GAAeA,OAAf;AACA,qBAAI,CAACsH,OAAL,CAAapS,SAAb,GAAyB,OAAI,CAAC8K,OAAL,CAAaG,YAAtC;AAED,aAJD;AAKD,WARD;AAUD;;;wCAEc;AAAA;;AACT,eAAKmI,cAAL,WAA2B,KAAKhB,OAAL,CAAa7S,EAAxC,EAA6C,2DAASwG,OAAtD,EAA+DtF,SAA/D,CAAyE,YAAM;AAC/E,mBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,+BAA7B;;AACA,mBAAI,CAACM,WAAL;;AACA,mBAAI,CAACuG,WAAL,CAAiB7E,YAAjB;AAGD,WANC;AAOH;;;sCACU;AACT,eAAKsB,SAAL,CAAerD,KAAf;AACD;;;wCAEY;AACX,iBAAO,KAAK2M,cAAL,CAAoB/L,QAApB,CAA6B,KAAK6Q,OAAL,CAAapS,SAA1C,EAAqD,2DAAS2L,OAA9D,CAAP;AACD;;;;;;;uBA7CUwH,sB,EAAsB,gJ,EAAA,gJ,EAAA,mI,EAAA,+H,EAAA,sI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,uZ;AAAA;AAAA;AChBnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAGA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAG,aAAA,EAAT;AAAwB,WAAxB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAtS,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;;;AAxBiB;;AAAA;;AAOD;;AAAA;;AAKA;;AAAA;;;;;;;;;sEDDHmS,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTlS,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEE3B;;AAAsC;;AAAE;;;;;;AACxC;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAM/B;;AAAsC;;AAAK;;;;;;AAC3C;;AAAmC;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAMrC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAIrC;;AAAsC;;AAAe;;;;;;AACrD;;AAAmC;;AAAsB;;;;;;AAAtB;;AAAA;;;;;;AAMzC;;AAAsC;;AAAS;;;;;;AAE3C;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAYH;;AAAsC;;AAAK;;;;;;;;AAUvC;;AAA2B;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEvB;;AACI;;AAEJ;;AAEJ;;;;;;;;AAhBJ;;AAGE;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACG;;AACI;;AACJ;;AACJ;;AAEA;;AASJ;;;;;;AATO;;AAAA;;;;;;AAYT;;AAAuD;;AAAK;;;;;;AAC5D;;;;QCxDOoS,oB;AAOX,oCACmB5T,MADnB,EAEmBsE,OAFnB,EAGoBuE,cAHpB,EAIoBC,cAJpB,EAKoBlE,YALpB,EAMoB4D,MANpB,EAMmC;AAAA;;AALhB,aAAAxI,MAAA,GAAAA,MAAA;AACA,aAAAsE,OAAA,GAAAA,OAAA;AACC,aAAAuE,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAlE,YAAA,GAAAA,YAAA;AACA,aAAA4D,MAAA,GAAAA,MAAA;AAVpB,aAAAqL,eAAA,GAA4B,KAA5B;AAEA,aAAA7G,gBAAA,GAAmB,CAAC,IAAD,EAAM,MAAN,EAAa,OAAb,EAAqB,WAArB,EAAiC,gBAAjC,EAAkD,WAAlD,EAA8D,QAA9D,CAAnB;AAWc;;;;mCAGN;AACL,eAAK8G,OAAL;AACF;;;qCAIS;AAER,cAAG,KAAKlP,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA;AAHyD,aAAzC,CAAlB;AAMAzC,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAZD,MAYK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,oDAA9B,EAAmF,IAAnF;AACD;AACF;;;sCAGanB,E,EAAW;AAEvB,cAAG,KAAKgF,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA,cAHyD;AAIzDlH,gBAAE,EAAFA;AAJyD,aAAzC,CAAlB;AAOAyE,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAbD,MAaK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,oDAA9B,EAAmF,IAAnF;AACD;AACF;;;uCAGcnB,E,EAAW;AAExB,cAAG,KAAKgF,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYS,MAAvD,IAAiE,KAAK3B,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA3B,IAA2C,iFAAYU,aAA3H,EACA;AACI,gBAAMM,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,gBAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiB,+FAAjB,EAAyC;AACzDC,mBAAK,EAAG,OADiD;AAEzDC,oBAAM,EAAG,OAFgD;AAGzDL,4BAAc,EAAdA,cAHyD;AAIzDlH,gBAAE,EAAFA;AAJyD,aAAzC,CAAlB;AAOAyE,qBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,qBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,aAFD;AAGH,WAbD,MAaK;AACH,iBAAKzC,YAAL,CAAkB7D,WAAlB,CAA8B,oDAA9B,EAAmF,IAAnF;AACD;AACF;;;kCAGe;;;;;;;;;AAERgT,iC,GAAoCrQ,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAkCC,K;AAEtEuC,yB,GAAQ,KAAKvB,YAAL,CAAkBtE,MAAlB,GAA2BC,S;AACnC2F,yB,GAAQ9F,MAAM,CAAC,KAAKwE,YAAL,CAAkBtE,MAAlB,GAA2BwF,YAA5B,C;AACdkO,0B,GAAU5T,MAAM,CAAC,KAAKwE,YAAL,CAAkBtE,MAAlB,GAA2BK,SAA5B,C;AACpB,yBAAKkT,eAAL,GAAuB3N,KAAK,IAAI,iFAAYE,OAArB,GAA+B,KAA/B,GAAuC,IAA9D;AAEA,yBAAK0C,cAAL,CAAoB7H,IAApB,CAAyB,2DAASmF,OAAlC,EAA2CtF,SAA3C,CAAqD,UAAAmT,CAAC,EAAG;AACvDA,uBAAC,GAAGA,CAAJ;AACA,0BAAIC,gBAAgB,GAAGD,CAAvB;AAEA,0BAAIE,gBAAgB,GAAG,IAAIhH,KAAJ,EAAvB;;AAEA,0BAAI4G,aAAJ,EAAkB;AAEhB,6BAAK,IAAIjQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGoQ,gBAAgB,CAAC9H,MAA7C,EAAqDtI,KAAK,EAA1D,EAA8D;AAC5D,8BAAMuJ,OAAO,GAAG6G,gBAAgB,CAACpQ,KAAD,CAAhC;AACE,8BAAIuJ,OAAO,CAACtD,IAAR,CAAa1G,WAAb,GAA2BC,QAA3B,CAAoCyQ,aAAa,CAAC1Q,WAAd,EAApC,CAAJ,EACE8Q,gBAAgB,CAAC7G,IAAjB,CAAsBD,OAAtB;AACL;;AACD6G,wCAAgB,GAAG,IAAI/G,KAAJ,EAAnB;AACA+G,wCAAgB,GAAGC,gBAAnB;AACD;;AAED,6BAAI,CAACtL,cAAL,CAAoB5H,IAApB,CAAyB,2DAAS+K,OAAlC,EAA2ClL,SAA3C,CAAqD,UAAAxB,CAAC,EAAI;AACxDA,yBAAC,GAAGA,CAAJ;AACA,4BAAI8U,eAAe,GAAG9U,CAAtB;AAEA,+BAAI,CAACmT,OAAL,GAAe,IAAItF,KAAJ,EAAf;AACA,4BAAIkH,SAAS,GAAG,IAAhB;AACA,4BAAIC,SAAS,GAAG,IAAhB;AACA,4BAAIC,YAAY,GAAG,IAAnB;;AAEA,6BAAK,IAAIzQ,MAAK,GAAG,CAAjB,EAAoBA,MAAK,GAAGoQ,gBAAgB,CAAC9H,MAA7C,EAAqDtI,MAAK,EAA1D,EAA8D;AAC5D,8BAAM+I,GAAG,GAAGqH,gBAAgB,CAACpQ,MAAD,CAA5B;;AAEM,+BAAK,IAAIA,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAIsQ,eAAe,CAAChI,MAA7C,EAAqDtI,OAAK,EAA1D,EAA8D;AAC5D,gCAAMuI,GAAG,GAAI+H,eAAe,CAACtQ,OAAD,CAA5B;;AAEA,gCAAG+I,GAAG,CAACxM,SAAJ,IAAiBgM,GAAG,CAACzM,EAAJ,CAAOuD,QAAP,GAAkB2P,IAAlB,EAApB,EACA;AACEuB,uCAAS,GAAGhI,GAAG,CAACzM,EAAhB;AACAiN,iCAAG,CAACxM,SAAJ,GAAgBgM,GAAG,CAAChB,WAApB;AACAwB,iCAAG,CAACgG,cAAJ,GAAqBhG,GAAG,CAACgG,cAAJ,IAAsBvG,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAtB,GAA4D,eAA5D,GACAM,GAAG,CAACgG,cAAJ,IAAsBvG,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAtB,GAA4D,SAA5D,GACAM,GAAG,CAACgG,cAAJ,IAAsBvG,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtB,GAA2D,SAA3D,GACAM,GAAG,CAACgG,cAAJ,IAAsBvG,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtB,GAA2D,QAA3D,GACAM,GAAG,CAACgG,cAJzB;AAMAyB,uCAAS,GAAGjI,GAAG,CAACzM,EAAhB;AACA2U,0CAAY,GAAGlI,GAAG,CAACR,UAAnB;;AAEE,kCAAG3F,KAAK,IAAI,iFAAYM,aAAxB,EACA;AACE,uCAAI,CAACiM,OAAL,CAAanF,IAAb,CAAkBT,GAAlB;;AACE;AACD,+BAJH,MAKO,IAAG3G,KAAK,IAAI,iFAAYK,MAAxB,EACL;AACE,oCAAG+N,SAAS,IAAInO,KAAb,IAAsBoO,YAAY,IAAIpO,KAAhB,IAAyB0G,GAAG,CAACgG,cAAJ,IAAsB,eAAxE,EACA;AACE,yCAAI,CAACJ,OAAL,CAAanF,IAAb,CAAkBT,GAAlB;;AACAwH,2CAAS,GAAG,IAAZ;AACAC,2CAAS,GAAG,IAAZ;AACA;AACD;AACF,+BATI,MAUA,IAAGpO,KAAK,IAAI,iFAAYE,OAAxB,EACL;AAEE,oCAAGkO,SAAS,IAAInO,KAAb,IAAsB0G,GAAG,CAACjN,EAAJ,IAAUoU,MAAnC,EACA;AACE,yCAAI,CAACvB,OAAL,CAAanF,IAAb,CAAkBT,GAAlB;;AACAwH,2CAAS,GAAG,IAAZ;AACAC,2CAAS,GAAG,IAAZ;AACA;AACD;AAEF;AAEF;AACN;AACR;AACJ,uBA3DC;AA4DL,qBA7EG;;;;;;;;;AAgFJ;;;;;;;uBAhLWV,oB,EAAoB,mI,EAAA,6H,EAAA,gJ,EAAA,gJ,EAAA,oI,EAAA,wH;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,e;AAAA,a;AAAA,8vB;AAAA;AAAA;ADnCjC;;AACG;;AAEC;;AAAM;AAAA,mBAAS,IAAAE,OAAA,EAAT;AAAkB,WAAlB;;AACJ;;AAA0B;;AAAM;;AAClC;;AACJ;;AACA;;AACE;;AAAM;AAAA,mBAAS,IAAAU,UAAA,EAAT;AAAqB,WAArB;;AACJ;;AAA0B;;AAAU;;AACtC;;AACF;;AAEA;;AACI;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAIE;;AACI;;AACA;;AACJ;;AAIA;;AACE;;AACA;;AACJ;;AAEA;;AACE;;AACA;;AACJ;;AAIH;;AACC;;AACE;;AAYF;;AAKI;;AACE;;AACA;;AAmBF;;AAEA;;AACA;;AAIF;;AAEJ;;;;AAnFqB;;AAAA;;AA4EI;;AAAA;;AACP;;AAAA;;;;;;;;;sECxDLZ,oB,EAAoB;cAPhC,uDAOgC;eAPtB;AACTtS,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAOsB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACsByB;;AACD;;AACJ;;;;;;AAFuD;;AACnD;;AAAA;;;;;;AASJ;;AACG;;AACH;;;;;;AAFiD;;AAC9C;;AAAA;;;;;;;;AAkBf;;AAA+G;AAAA;;AAAA;;AAAA;AAAA;;AAC3G;;AACJ;;;;QDnCKiT,sB;AAWX,sCAAoBC,aAApB,EACmB/G,cADnB,EAEmB/F,WAFnB,EAGmBY,MAHnB,EAIkBnE,SAJlB,EAIkE;AAAA;;AAJ9C,aAAAqQ,aAAA,GAAAA,aAAA;AACD,aAAA/G,cAAA,GAAAA,cAAA;AACA,aAAA/F,WAAA,GAAAA,WAAA;AACA,aAAAY,MAAA,GAAAA,MAAA;AACD,aAAAnE,SAAA,GAAAA,SAAA;AAVlB,aAAAwP,eAAA,GAA4B,KAA5B;AAEA,aAAAlB,gBAAA,GAAmB,EAAnB;AASgB;;;;mCAER;AACN,eAAKgC,aAAL;AACA,eAAK1H,aAAL;AAED;;;wCAEe;AAAA;;AAEV,cAAI/G,KAAK,GAAG9F,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AACA,eAAKkG,OAAL,CAAaI,cAAb,GAA8B,KAAKJ,OAAL,CAAaI,cAAb,IAA+B,eAA/B,GAAiD,0EAAYrM,aAAZ,CAA0BrD,QAA1B,EAAjD,GACG,KAAKsP,OAAL,CAAaI,cAAb,IAA+B,SAA/B,GAA2C,0EAAYE,OAAZ,CAAoB5P,QAApB,EAA3C,GACC,KAAKsP,OAAL,CAAaI,cAAb,IAA+B,SAA/B,GAA2C,0EAAYzM,OAAZ,CAAoBjD,QAApB,EAA3C,GACA,KAAKsP,OAAL,CAAaI,cAAb,IAA+B,QAA/B,GAA0C,0EAAYtM,MAAZ,CAAmBpD,QAAnB,EAA1C,GACA,IAJlC;AAMI,eAAKuR,aAAL,CAAmBzT,IAAnB,CAAwB,2DAASmF,OAAjC,EAA0CtF,SAA1C,CAAoD,UAAAkS,IAAI,EAAI;AAC1DA,gBAAI,GAAGA,IAAP;AAEA,gBAAInE,KAAK,GAAGmE,IAAI,CAAC9P,MAAL,CAAY,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACoR,KAAF,CAAQ5P,WAAR,MAAyB,OAAI,CAACoP,OAAL,CAAaQ,KAAb,CAAmB5P,WAAnB,EAAzB,IAA6DxB,CAAC,CAACxB,SAAF,IAAe,OAAI,CAACoS,OAAL,CAAapS,SAAzF,IAAsGwB,CAAC,CAACjC,EAAF,IAAQ,OAAI,CAAC6S,OAAL,CAAa7S,EAA/H;AAAA,aAAb,CAAZ;;AAEE,gBAAIiP,KAAK,CAACzC,MAAN,GAAe,CAAnB,EACA;AACI,qBAAI,CAACsI,aAAL,CAAmB5S,MAAnB,CAA0B,OAAI,CAAC2Q,OAA/B,EAAwC,2DAASrM,OAAjD,EAA0DtF,SAA1D,CAAoE,YAAM;AACxE,uBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,iCAA7B;;AACA,uBAAI,CAACM,WAAL;;AACA,uBAAI,CAACuG,WAAL,CAAiB7E,YAAjB;AACD,eAJD;;AAKAiQ,kBAAI,GAAI,IAAI7F,KAAJ,EAAR;AACD,aARH,MAQQ,IAAGjH,KAAK,IAAI,0EAAYM,aAAxB,EAAsC;AAE1C,qBAAI,CAACkO,aAAL,CAAmB5S,MAAnB,CAA0B,OAAI,CAAC2Q,OAA/B,EAAwC,2DAASrM,OAAjD,EAA0DtF,SAA1D,CAAoE,YAAM;AACtE,uBAAI,CAAC8G,WAAL,CAAiB7G,WAAjB,CAA6B,iCAA7B;;AACA,uBAAI,CAACM,WAAL;;AACA,uBAAI,CAACuG,WAAL,CAAiB7E,YAAjB;AAED,eALH;;AAMEiQ,kBAAI,GAAI,IAAI7F,KAAJ,EAAR;AACH,aATK,MASD;AAEH,qBAAI,CAACvF,WAAL,CAAiB7G,WAAjB,CAA6B,4CAA7B,EAA2E,KAA3E;;AACA,qBAAI,CAAC0R,OAAL,CAAaQ,KAAb,GAAsB,IAAtB;AACAD,kBAAI,GAAI,IAAI7F,KAAJ,EAAR;AACH;AACJ,WA5BD;AA8BT;;;wCAEe;AAAA;;AAEd,cAAIhH,KAAK,GAAGmG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIrG,KAAK,GAAG9F,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAKoB,cAAL,CAAoB1M,IAApB,CAAyB,2DAAS+K,OAAlC,EAA2ClL,SAA3C,CAAqD,UAAAuL,GAAG,EAAI;AAC1DA,eAAG,GAAGA,GAAN;AAEA,mBAAI,CAAClB,OAAL,GAAgB,IAAIgC,KAAJ,EAAhB;AAECjH,iBAAK,IAAE,0EAAYM,aAAnB,GAAmC,OAAI,CAAC2E,OAAL,GAAekB,GAAlD,GACenG,KAAK,IAAI,0EAAYK,MAArB,IAA+B8F,GAAG,CAACnJ,MAAJ,CAAW,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACjC,EAAF,IAAQQ,MAAM,CAAC+F,KAAD,CAAlB;AAAA,aAAZ,CAA/B,IACGD,KAAK,IAAI,0EAAYE,OAArB,IAAgCiG,GAAG,CAACnJ,MAAJ,CAAW,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACjC,EAAF,IAAQQ,MAAM,CAAC+F,KAAD,CAAlB;AAAA,aAAZ,CADnC,IAEGkG,GAAG,CAACnJ,MAAJ,CAAW,UAAArB,CAAC;AAAA,qBAAIA,CAAC,CAACgK,UAAF,IAAgBzL,MAAM,CAAC+F,KAAD,CAA1B;AAAA,aAAZ,CAHlB;AAOH;;;;;;;;AASC,WArBD;AAsBD;;;wCAEY;AAAA;;AAET,eAAKuO,aAAL,CAAmB9S,QAAnB,CAA4B,KAAKyC,SAAL,CAAezE,EAA3C,EAA+C,2DAASwG,OAAxD,EAAiEtF,SAAjE,CAA2E,UAAA2R,OAAO,EAAI;AACtF,mBAAI,CAACA,OAAL,GAAeA,OAAf;AAEA,gBAAImC,WAAW,GAAGnC,OAAO,CAACI,cAA1B;AACA,mBAAI,CAACJ,OAAL,CAAaI,cAAb,GAA8B,OAAI,CAACJ,OAAL,CAAaI,cAAb,IAA+B,0EAAYrM,aAAZ,CAA0BrD,QAA1B,EAA/B,GAAsE,eAAtE,GACA,OAAI,CAACsP,OAAL,CAAaI,cAAb,IAA+B,0EAAYE,OAAZ,CAAoB5P,QAApB,EAA/B,GAAiE,SAAjE,GACC,OAAI,CAACsP,OAAL,CAAaI,cAAb,IAA+B,0EAAYzM,OAAZ,CAAoBjD,QAApB,EAA/B,GAAiE,SAAjE,GACA,OAAI,CAACsP,OAAL,CAAaI,cAAb,IAA+B,0EAAYtM,MAAZ,CAAmBpD,QAAnB,EAA/B,GAAgE,QAAhE,GACA,IAJ/B;;AAMD,mBAAI,CAAC0R,wBAAL,CAA8B,OAAI,CAACpC,OAAL,CAAaI,cAA3C,EAA2D+B,WAA3D;AACA,WAXC;AAYH;;;iDAEwBnC,O,EAAkBmC,W,EAAsB;AAC/D,cAAI1O,KAAK,GAAG9F,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;;AAGE,eAAK,IAAI4G,IAAT,IAAiB,yEAAjB,EAA8B;AAEzB,gBAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACFE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADH,IACwBjN,KAAK,IAAI,0EAAYM,aADjD,EACiE;AAE9D,mBAAKmM,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAED,aALF,MAMM,IAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACRE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADG,IACkBjN,KAAK,IAAI,0EAAYK,MAD3C,EACmD;AAExD,kBAAG,iFAAmBgN,GAAnB,CAAuBJ,IAAvB,KAAgC,0EAAY5M,MAA5C,IAAsD,iFAAmBgN,GAAnB,CAAuBJ,IAAvB,KAAgC,0EAAY/M,OAArG,EACI,KAAKuM,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAEH,aANI,MAOA,IAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACRE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADG,IACkBjN,KAAK,IAAI,0EAAYE,OAD3C,EACoD;AAEvD,kBAAG,iFAAmBmN,GAAnB,CAAuBJ,IAAvB,KAAgC,0EAAY/M,OAA/C,EACI,KAAKuM,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAEL;AACN;AACJ;;;sCAEU;AACT,eAAK9O,SAAL,CAAerD,KAAf;AACD;;;;;;;uBA7IUyT,sB,EAAsB,gJ,EAAA,gJ,EAAA,mI,EAAA,uH,EAAA,sI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,q8B;AAAA;AAAA;AClBnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACH;;AAGT;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACI;;AAAqB;AAAA;AAAA;;AAArB;;AACR;;AAEA;;AACI;;AACI;;AAA2B;AAAA;AAAA;;AAA3B;;AACR;;AAGJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAApT,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;;;AArDiB;;AAAA;;AAKD;;AAAA;;AAKA;;AAAA;;AAMY;;AAAA;;AACS;;AAAA;;AAST;;AAAA;;AACI;;AAAA;;AAQS;;AAAA,qGAA+B,SAA/B,EAA+B,qBAA/B;;AAKM;;AAAA,wGAAkC,SAAlC,EAAkC,wBAAlC;;AAM/B;;AAAA;;;;;;;;;sEDjCHoT,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTnT,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AElBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOasT,gB;AAEX,kCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,gB;AAAgB,K;;;YAAhBA,gB;AAAgB,kC;AAAA,c;AAAA,a;AAAA;AAAA;ACP7B;;AAAG;;AAAc;;;;;;;;sEDOJA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTxT,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;AEP7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAKauT,Y,GAEX,sBAAoBC,EAApB,EAAoC;AAAA;;AAAhB,WAAAA,EAAA,GAAAA,EAAA;AAClBA,QAAE,CAACC,aAAH,CAAiBC,KAAjB,CAAuBC,KAAvB,GAA+B,SAA/B;AACD,K;;;uBAJUJ,Y,EAAY,yH;AAAA,K;;;YAAZA,Y;AAAY;;;;;sEAAZA,Y,EAAY;cAHxB,uDAGwB;eAHd;AACTzT,kBAAQ,EAAE;AADD,S;AAGc,Q;;;;;;;;;;;;;;;;;;;;;;ACHzB;AAAA;;;AAAA;AAAA;AAAA;;QAAaT,I;;;;;;;;;;;;;;;;;;;ACFb;AAAA;;;AAAA;AAAA;AAAA;;QAAasB,O;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;QAAaiT,M;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,O;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;QAAavP,Y;;;;;;;;;;;;;;;;;;;ACGb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAYwP,WAAZ;;AAAA,eAAYA,WAAZ,EAAuB;AAEnB,iDAAiBlV,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAvB,IAA4D,eAA5D;AACA,2CAAUnM,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAhB,IAAqD,SAArD;AACA,2CAAUnM,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAhB,IAAoD,SAApD;AACA,0CAASnM,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAf,IAAmD,QAAnD;AACH,KAND,EAAY+I,WAAW,KAAXA,WAAW,MAAvB;;AAQO,QAAMC,kBAAkB,GAAG,IAAIlM,GAAJ,CAAwB,CAC1D,CAAC,eAAD,EAAkBjJ,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAxB,CAD0D,EAE1D,CAAC,SAAD,EAAYnM,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAlB,CAF0D,EAG1D,CAAC,SAAD,EAAYnM,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAlB,CAH0D,EAI1D,CAAC,QAAD,EAAWnM,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAjB,CAJ0D,CAAxB,CAA3B;;;;;;;;;;;;;;;;ACXP;AAAA;;;AAAA;AAAA;AAAA;;QAAanG,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBb,QAAMoP,WAAW,GAAG;AAClBC,aAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAC,wBAAgB;AAAjB,OAAhB;AADS,KAApB;;QASaC,Y;AAgBX,4BAAoBlN,MAApB,EACoBmN,QADpB,EAEoBC,IAFpB,EAGoBhO,WAHpB,EAG6C;AAAA;;AAHzB,aAAAY,MAAA,GAAAA,MAAA;AACA,aAAAmN,QAAA,GAAAA,QAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAhO,WAAA,GAAAA,WAAA;AAjBpB,aAAA4J,KAAA,GAAQ,mBAAR;AACA,aAAAqE,eAAA,GAAkB,EAAlB;AACA,aAAAC,cAAA,GAAiB,WAAjB;AACA,aAAA7H,MAAA,GAAkB,IAAI,0DAAJ,EAAlB;AAGQ,aAAA8H,YAAA,GAAe,EAAf;AAEA,aAAAC,kBAAA,GAA8B,KAA9B;AAER,aAAA9L,kBAAA,GAAqB,IAAI,0DAAJ,EAArB;AACA,aAAAE,mBAAA,GAAsB,IAAI,0DAAJ,EAAtB;AASc,aAAKyL,eAAL,GAAuB,sEAAYA,eAAnC;AACF,aAAKC,cAAL,GAAuB,sEAAYG,QAAnC;AACC;;;;qCAEMhI,M,EAAgB;;;;;;;;;AAGhB,2BAAM,KAAK2H,IAAL,CAAUM,IAAV,CAA4B,KAAKJ,cAAL,GAAsB,2DAASK,KAA3D,EAAkElI,MAAlE,EAA0EmI,SAA1E,EAAN;;;AAAXC,4B;;AAGH,wBAAIA,QAAQ,IAAI,IAAZ,IAAoB,CAACA,QAAQ,CAAC7Q,SAA9B,IAA2C,CAAC6Q,QAAQ,CAACC,aAArD,IAAsE,CAACD,QAAQ,CAACE,SAApF,EACG;AAEE,2BAAKrM,kBAAL,CAAwBsM,IAAxB,CAA6B,IAA7B;AACA,2BAAKpM,mBAAL,CAAyBoM,IAAzB,CAA8B,KAA9B;AACA,2BAAKR,kBAAL,GAA0B,IAA1B;AACA,2BAAKxN,MAAL,CAAY5C,QAAZ,CAAqB,CAAC,GAAD,CAArB;AAEA0G,kCAAY,CAACmK,OAAb,CAAqB,KAArB,EAA4BJ,QAAQ,CAACK,KAArC;AACApK,kCAAY,CAACmK,OAAb,CAAqB,MAArB,EAA6BJ,QAAQ,CAACzW,EAAtC;AACA0M,kCAAY,CAACmK,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAACxD,cAAvC;AAEAvG,kCAAY,CAACmK,OAAb,CAAqB,MAArB,EAA6BJ,QAAQ,CAAC7Q,SAAtC;AACA8G,kCAAY,CAACmK,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAAChW,SAAvC;AACA,2BAAKuH,WAAL,CAAiB7G,WAAjB,CAA6B,sBAAsBkN,MAAM,CAACgF,KAA1D,EAAkE,KAAlE;AAEAoD,8BAAQ,CAACM,cAAT,CAAwBvJ,OAAxB,CAAgC,UAAAC,OAAO,EAAI;AAEzC,4BAAIA,OAAO,CAACtD,IAAR,IAAgB,eAApB,EACIuC,YAAY,CAACmK,OAAb,CAAqB,aAArB,EAAoCpJ,OAAO,CAACzN,EAAR,CAAWuD,QAAX,EAApC,EADJ,KAEK,IAAIkK,OAAO,CAACtD,IAAR,IAAgB,SAApB,EACDuC,YAAY,CAACmK,OAAb,CAAqB,aAArB,EAAoCpJ,OAAO,CAACzN,EAAR,CAAWuD,QAAX,EAApC,EADC,KAEA,IAAIkK,OAAO,CAACtD,IAAR,IAAgB,SAApB,EACDuC,YAAY,CAACmK,OAAb,CAAqB,YAArB,EAAmCpJ,OAAO,CAACzN,EAAR,CAAWuD,QAAX,EAAnC,EADC,KAEA,IAAIkK,OAAO,CAACtD,IAAR,IAAgB,QAApB,EACDuC,YAAY,CAACmK,OAAb,CAAqB,YAArB,EAAmCpJ,OAAO,CAACzN,EAAR,CAAWuD,QAAX,EAAnC;AACL,uBAVD;AAYD,qBA5BJ,MA8BG;AACE,2BAAK6S,kBAAL,GAA0B,KAA1B;AACA,2BAAK9L,kBAAL,CAAwBsM,IAAxB,CAA6B,KAA7B;AACA,2BAAKpM,mBAAL,CAAyBoM,IAAzB,CAA8B,IAA9B;AAEA,0BAAIH,QAAQ,CAAC7Q,SAAb,EACE,KAAKoC,WAAL,CAAiB7G,WAAjB,CAA6B,oBAA7B,EAAmD,IAAnD,EADF,KAEK,IAAIsV,QAAQ,CAACC,aAAb,EACH,KAAK1O,WAAL,CAAiB7G,WAAjB,CAA6B,oBAA7B,EAAmD,IAAnD,EADG,KAGH,KAAK6G,WAAL,CAAiB7G,WAAjB,CAA6B,4BAA7B,EAA2D,IAA3D;AACL;;;;;;;;AAIC,yBAAK6G,WAAL,CAAiB7G,WAAjB,CAA6B,yBAAyB,aAAE6V,OAAxD,EAAiE,IAAjE;;;;;;;;;AAGP;;;sCACU;AACT,eAAK1M,kBAAL,CAAwBsM,IAAxB,CAA6B,KAA7B;AACA,eAAKpM,mBAAL,CAAyBoM,IAAzB,CAA8B,IAA9B;AACAlK,sBAAY,CAACuK,UAAb,CAAwB,KAAxB;AACAvK,sBAAY,CAACuK,UAAb,CAAwB,MAAxB;AACAvK,sBAAY,CAACuK,UAAb,CAAwB,OAAxB;AACAvK,sBAAY,CAACuK,UAAb,CAAwB,MAAxB;AACAvK,sBAAY,CAACuK,UAAb,CAAwB,OAAxB;AACA,eAAKjP,WAAL,CAAiB7G,WAAjB,CAA6B,YAA7B,EAA2C,KAA3C;AACA,eAAKyH,MAAL,CAAY5C,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACD;;;iCAEK;AACJ,cAAIkR,SAAS,GAAG,IAAI,gEAAJ,CAAgB;AAC5B,4BAAiB,iCADW;AAE5B,sBAAiB,kBAFW;AAG5B,6BAAiB,YAAYxK,YAAY,CAACC,OAAb,CAAqB,KAArB;AAHD,WAAhB,CAAhB;AAKA,iBAAO;AAAEkJ,mBAAO,EAAEqB;AAAX,WAAP;AACD;;;6CAEiB;AAAA;;AAEhB,2FAAmB1J,OAAnB,CAA2B,UAAAC,OAAO,EAAI;AACpC,mBAAI,CAAC0I,YAAL,CAAkBzI,IAAlB,CAAuBD,OAAvB;AACD,WAFD;;AAGD,iBAAO,KAAK0I,YAAZ;AACA;;;;;;;uBA5GUL,Y,EAAY,8G,EAAA,+H,EAAA,uH,EAAA,iH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACV5D,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAcaiF,c;AAMb,8BAAoBpB,QAApB,EACsBC,IADtB,EAEsBhO,WAFtB,EAGsBoP,YAHtB,EAGiD;AAAA;;AAH7B,aAAArB,QAAA,GAAAA,QAAA;AACE,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAhO,WAAA,GAAAA,WAAA;AACA,aAAAoP,YAAA,GAAAA,YAAA;AAPpB,aAAAxF,KAAA,GAAQ,EAAR;AACA,aAAAqE,eAAA,GAAkB,EAAlB;AACA,aAAAC,cAAA,GAAiB,EAAjB;AAQY,aAAKD,eAAL,GAAuB,sEAAYA,eAAnC;AACA,aAAKC,cAAL,GAAuB,sEAAYG,QAAZ,GAAuB,UAA9C;AACA,O,CAEV;;;;;+BACOzH,O,EAAiB;AAAA;;AACtB,iBAAO,KAAKoH,IAAL,CAAUM,IAAV,CAAwB,KAAKJ,cAA7B,EAA6CtH,OAA7C,EAAsD,KAAKwI,YAAL,CAAkBC,MAAlB,EAAtD,EAAkFrH,IAAlF,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;+BACI;AAAA;;AACF,iBAAO,KAAKsW,IAAL,CAAUrC,GAAV,CAAyB,KAAKuC,cAA9B,EAA8C,KAAKkB,YAAL,CAAkBC,MAAlB,EAA9C,EAA0ErH,IAA1E,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAEF;;;;iCACSM,E,EAAU;AAAA;;AAClB,cAAMwX,GAAG,aAAM,KAAKtB,cAAX,cAA6BlW,EAA7B,CAAT;AAEE,iBAAO,KAAKgW,IAAL,CAAUrC,GAAV,CAAuB6D,GAAvB,EAA4B,KAAKJ,YAAL,CAAkBC,MAAlB,EAA5B,EAAwDrH,IAAxD,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAIF,S,CAED;;;;+BACOkP,O,EAAgB;AAAA;;AACtB,iBAAO,KAAKoH,IAAL,CAAUyB,GAAV,CAAuB,KAAKvB,cAA5B,EAA4CtH,OAA5C,EAAqD,KAAKwI,YAAL,CAAkBC,MAAlB,EAArD,EAAiFrH,IAAjF,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAIA;;;gCAEMM,E,EAAY;AAAA;;AAClB,cAAMwX,GAAG,aAAM,KAAKtB,cAAX,cAA6BlW,EAA7B,CAAT;AACA,iBAAO,KAAKgW,IAAL,WAA0BwB,GAA1B,EAA+B,KAAKJ,YAAL,CAAkBC,MAAlB,EAA/B,EAA2DrH,IAA3D,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAKA;;;;;;;uBAzDSyX,c,EAAc,+H,EAAA,uH,EAAA,iH,EAAA,mI;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVjF,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYawF,iB;AAMX,iCACU3B,QADV,EAEoBC,IAFpB,EAGoBhO,WAHpB,EAIoBoP,YAJpB,EAI+C;AAAA;;AAHrC,aAAArB,QAAA,GAAAA,QAAA;AACU,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAhO,WAAA,GAAAA,WAAA;AACA,aAAAoP,YAAA,GAAAA,YAAA;AARpB,aAAAxF,KAAA,GAAQ,EAAR;AACA,aAAAqE,eAAA,GAAkB,EAAlB;AACA,aAAAC,cAAA,GAAiB,EAAjB;AAQc,aAAKD,eAAL,GAAuB,sEAAYA,eAAnC;AACA,aAAKC,cAAL,GAAuB,sEAAYG,QAAnC;AACD,O,CAGX;;;;;+BACOsB,C,EAAOpE,I,EAAc;AAAA;;AAC1B,iBAAO,KAAKyC,IAAL,CAAUM,IAAV,CAAkB,KAAKJ,cAAL,GAAsB3C,IAAxC,EAA+CoE,CAA/C,EAAkD,KAAKP,YAAL,CAAkBC,MAAlB,EAAlD,EAA8ErH,IAA9E,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;6BACK6T,I,EAAY;AAAA;;AACf,iBAAO,KAAKyC,IAAL,CAAUrC,GAAV,CAAmB,KAAKuC,cAAL,GAAsB3C,IAAzC,EAA+C,KAAK6D,YAAL,CAAkBC,MAAlB,EAA/C,EAA2ErH,IAA3E,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;iCACSM,E,EAAYuT,I,EAAY;AAAA;;AACjC,cAAMiE,GAAG,aAAM,KAAKtB,cAAL,GAAsB3C,IAA5B,cAAoCvT,EAApC,CAAT;AAEE,iBAAO,KAAKgW,IAAL,CAAUrC,GAAV,CAAiB6D,GAAjB,EAAsB,KAAKJ,YAAL,CAAkBC,MAAlB,EAAtB,EAAkDrH,IAAlD,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;+BACOiY,C,EAAMpE,I,EAAY;AAAA;;AACzB,iBAAO,KAAKyC,IAAL,CAAUyB,GAAV,CAAiB,KAAKvB,cAAL,GAAsB3C,IAAvC,EAA6CoE,CAA7C,EAAgD,KAAKP,YAAL,CAAkBC,MAAlB,EAAhD,EAA4ErH,IAA5E,CACL,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAIC;;;gCAEMM,E,EAAYuT,I,EAAe;AAAA;;AAChC,cAAMiE,GAAG,aAAM,KAAKtB,cAAL,GAAsB3C,IAA5B,cAAoCvT,EAApC,CAAT;AACA,iBAAO,KAAKgW,IAAL,WAAoBwB,GAApB,EAAyB,KAAKJ,YAAL,CAAkBC,MAAlB,EAAzB,EAAqDrH,IAArD,CACP,2DAAI,UAAAsH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADO,EAEP,kEAAW,UAAA5X,CAAC;AAAA,mBAAI,OAAI,CAACsI,WAAL,CAAiBuP,WAAjB,CAA6B7X,CAA7B,CAAJ;AAAA,WAAZ,CAFO,CAAP;AAKD;;;;;;;uBA1DQgY,iB,EAAiB,+H,EAAA,uH,EAAA,iH,EAAA,mI;AAAA,K;;;aAAjBA,iB;AAAiB,eAAjBA,iBAAiB,K;AAAA,kBAFhB;;;;;sEAEDA,iB,EAAiB;cAH7B,wDAG6B;eAHlB;AACVxF,oBAAU,EAAE;AADF,S;AAGkB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAca0F,W;AAEX,2BAAoB7B,QAApB,EACmBC,IADnB,EAEmBtE,aAFnB,EAGmB9I,MAHnB,EAIkBlE,OAJlB,EAKkBtE,MALlB,EAKoC;AAAA;;AALhB,aAAA2V,QAAA,GAAAA,QAAA;AACD,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAtE,aAAA,GAAAA,aAAA;AACA,aAAA9I,MAAA,GAAAA,MAAA;AACD,aAAAlE,OAAA,GAAAA,OAAA;AACA,aAAAtE,MAAA,GAAAA,MAAA;AAEF;;;;oCAGJyX,G,EAAuC;AAAA,cAAzBC,MAAyB,uEAAP,KAAO;AACjD,eAAK/B,QAAL,CAAc1O,IAAd,CAAmBwQ,GAAnB,EAAwB,GAAxB,EAA8B;AAC5BE,oBAAQ,EAAG,IADiB;AAE5BC,8BAAkB,EAAE,OAFQ;AAG5BC,4BAAgB,EAAG,KAHS;AAI5BC,sBAAU,EAAGJ,MAAM,GAAG,CAAC,WAAD,CAAH,GAAmB,CAAC,YAAD;AAJV,WAA9B;AAOH;;;oCAEapY,C,EAAQ;AAClB,eAAKyB,WAAL,CAAiB,wBAAjB,EAA2C,IAA3C;AACA,iBAAO,0CAAP;AACD;;;wCAEegX,G,EAAY;AAC1B,iBAAOC,IAAI,CAACD,GAAD,CAAX;AACD;;;4CAEmBA,G,EAAW;AAC7B,iBAAOE,IAAI,CAACF,GAAD,CAAX;AAED;;;sCAEaG,M,EAAiBC,K,EAAgBC,Q,EAAiB;AAC5D,eAAK9G,aAAL,CAAmBC,UAAnB,CAA8BC,KAA9B,GAAsC0G,MAAtC;AACA,eAAK5G,aAAL,CAAmBC,UAAnB,CAA8BE,IAA9B,GAAqC0G,KAArC;AACA,eAAK7G,aAAL,CAAmBC,UAAnB,CAA8BG,QAA9B,GAAyC0G,QAAzC;AAEH;;;iCAEK;AAEJ,cAAIC,YAAY,GAAG,KAAKC,mBAAL,CAAyB,KAAzB,CAAnB;AAEA,cAAIC,KAAK,GAAI;AACThY,qBAAS,EAAG+L,YAAY,CAACC,OAAb,CAAqB,OAArB,CADH;AAETzG,wBAAY,EAAG1F,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAFZ;AAGT5L,qBAAS,EAAGP,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAHT;AAITiM,yBAAa,EAAGlM,YAAY,CAACC,OAAb,CAAqB,MAArB,CAJP;AAKTkM,uBAAW,EAAGJ;AALL,WAAb;AAQA,iBAAOE,KAAP;AACD;;;uCAGc;AAAA;;AACb,eAAK/P,MAAL,CAAYkQ,kBAAZ,CAA+BC,gBAA/B,GAAkD;AAAW,mBAAO,KAAP;AAAc,WAA3E;;AAEA,cAAIC,UAAU,GAAG,KAAKpQ,MAAL,CAAY4O,GAAZ,GAAkB,GAAnC;AAEA,eAAK5O,MAAL,CAAYqQ,aAAZ,CAA0BD,UAA1B,EAAsC;AAACE,8BAAkB,EAAE;AAArB,WAAtC,EACGzZ,IADH,CACQ,YAAM;AACV,mBAAI,CAACmJ,MAAL,CAAY5C,QAAZ,CAAqB,CAAC,OAAI,CAAC4C,MAAL,CAAY4O,GAAb,CAArB;AACD,WAHH;AAUC;;;8BAEGxX,E,EAAa2X,C,EAASwB,O,EAAkBC,M,EAAc;AAE1D,cAAMlS,cAAc,GAAG,KAAKxC,OAAL,CAAayC,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,cAAM3C,SAAS,GAAG,KAAKrE,MAAL,CAAYiH,IAAZ,CAAiBsQ,CAAjB,EAAoB;AAClCrQ,iBAAK,EAAG6R,OAD0B;AAElC5R,kBAAM,EAAG6R,MAFyB;AAGlClS,0BAAc,EAAdA,cAHkC;AAIlClH,cAAE,EAAFA;AAJkC,WAApB,CAAlB;AAMEyE,mBAAS,CAAC+C,WAAV,GAAwBtG,SAAxB,CAAkC,UAAAuG,MAAM,EAAI;AAC1CC,mBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,WAFD;AAIH;;;;;;;uBAzFUmQ,W,EAAW,+H,EAAA,uH,EAAA,gJ,EAAA,8G,EAAA,oH,EAAA,0H;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACV1F,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOamH,oB;AAEX,oCAAoBzQ,MAApB,EAAqC;AAAA;;AAAjB,aAAAA,MAAA,GAAAA,MAAA;AAAoB;;;;mCAEhC,CACP;;;kDAEsB;AACrB,eAAKA,MAAL,CAAY5C,QAAZ,CAAqB,CAAC,eAAD,CAArB;AACD;;;;;;;uBATUqT,oB,EAAoB,uH;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA,yE;AAAA;AAAA;ACRjC;;AAA0B;AAAA,mBAAS,IAAAC,uBAAA,EAAT;AAAkC,WAAlC;;AAElB;;AACR;;AAGA;;;;;;;;;sEDEaD,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT3X,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;AEPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa2X,gB;AAEX,gCAAoB3Q,MAApB,EAAoC;AAAA;;AAAhB,aAAAA,MAAA,GAAAA,MAAA;AAAmB;;;;mCAE/B,CACP;;;kDAEyB;AACxB,eAAKA,MAAL,CAAY5C,QAAZ,CAAqB,CAAC,gBAAD,CAArB;AACD;;;;;;;uBATUuT,gB,EAAgB,uH;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,c;AAAA,a;AAAA;AAAA;ACR7B;;;;;;;;;sEDQaA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACT7X,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;AEN7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACWoB;;AACI;;AACI;;AACJ;;AACJ;;;;;;AAJyC;;;;;;AAKzC;;AACI;;AACI;;AACJ;;AACJ;;;;;;AAdd;;AACE;;AACI;;AACI;;AACI;;AACA;;AAKA;;AAKJ;;AACJ;;AAGJ;;AACF;;;;;;AAhBc;;AAAA;;AACG;;AAAA;;AAKA;;AAAA;;;;QDJV4X,a;AAKX,6BAAoBC,eAApB,EACoB/H,aADpB,EAEoB1J,WAFpB,EAE6C;AAAA;;AAFzB,aAAAyR,eAAA,GAAAA,eAAA;AACA,aAAA/H,aAAA,GAAAA,aAAA;AACA,aAAA1J,WAAA,GAAAA,WAAA,CAAyB,CAGhC;AACA;AACD;AACA;AACC;AACA;;;;mCAEL;AACN,eAAK0R,gBAAL;AACA,eAAK1R,WAAL,CAAiBK,aAAjB,CAA+B,QAA/B,EAAwC,MAAxC,EAA+C,EAA/C;AACD;;;2CAGe;AAAA;;AAEd,cAAI9B,KAAK,GAAGmG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIrG,KAAK,GAAG9F,MAAM,CAACkM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAK8M,eAAL,CAAqBpY,IAArB,CAA0B,2DAAS0N,OAAnC,EAA4C7N,SAA5C,CAAsD,UAAAyY,IAAI,EAAI;AAC5DA,gBAAI,GAAGA,IAAP;AAEA,mBAAI,CAACC,QAAL,GAAgB,IAAIrM,KAAJ,EAAhB;AACEoM,gBAAI,CAACnM,OAAL,CAAa,UAAAC,OAAO,EAAI;AACtB,kBAAIlH,KAAK,IAAIkH,OAAO,CAAChN,SAArB,EACI,OAAI,CAACmZ,QAAL,CAAclM,IAAd,CAAmBD,OAAnB;AACL,aAHD;AAIH,WARD;AASD;;;;;;;uBArCU+L,a,EAAa,gJ,EAAA,yJ,EAAA,mI;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,qa;AAAA;AAAA;ACd1B;;AACI;;AACI;;AACJ;;AACJ;;AAEA;;AACI;;AACE;;AAqBF;;AACF;;;;AAtBwD;;AAAA;;;;;;;;;sEDM7CA,a,EAAa;cALzB,uDAKyB;eALf;AACT9X,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEb1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaiY,oB;AAEX,oCAAoBjR,MAApB,EACmB8I,aADnB,EACgD;AAAA;;AAD5B,aAAA9I,MAAA,GAAAA,MAAA;AACD,aAAA8I,aAAA,GAAAA,aAAA;AAGjB,aAAKA,aAAL,CAAmBC,UAAnB,GAAgC;AAC9BC,eAAK,EAAG,sBADsB;AAE9BC,cAAI,EAAG,YAFuB;AAG9BC,kBAAQ,EAAG;AAHmB,SAAhC;AAOD;;;;mCAEO,CACP;;;mDAEwB;AACzB,eAAKlJ,MAAL,CAAY5C,QAAZ,CAAqB,CAAC,iBAAD,CAArB;AACD;;;;;;;uBApBY6T,oB,EAAoB,uH,EAAA,yJ;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA;AAAA;ACVjC;;;;;;;;;sEDUaA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTnY,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEFjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQakY,oB;AAEX,oCACoBlR,MADpB,EACqC;AAAA;;AAAjB,aAAAA,MAAA,GAAAA,MAAA;AAAoB;;;;mCAEhC,CACP;;;;;;;uBANUkR,oB,EAAoB,uH;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA;AAAA;AChBjC;;;;;;;;;sEDgBaA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTpY,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;AEhBjC;AAAA;;;AAAA;AAAA;AAAA;;AAAO,QAAMmY,WAAW,GAAG;AACzBC,gBAAU,EAAE,KADa;AAEzB/D,qBAAe,EAAE,IAFQ;AAGzBgE,YAAM,EAAG,uBAHgB;AAIzB5D,cAAQ,EAAG;AAJc,KAApB;;;;;;;;;;;;;;;;ACAP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAY2D,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBE,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIzS,OAAO,CAACwG,KAAR,CAAciM,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-unidade-sala-cadastro',\n  templateUrl: './unidade-sala-cadastro.component.html',\n  styleUrls: ['./unidade-sala-cadastro.component.css']\n})\nexport class UnidadeSalaCadastroComponent implements OnInit {\n\n\nlistasala : Sala [];\n\nsala : Sala = new Sala();\n\n  constructor(\n              private servicoSala : ServiceAllService<Sala>,\n              private servico : UtilService,\n              public dialog : MatDialogRef<UnidadeSalaCadastroComponent>\n\n  ) { }\n\n  ngOnInit(): void {\n      this.buscaSala()\n    \n\n  }\n\n  addSala(){\n\n    this.sala.unidadeid = Number(this.dialog.id);\n    this.sala.empresaid = Number(this.servico.Sessao().IdEmpresa);\n    this.sala.dtCriacao = new Date;\n    this.sala.criadoPor = this.servico.Sessao().UsuarioId;\n\n    this.servicoSala.create(this.sala, Endpoint.Sala).subscribe(() => {\n      this.servico.showMessage(\"Sala Cadastrada com sucesso\", false);\n\n    })\n\n\n  }\n\n  fecharPopup(){\n      this.dialog.close()\n  }\n\n  buscaSala(){\n\n        this.servicoSala.read(Endpoint.Sala).subscribe(sl => {\n          this.listasala = sl\n        })\n\n  }\n\n}\n","<mat-card>\n    <mat-card-title>Nova Sala</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome Sala\" \n                [(ngModel)]=\"sala.nomeSala\" name=\"nomeSala\">\n            </mat-form-field>\n            \n            <mat-form-field>\n                <input matInput placeholder=\"ativo\">\n                    <input name=\"ativo\" [(ngModel)]=\"sala.ativo\" [checked]=\"sala.ativo\" type=\"checkbox\">\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"addSala()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n          Sair\n        </button>\n        \n</mat-card>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-unidade-sala-delete',\n  templateUrl: './unidade-sala-delete.component.html',\n  styleUrls: ['./unidade-sala-delete.component.css']\n})\nexport class UnidadeSalaDeleteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>unidade-sala-delete works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-unidade-sala-update',\n  templateUrl: './unidade-sala-update.component.html',\n  styleUrls: ['./unidade-sala-update.component.css']\n})\nexport class UnidadeSalaUpdateComponent implements OnInit {\n\n  sala : Sala\n  \n  constructor(\n              public dialog : MatDialogRef<UnidadeSalaUpdateComponent>, \n              private servico : UtilService, \n              private servicoSala : ServiceAllService<Sala>\n              ) { }\n\n  ngOnInit(): void {\n      this.buscarSala()\n  \n  }\n\n  \n  buscarSala(){\n        this.servicoSala.readById(this.dialog.id, Endpoint.Sala).subscribe(x => {\n            this.sala = x;\n        })\n  }\n\n  alterarSala(){\n    \n      this.servicoSala.update(this.sala, Endpoint.Sala).subscribe(x => {\n        this.servico.showMessage(\"Sala alterada com sucesso!\", false);\n      })\n\n\n  }\n  \n  fecharPopup(){\n    this.dialog.close()\n  }\n\n}\n","<mat-card>\n    <mat-card-title>Nova Sala</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome Sala\" \n                [(ngModel)]=\"sala.nomeSala\" name=\"nomeSala\">\n            </mat-form-field>\n            \n            <mat-form-field>\n                <input matInput placeholder=\"ativo\">\n                    <input name=\"ativo\" [(ngModel)]=\"sala.ativo\" [checked]=\"sala.ativo\" type=\"checkbox\">\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"alterarSala()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n          Sair\n        </button>\n        \n</mat-card>","import { Component, OnInit, Output,Input } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n\n@Component({\n  selector: 'app-agenda-alterar-unidade',\n  templateUrl: './agenda-alterar-unidade.component.html',\n  styleUrls: ['./agenda-alterar-unidade.component.css']\n})\nexport class AgendaAlterarUnidadeComponent implements OnInit {\n\n  unidade : Unidade\n\n  constructor(\n              public dialog : MatDialogRef<AgendaAlterarUnidadeComponent>,\n              private servicoUnidade : ServiceAllService<Unidade>,\n              private servico : UtilService,\n\n              ) { }\n\n\n\n\n  ngOnInit(): void {\n      this.buscarUnidade();\n  }\n\n  buscarUnidade(){\n    this.servicoUnidade.readById(this.dialog.id, Endpoint.Unidade).subscribe(un => {\n      this.unidade = un;\n    })\n  }\n\n\n  editarUnidade(){\n\n      this.servicoUnidade.update(this.unidade, Endpoint.Unidade).subscribe(() => {\n        this.servico.showMessage(\"Unidade alterada com sucesso!\", false)\n        this.fecharPopup();\n\n        \n      })\n  }\n\n  fecharPopup(){\n      this.dialog.close()\n      this.dialog.componentInstance\n  }\n\n\n}\n","<mat-card>\n    <mat-card-title>Alterar Unidade</mat-card-title>\n        <form>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Id\" \n                [(ngModel)]=\"unidade.id\" name=\"id\" disabled = \"true\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Nome Unidade\" \n                [(ngModel)]=\"unidade.nomeUnidade\" name=\"nomeUnidade\">\n            </mat-form-field>\n\n            \n            <mat-form-field>\n                <input matInput placeholder=\"bloqueado\">\n                    <input name=\"bloqueado\" [(ngModel)]=\"unidade.bloqueado\" [checked]=\"unidade.bloqueado\" type=\"checkbox\">\n            </mat-form-field>\n\n        </form>\n\n        <button *ngIf=\"unidade.nomeUnidade\" mat-raised-button (click)=\"editarUnidade()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n          Sair\n        </button>\n       \n</mat-card>","import { getLocaleDateTimeFormat } from '@angular/common';\nimport { stringify } from '@angular/compiler/src/util';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\nimport { Unidade } from '../../../../models/Unidade/unidadeModel';\n\n\nimport { GrupoUsuario } from '../../../../models/usuarios/GrupoUsuarios';\nimport { AgendaCreateComponent } from '../../agenda-create/agenda-create.component';\nimport { AgendaAlterarUnidadeComponent } from '../agenda-alterar-unidade/agenda-alterar-unidade.component';\nimport { AgendaExcluirUnidadeComponent } from '../agenda-excluir-unidade/agenda-excluir-unidade.component';\nimport { UnidadeSalaCadastroComponent } from '../Sala/unidade-sala-cadastro/unidade-sala-cadastro.component';\nimport { UnidadeSalaUpdateComponent } from '../Sala/unidade-sala-update/unidade-sala-update.component';\n\n@Component({\n  selector: 'app-agenda-cadastro-unidade',\n  templateUrl: './agenda-cadastro-unidade.component.html',\n  styleUrls: ['./agenda-cadastro-unidade.component.css']\n})\nexport class AgendaCadastroUnidadeComponent implements OnInit {\n\nColunas = ['id','dtCriacao', 'nomeUnidade','bloqueado','action']\nColunasSala = ['id','dtCriacao', 'nomeSala', 'ativo','action']\n\nunidade : Unidade = new Unidade\n\nnovaUnidade : boolean = false;\n\nunidades : Unidade[];\natualizarChamada: boolean = false; \n\nvlrsala : string = null;\n\nsalas : Sala[];\nunidadeSelecionada : number = 0;\n  constructor(\n             public dialog : MatDialogRef<AgendaCadastroUnidadeComponent>,\n             private servico : UtilService,\n             private ServicoUnidade : ServiceAllService<Unidade>,\n             private servicoSala : ServiceAllService<Sala>\n\n              ) { }\n\n  ngOnInit(): void {\n      this.buscarUnidade(\"\");\n      \n  }\n\n\n  cadUnidade(){\n    this.novaUnidade = true;\n  }\n\n  addUnidade(){\n    this.unidadeSelecionada = 0;\n\n    this.unidade.criadoPor = this.servico.Sessao().UsuarioId;\n    this.unidade.dtCriacao = new Date;\n    this.unidade.empresaid =  Number(this.servico.Sessao().IdEmpresa);\n    \n    this.ServicoUnidade.create(this.unidade, Endpoint.Unidade).subscribe(() => {\n     this.servico.showMessage(\"Unidade cadastrada com sucesso\", false);\n     this.servico.atualizaRota();\n     this.novaUnidade = false;\n   })\n\n  }\n\n  buscarUnidade(vlrTxt : string){\n    \n    this.ServicoUnidade.read(Endpoint.Unidade).subscribe(un => {\n      this.unidades = vlrTxt == null ? un.filter(x => x.empresaid.toString() == this.servico.Sessao().IdEmpresa) :\n                                         un.filter(x => x.empresaid.toString() == this.servico.Sessao().IdEmpresa && x.nomeUnidade.toLowerCase().includes(vlrTxt.toLowerCase()));\n    })\n    \n  }\n\n  AtualizarUnidade(id :string){\n\n    this.servico.Popup(id, AgendaAlterarUnidadeComponent, '500px', '400px');\n\n\n  }\n\n  ExcluirUnidade(id : string){\n    this.servico.Popup(id, AgendaExcluirUnidadeComponent, '500px', '400px');\n\n  }\n\n\n  fecharPopup(){\n      this.dialog.close();\n  }\n  voltar(){\n    this.novaUnidade = false;\n  }\n\n  selecionarUnidade(keyEvent : any){\n\n    if (keyEvent.which === 13 || keyEvent.which == 1){\n      let vlrTxt =  (<HTMLInputElement>document.getElementById('txtbusca')).value;\n      this.buscarUnidade(vlrTxt);\n    }\n    \n    \n  }\n\n\n  testePopup(){\n    this.servico.Popup(\"\",UnidadeSalaCadastroComponent, \"500px\", \"500px\");\n  }\n\n  UnidadeSelecionada(id){\n      this.unidadeSelecionada = id;\n  }\n\n  selecionaAba(tab){\n    \n\n\n  if (tab.index == 1)\n  {\n     this.buscarSala()\n    \n\n  }else{\n    this.unidadeSelecionada = 0\n  }\n   \n\n}\n\n\n  buscarSala(){\n    \n    this.servicoSala.read(Endpoint.Sala).subscribe(sl => {\n      this.salas = this.vlrsala == null ?   sl.filter(x => x.unidadeid == this.unidadeSelecionada) :\n                                            sl.filter(x => x.unidadeid == this.unidadeSelecionada && x.nomeSala.toLowerCase().includes(this.vlrsala.toLowerCase())) \n    })\n   \n\n  }\n  \n  selecionarSala(keyEvent : any){\n    \n    if (keyEvent.which == 13 || keyEvent.which == 1){\n      this.vlrsala =  (<HTMLInputElement>document.getElementById('txtbusca')).value;\n    }\n\n    this.buscarSala();\n\n  }\n  AtualizarSala(id : any){\n      this.servico.Popup(id, UnidadeSalaUpdateComponent, \"500PX\", \"400PX\");\n  }\n\n  Excluirsala(id : any){\n\n  }\n\n  cadsala(){\n    this.servico.Popup(this.unidadeSelecionada.toString(), UnidadeSalaCadastroComponent, \"500px\", \"400px\"); \n  }\n\n}\n","<mat-tab-group (selectedTabChange)=\"selecionaAba($event)\" >\n        \n    <mat-tab label=\"Cadastro de Unidade\" id=\"labelUnidade\">\n\n        <div class=\"container\">\n                    <mat-card *ngIf=\"novaUnidade\">\n                        <mat-card-title>Nova Unidade</mat-card-title>\n                            <form>\n                                <mat-form-field>\n                                    <input matInput placeholder=\"Nome Unidade\" \n                                    [(ngModel)]=\"unidade.nomeUnidade\" name=\"nomeUnidade\">\n                                </mat-form-field>\n                                \n                                <mat-form-field>\n                                    <input matInput placeholder=\"bloqueado\">\n                                        <input name=\"bloqueado\" [(ngModel)]=\"unidade.bloqueado\" [checked]=\"unidade.bloqueado\" type=\"checkbox\">\n                                </mat-form-field>\n                            </form>\n                    \n                            <button *ngIf=\"unidade.nomeUnidade\" mat-raised-button (click)=\"addUnidade()\" color=\"primary\" > \n                                Salvar\n                            </button>\n                            \n                            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                              Sair\n                            </button>\n                            <button mat-raised-button (click)=\"voltar()\" color=\"primary\" > \n                              Voltar\n                            </button>\n                    </mat-card>\n\n\n            <mat-card *ngIf=\"!novaUnidade\" >\n                \n              <mat-card-title class=\"titleCard\" >Unidades</mat-card-title>\n\n                <div class=\"mat-elevation-z3\">\n        \n                  <span class=\"botaoBusca\" (click)=\"selecionarUnidade($event)\">\n                    <i class=\"material-icons\">search</i>\n                  </span>\n            \n                  <input class=\"textBusca\"  name=\"busca\" id=\"txtbusca\" type=\"text\" (keypress)=\"selecionarUnidade($event)\"  value=\"\">\n\n                  <a (click)=\"cadUnidade()\" class=\"cadUnidade\" >\n                    <i class=\"material-icons\">add</i>\n                  </a>\n                  <a (click)=\"testePopup()\" class=\"cadUnidade\" >\n                    <i class=\"material-icons\">person</i>\n                  </a>\n\n                  <table class=\"tabelaUnidade\" mat-table [dataSource]=\"unidades\">\n                        <!-- Id Column -->\n                        <ng-container matColumnDef=\"id\">\n                          <th mat-header-cell *matHeaderCellDef>Id</th>\n                          <td mat-cell id=\"idunidade\" *matCellDef=\"let row\">{{row.id}}</td>\n                        </ng-container>\n                        <!-- Name Column -->\n                        <ng-container matColumnDef=\"dtCriacao\">\n                          <th mat-header-cell *matHeaderCellDef>Criado Em</th>\n                          <td mat-cell *matCellDef=\"let row\" >{{row.dtCriacao | date: 'dd/MM/yyyy'}}</td>\n                        </ng-container>\n                        <!-- Name Column -->\n                        <ng-container matColumnDef=\"nomeUnidade\">\n                          <th mat-header-cell *matHeaderCellDef>Nome Unidade</th>\n                          <td mat-cell *matCellDef=\"let row\">{{row.nomeUnidade}}</td>\n                        </ng-container>\n                        <!-- status -->\n                        <ng-container matColumnDef=\"bloqueado\">\n                          <th mat-header-cell *matHeaderCellDef>Status</th>\n                            <td mat-cell *matCellDef=\"let row\">\n                              <div *ngIf=\"row.bloqueado\" >\n                                <i class=\"material-icons\">\n                                  lock\n                                </i>\n                              </div>\n                              <div *ngIf=\"!row.bloqueado\" >\n                                <i class=\"material-icons\">  \n                                  lock_open\n                                </i>\n                              </div>\n                            </td>\n                          </ng-container>\n                        \n                        <!-- Coluna de Ações -->\n                        <ng-container matColumnDef=\"action\">\n                          <th mat-header-cell *matHeaderCellDef>Ações</th>\n                          <td mat-cell *matCellDef=\"let row\">\n                           \n                            <a  (click)=\"AtualizarUnidade(row.id)\" class=\"edit\">\n                              <i class=\"material-icons\">\n                                 edit\n                              </i>\n                              </a>\n                            <a (click)=\"ExcluirUnidade(row.id)\" class=\"delete\">\n                              <i class=\"material-icons\">\n                                delete\n                              </i>\n                            </a>\n                              \n                          </td>\n                        </ng-container>\n                    \n                        <tr mat-header-row *matHeaderRowDef=\"Colunas\"></tr>\n                        <tr mat-row *matRowDef=\"let row; columns: Colunas;\" (click)=\"UnidadeSelecionada(row.id)\"></tr>\n                  </table>\n                </div>\n            </mat-card>\n        </div>\n    </mat-tab>  \n    \n    \n    <mat-tab *ngIf=\"unidadeSelecionada > 0\" label=\"Cadastro de Sala\">\n     \n      <mat-card>\n                \n        <mat-card-title class=\"titleCard\" >Salas</mat-card-title>\n    \n          <div class=\"mat-elevation-z3\">\n    \n            <span class=\"botaoBusca\" (click)=\"selecionarSala($event)\">\n              <i class=\"material-icons\">search</i>\n            </span>\n      \n            <input class=\"textBusca\"  name=\"busca\" id=\"txtbusca\" type=\"text\" (keypress)=\"selecionarSala($event)\"  value=\"\">\n    \n            <a (click)=\"cadsala()\" class=\"cadsala\" >\n              <i class=\"material-icons\">add</i>\n            </a>\n    \n            <table class=\"tabela\" mat-table [dataSource]=\"salas\">\n                  <!-- Id Column -->\n                  <ng-container matColumnDef=\"id\">\n                    <th mat-header-cell *matHeaderCellDef>Id</th>\n                    <td mat-cell id=\"idsala\" *matCellDef=\"let row\">{{row.id}}</td>\n                  </ng-container>\n                  <!-- Name Column -->\n                  <ng-container matColumnDef=\"dtCriacao\">\n                    <th mat-header-cell *matHeaderCellDef>Criado Em</th>\n                    <td mat-cell *matCellDef=\"let row\" >{{row.dtCriacao | date: 'dd/MM/yyyy'}}</td>\n                  </ng-container>\n                  <!-- Name Column -->\n                  <ng-container matColumnDef=\"nomeSala\">\n                    <th mat-header-cell *matHeaderCellDef>Nome Sala</th>\n                    <td mat-cell *matCellDef=\"let row\">{{row.nomeSala}}</td>\n                  </ng-container>\n    \n    \n                  <!-- status -->\n                  <ng-container matColumnDef=\"ativo\">\n                    <th mat-header-cell *matHeaderCellDef>Status</th>\n                      <td mat-cell *matCellDef=\"let row\">\n                        <div *ngIf=\"row.ativo\" >\n                          <i class=\"material-icons\">\n                            lock\n                          </i>\n                        </div>\n                        <div *ngIf=\"!row.ativo\" >\n                          <i class=\"material-icons\">  \n                            lock_open\n                          </i>\n                        </div>\n                      </td>\n                    </ng-container>\n                  \n                  <!-- Coluna de Ações -->\n                  <ng-container matColumnDef=\"action\">\n                    <th mat-header-cell *matHeaderCellDef>Ações</th>\n                    <td mat-cell *matCellDef=\"let row\">\n                     \n                      <a  (click)=\"AtualizarSala(row.id)\" class=\"edit\">\n                        <i class=\"material-icons\">\n                           edit\n                        </i>\n                        </a>\n                      <a (click)=\"Excluirsala(row.id)\" class=\"delete\">\n                        <i class=\"material-icons\">\n                          delete\n                        </i>\n                      </a>\n                        \n                    </td>\n                  </ng-container>\n              \n                  <tr mat-header-row *matHeaderRowDef=\"ColunasSala\"></tr>\n                  <tr mat-row *matRowDef=\"let row; columns: ColunasSala;\"></tr>\n            </table>\n          </div>\n      </mat-card>\n\n\n\n\n    </mat-tab>\n    \n</mat-tab-group>","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { endWith } from 'rxjs/operators';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-agenda-excluir-unidade',\n  templateUrl: './agenda-excluir-unidade.component.html',\n  styleUrls: ['./agenda-excluir-unidade.component.css']\n})\nexport class AgendaExcluirUnidadeComponent implements OnInit {\n\n\n  unidade : Unidade\n\n  constructor(\n              public dialog : MatDialogRef<AgendaExcluirUnidadeComponent>,\n              private servicoUnidade : ServiceAllService<Unidade>, \n              private servico : UtilService\n              ) { }\n\n  ngOnInit(): void {\n    this.buscarUnidade();\n  }\n\n  buscarUnidade(){\n      this.servicoUnidade.readById(this.dialog.id, Endpoint.Unidade).subscribe(un => {\n        this.unidade = un;\n      })\n  }\n\n  ExcluirUnidade(){\n      this.servicoUnidade.delete(Number(this.dialog.id), Endpoint.Unidade).subscribe(() => {\n        this.servico.showMessage(\"Unidade Excluída com sucesso!\", false);\n        this.fecharPopup();\n      })\n  }\n\n\n  fecharPopup(){\n    this.dialog.close();\n  }\n\n}\n","<mat-card>\n    <mat-card-title>Alterar Unidade</mat-card-title>\n        <form>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Id\" \n                [(ngModel)]=\"unidade.id\" name=\"id\" disabled = \"true\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Nome Unidade\" \n                [(ngModel)]=\"unidade.nomeUnidade\" name=\"nomeUnidade\" disabled = \"true\">\n            </mat-form-field>\n\n        </form>\n\n        <button *ngIf=\"unidade.nomeUnidade\" mat-raised-button (click)=\"ExcluirUnidade()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n          Sair\n        </button>\n       \n</mat-card>","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { Aplicacao } from './../../../Negocio/Aplicacao';\nimport { Router } from '@angular/router';\n\nimport { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { UtilService } from 'src/app/services/util.service';\nimport { TipoUsuario, TipoUsuarioSistema } from 'src/app/models/usuarios/enumUsuarios';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { GrupoAgenda } from 'src/app/models/Agenda/modelGrupoAgenda';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { UsuarioCreateComponent } from 'src/app/components/usuario/usuario-create/usuario-create.component';\n\n@Component({\n  selector: 'app-agenda-create',\n  templateUrl: './agenda-create.component.html',\n  styleUrls: ['./agenda-create.component.css']\n})\nexport class AgendaCreateComponent implements OnInit {\n  \n  agenda : Agenda = {\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    profissionalid: null,\n    Empresaid: null,\n    unidadeid: null,\n    salaid: null,\n    substituicao: false,\n    grupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n  \n  comboProfissional  : Usuario[];\n  comboUnidade : Unidade[];\n  comboSala : Sala[];\n  comboTipoGrupoAgenda : GrupoAgenda[];\n  empresa : Empresa[];\n\n  constructor(private route : Router,\n              public dialogRef: MatDialogRef <AgendaCreateComponent>, \n              public overlay : Overlay,\n              public dialog: MatDialog,         \n              private _serviceAgenda : ServiceAllService<Agenda>,\n              private _serviceUnidade : ServiceAllService<Unidade>,\n              private _serviceSala : ServiceAllService<Sala>,\n              private _serviceGrupoAgenda : ServiceAllService<GrupoAgenda>,\n              private _serviceUsuario : ServiceAllService<Usuario>,\n              private _utilService : UtilService\n    ) { }\n\n\n  ngOnInit(): void {\n     this.carregaCombos()\n  }\n  \n  createAgenda(){\n     this.agenda.Empresaid = Number(this._utilService.Sessao().IdEmpresa)\n \n      this._serviceAgenda.create(this.agenda, Endpoint.Agenda).subscribe(ag => {\n      this._utilService.showMessage(\"Agenda cadastrada com sucesso!\",false);\n      this.route.navigate(['home-component'])\n      });\n        this.route.navigate(['home-component'])\n  }\n\n  cancel(){\n    this.route.navigate(['home-component'])  \n  }\n\n  carregaCombos(){\n\n    this.carregaComboProfissional(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa)\n      this.carregaComboUnidade(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa);\n      this.carregaComboSala(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa);\n      this.carregaComboGrupoAgenda(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa);\n  }\n\n  carregaComboProfissional(grpId: number , empId: string){\n    this._serviceUsuario.read(Endpoint.Usuario).subscribe(pro => {\n      pro = this.comboProfissional = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador ? this.comboProfissional = pro.filter(x => x.empresaid.toString() == empId) : null;\n    });\n  }\n  \n  carregaComboUnidade(grpId: number , empId: string){\n    this._serviceUnidade.read(Endpoint.Unidade).subscribe(un => {\n      un = this.comboUnidade = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador ? this.comboUnidade = un.filter(x => x.empresaid.toString() == empId) : null;\n    });\n  }\n\n  carregaComboSala(grpId: number , empId: string){\n    this._serviceSala.read(Endpoint.Sala).subscribe(sl => {\n      sl = this.comboSala = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador? this.comboSala = sl.filter(x => x.empresaid .toString() == empId) : null;                      \n    });\n  }\n\n  carregaComboGrupoAgenda(grpId: number , empId: string){\n    this._serviceGrupoAgenda.read(Endpoint.GrupoAgenda).subscribe(ga => {\n      ga = this.comboTipoGrupoAgenda = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador ? this.comboTipoGrupoAgenda = ga.filter(x => x.empresaid .toString() == empId) : null;\n    });\n  }\n\n  fecharPopup(): void {\n    this.dialogRef.close();\n  }\n\n  novoUsuario(){\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioCreateComponent, {\n          width : '700px',\n          height : '820px',\n          scrollStrategy\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Solicitar ao um Usuário Master para criar Nova Agenda!\",true);\n    }\n  }\n\n  \n}\n","        <div class=\"container\">\r\n\r\n            <mat-card>\r\n                <mat-card-title>Nova Agenda</mat-card-title>\r\n                    <form>\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Nome Agenda\" \r\n                             [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Profissional\"><i class=\"material-icons ordem\" (click)=\"novoUsuario()\" >person_add</i>\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.profissionalid\" placeholder=\"Profissional\">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor=\"let tipoProf of comboProfissional \" [value]=\"tipoProf.id\">\r\n                                        {{tipoProf.nome}}\r\n                                    </mat-option>\r\n                                </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Unidade Atendimento\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.unidadeid\" placeholder=\"Unidade Atendimento\" >\r\n                                <mat-option *ngFor=\"let tipounidade of comboUnidade \" [value]=\"tipounidade.id\">\r\n                                    {{tipounidade.nomeUnidade}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Sala Atendimento\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.salaid\" placeholder=\"Sala Atendimento\" >\r\n                                <mat-option *ngFor=\"let tipoSala of comboSala \" [value]=\"tipoSala.id\">\r\n                                    {{tipoSala.nomeSala}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Substituição\">\r\n                                <input name=\"substituicao\" [(ngModel)]=\"agenda.substituicao\" [checked]=\"agenda.substituicao\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Grupo Agenda\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.grupoAgendaid\" placeholder=\"Grupo Agenda\" >\r\n                                <mat-option *ngFor=\"let tipoGrupo of comboTipoGrupoAgenda \" [value]=\"tipoGrupo.id\">\r\n                                    {{tipoGrupo.nomeGrupoAgenda}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Vigência Início\"\r\n                             [(ngModel)]=\"agenda.vigenciaInicio\" name=\"vigenciaInicio\" type=\"datetime-local\" teste >\r\n                        </mat-form-field>\r\n\r\n            \r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Vigência Fim\" \r\n                             [(ngModel)]=\"agenda.vigenciaFim\" name=\"vigenciaFim\" type=\"datetime-local\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Considera Feriado\">\r\n                                <input name=\"considerarFeriado\" [(ngModel)]=\"agenda.considerarFeriado\" [checked]=\"agenda.considerarFeriado\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"bloqueado\">\r\n                                <input name=\"bloqueado\" [(ngModel)]=\"agenda.bloqueado\" [checked]=\"agenda.bloqueado\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n\r\n                    </form>\r\n            \r\n                    <button *ngIf=\"agenda.nomeAgenda && agenda.vigenciaInicio && agenda.vigenciaFim\"  mat-raised-button (click)=\"createAgenda()\" color=\"primary\" > \r\n                        Salvar\r\n                    </button>\r\n                    \r\n                    <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \r\n                        Cancelar\r\n                    </button>\r\n            </mat-card>\r\n\r\n        </div>","import { Route } from '@angular/compiler/src/core';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-agenda-delete',\n  templateUrl: './agenda-delete.component.html',\n  styleUrls: ['./agenda-delete.component.css']\n})\nexport class AgendaDeleteComponent implements OnInit {\n\n  agenda : Agenda = {  \n    id: null,\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    profissionalid: null,\n    Empresaid: null,\n    unidadeid: null,\n    salaid: null,\n    substituicao: false,\n    grupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n\n  constructor(\n              public dialgRef : MatDialogRef<AgendaDeleteComponent>,\n              private serviceAgenda : ServiceAllService<Agenda>,\n              private utilService : UtilService,\n              private route : Router\n\n             ) { }\n\n  ngOnInit(): void {\n    this.buscarAgendaByid();\n    \n  }\n\n  ExcluirAgenda(): void{\n      this.serviceAgenda.delete(Number(this.dialgRef.id), Endpoint.Agenda).subscribe(x => {\n          this.utilService.showMessage(\"Agenda Excluida com sucesso\", false);\n          this.route.navigate(['home-component'])\n          this.fecharPopup();\n\n      });\n  }\n\n  fecharPopup():void{\n      this.dialgRef.close();\n  }\n  buscarAgendaByid() : void {\n     this.serviceAgenda.readById(this.dialgRef.id, Endpoint.Agenda).subscribe(ag => {\n       this.agenda = ag;\n     });\n  }\n\n\n}\n \n  \n\n","<div class=\"container\">\n\n    <mat-card>\n        <mat-card-title>Excluir Agenda</mat-card-title>\n            <form>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Id Agenda\" \n                     [(ngModel)]=\"agenda.id\" name=\"idAgenda\" disabled=\"true\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Nome Agenda\" \n                    [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\" disabled=\"true\"> \n                </mat-form-field>\n               \n            </form>\n    \n            <button mat-raised-button (click)=\"ExcluirAgenda()\"  color=\"primary\" > \n                Excluir\n            </button>\n            \n            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                Cancelar\n            </button>\n    </mat-card>\n\n</div>","import { Router } from '@angular/router';\r\nimport { Componentes } from './../../../Negocio/Componentes';\r\nimport { Aplicacao } from './../../../Negocio/Aplicacao';\r\nimport { UtilService } from './../../../services/util.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\r\nimport { ServiceAllService } from 'src/app/services/service-all.service';\r\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\r\nimport { AgendaDto } from 'src/app/models/Agenda/modelRetornoAgenda';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AgendaCreateComponent } from '../agenda-create/agenda-create.component';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { AgendaUpdateComponent } from '../agenda-update/agenda-update.component';\r\nimport { AgendaDeleteComponent } from '../agenda-delete/agenda-delete.component';\r\nimport { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\r\nimport { UsuarioCreateComponent } from 'src/app/components/usuario/usuario-create/usuario-create.component';\r\nimport { AgendaCadastroUnidadeComponent } from '../Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-agenda-read',\r\n  templateUrl: './agenda-read.component.html',\r\n  styleUrls: ['./agenda-read.component.css']\r\n})\r\nexport class AgendaReadComponent implements OnInit {\r\n\r\n  Colunas = ['id','DtCriacao', 'NomeAgenda','Funcionario','NomeEmpresa','NomeUnidade','NomeSala',\r\n                      'substituicao','GrupoAgenda','vigenciaInicio','vigenciaFim','considerarFeriado','bloqueado','action']  \r\n  agenda : AgendaDto[];\r\n\r\n  constructor(\r\n              public dialog: MatDialog,\r\n              public overlay : Overlay,\r\n              private servico : UtilService,\r\n              private _repAgenda : ServiceAllService<AgendaDto>,\r\n\r\n             ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.servico.AtualizarMenu(Aplicacao.Agenda,'app_registration','');\r\n    this.buscarAgenda();\r\n  }\r\n\r\n \r\n  buscarAgenda(){\r\n    \r\n    let filtroAgenda = (<HTMLSelectElement>document.getElementById('busca')).value;\r\n\r\n    this._repAgenda.read(Endpoint.Agenda).subscribe(ag => {\r\n      this.agenda = filtroAgenda == null ? ag.filter(x => x.empresaId.toString() == this.servico.Sessao().IdEmpresa) \r\n                    :  ag.filter(x => x.nomeAgenda.toLowerCase().includes(filtroAgenda.toLowerCase()) && x.empresaId.toString() == this.servico.Sessao().IdEmpresa)\r\n    });\r\n  }\r\n\r\n  addNovaAgenda(): void {\r\n   \r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n      this.servico.Popup(\"0\",AgendaCreateComponent, '700px','900px' );\r\n    }else{\r\n      this.servico.showMessage(\"Solicitar ao um Usuário Master para criar Nova Agenda!\",true);\r\n    }\r\n  }\r\n\r\n  AtualizarAgenda(id : string): void {\r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n      this.servico.Popup(id, AgendaUpdateComponent, '30%','80%' )\r\n     \r\n      }else{\r\n        this.servico.showMessage(\"Solicitar ao um Usuário Master para Editar os  dados da Agenda!\",true);\r\n      }   \r\n  }\r\n\r\n  ExcluirAgenda(id : string): void {\r\n      \r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n      {\r\n        this.servico.Popup(id, AgendaDeleteComponent,'30%','25%');\r\n      }\r\n      else\r\n      {\r\n        this.servico.showMessage(\"Solicitar ao um Usuário Master para Excluir a Agenda!\",true);\r\n      }\r\n  }\r\n\r\n\r\n  addUnidade(){\r\n    \r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n      this.servico.Popup(\"0\", AgendaCadastroUnidadeComponent, \"800px\", \"600px\", )\r\n    else\r\n      this.servico.showMessage(\"Solicitar ao um Usuário Master cadastrar a Unidade\",true);\r\n  }\r\n\r\n\r\n}\r\n","<mat-dialog-content>\n    <div class=\"mat-elevation-z3\">\n\n        \n        <button mat-button [matMenuTriggerFor]=\"menu\">Rotina Diária</button>\n          <mat-menu #menu=\"matMenu\">\n            <a mat-menu-item>Agendamento</a>\n            <a mat-menu-item>Consulta de Agenda</a>\n            <a mat-menu-item>Consulta Agendamentos</a>\n          \n          </mat-menu>\n\n          <button mat-button [matMenuTriggerFor]=\"menucadastro\">Cadastro</button>\n            <mat-menu #menucadastro=\"matMenu\">\n              <a (click)=\"addNovaAgenda()\" mat-menu-item>Agenda</a>\n              <a (click)=\"addUnidade()\" mat-menu-item>Unidade</a>              \n            </mat-menu>\n\n\n\n            <span class=\"botaoBusca\" (click)=\"buscarAgenda()\" (keypress)=\"buscarAgenda()\">\n              <i class=\"material-icons\">search</i>\n            </span>\n\n            <input class=\"textBusca\"  name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n\n          <table class=\"tabelaagenda\" mat-table [dataSource]=\"agenda\">\n            <!-- Id Column -->\n            \n            <ng-container matColumnDef=\"id\">\n              <th mat-header-cell *matHeaderCellDef>Id</th>\n              <td mat-cell id=\"idAgenda\" *matCellDef=\"let row\">{{row.id}}</td>\n            </ng-container>\n        \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"DtCriacao\">\n              <th mat-header-cell *matHeaderCellDef>Criado Em</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.dtCriacao | date: 'dd/MM/yyyy hh:mm:ss'}}</td>\n            </ng-container>\n            \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"NomeAgenda\">\n              <th mat-header-cell *matHeaderCellDef>Nome Agenda</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeAgenda}}</td>\n            </ng-container>\n      \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"Funcionario\">\n              <th mat-header-cell *matHeaderCellDef>Funcionário</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n            </ng-container>\n      \n            <!-- Name Price -->\n            <ng-container matColumnDef=\"NomeEmpresa\">\n              <th mat-header-cell *matHeaderCellDef>Empresa</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeFantasia}}</td>\n            </ng-container>\n      \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"NomeUnidade\">\n              <th mat-header-cell *matHeaderCellDef>Unidade</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeUnidade}}</td>\n            </ng-container>\n      \n            <ng-container matColumnDef=\"NomeSala\">\n                <th mat-header-cell *matHeaderCellDef>Sala</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.nomeSala}}</td>\n              </ng-container>\n    \n              <ng-container matColumnDef=\"GrupoAgenda\">\n                <th mat-header-cell *matHeaderCellDef>Grupo Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.nomeGrupoAgenda}}</td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"substituicao\">\n                <th mat-header-cell *matHeaderCellDef>Pode Substituir?</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.substituicao}}</td>\n              </ng-container>\n\n              \n              <ng-container matColumnDef=\"vigenciaInicio\">\n                <th mat-header-cell *matHeaderCellDef>Inicio Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.vigenciaInicio | date: 'dd/MM/yyyy hh:mm:ss'}} </td>\n              </ng-container>\n\n\n              <ng-container matColumnDef=\"vigenciaFim\">\n                <th mat-header-cell *matHeaderCellDef>Fim Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.vigenciaFim | date: 'dd/MM/yyyy hh:mm:ss'}}</td>\n              </ng-container>\n\n              \n              <ng-container matColumnDef=\"considerarFeriado\">\n                <th mat-header-cell *matHeaderCellDef>Cons. Feriado</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.considerarFeriado}}</td>\n              </ng-container>\n\n            <!-- status -->\n            <ng-container matColumnDef=\"bloqueado\">\n              <th mat-header-cell *matHeaderCellDef>Ativa</th>\n                <td mat-cell *matCellDef=\"let row\">\n                  <div *ngIf=\"row.bloqueado == 'Sim'\" >\n                    <i class=\"material-icons\">\n                      lock\n                    </i>\n                  </div>\n                  <div *ngIf=\"row.bloqueado == 'Não'\" >\n                    <i class=\"material-icons\">  \n                      lock_open\n                    </i>\n                  </div>\n                </td>\n              </ng-container>\n      \n            \n            <!-- Coluna de Ações -->\n            <ng-container matColumnDef=\"action\">\n              <th mat-header-cell *matHeaderCellDef>Ações</th>\n              <td mat-cell *matCellDef=\"let row\">\n                  \n                  <a  (click)=\"AtualizarAgenda(row.id)\" class=\"edit\">\n                      <i class=\"material-icons\">\n                          edit\n                      </i>\n                  </a>\n                  <a (click)=\"ExcluirAgenda(row.id)\" class=\"delete\">\n                      <i class=\"material-icons\">\n                          delete\n                      </i>\n                  </a>\n                  \n              </td>\n            </ng-container>\n                \n        \n            <tr mat-header-row *matHeaderRowDef=\"Colunas\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: Colunas;\"></tr>\n          </table>\n\n      </div>\n\n      <div class=\"row\">\n        <router-outlet></router-outlet>\n      </div>\n</mat-dialog-content>\n  ","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { endWith, filter } from 'rxjs/operators';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { GrupoAgenda } from 'src/app/models/Agenda/modelGrupoAgenda';\nimport { Empresa } from 'src/app/models/empresa/ModelEmpresa';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-agenda-update',\n  templateUrl: './agenda-update.component.html',\n  styleUrls: ['./agenda-update.component.css']\n})\nexport class AgendaUpdateComponent implements OnInit {\n\n  constructor(\n            private router: Router,\n            private utilService : UtilService,\n            private agendaService : ServiceAllService<Agenda>,\n            private serviceUnidade : ServiceAllService<Unidade>,\n            private serviceSala : ServiceAllService<Sala>,\n            private serviceGrupoAGenda : ServiceAllService<GrupoAgenda>,\n            private serviceEmpresa : ServiceAllService<Empresa>,\n            private serviceUsuario : ServiceAllService<Usuario>,\n            public dialogRef: MatDialogRef <AgendaUpdateComponent>,\n\n\n            ) { }\n\n  comboProfissional  : Usuario[];\n  comboUnidade : Unidade[];\n  comboSala : Sala[];\n  comboTipoGrupoAgenda : GrupoAgenda[];\n\n\n  agenda : Agenda = {  \n    id: null,\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    profissionalid: null,\n    Empresaid: null,\n    unidadeid: null,\n    salaid: null,\n    substituicao: false,\n    grupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n\n  \n  \n  ngOnInit(): void {\n \n    this.buscarAgendaPorId();\n    \n  \n  }\n\n      buscarAgendaPorId(){\n             \n        this.agendaService.readById(this.dialogRef.id, Endpoint.Agenda).subscribe(agId => {\n              this.agenda = agId\n              this.carregaCombos();\n            });\n      }\n\n      carregaCombos(){\n        \n        this.serviceUsuario.read(Endpoint.Usuario).subscribe(pr => {\n          this.comboProfissional = pr.filter(x => x.empresaid == this.utilService.Sessao().IdEmpresa )\n        });\n\n        \n        this.serviceUnidade.read(Endpoint.Unidade).subscribe(un => {\n          this.comboUnidade = un.filter(x => x.empresaid == Number(this.utilService.Sessao().IdEmpresa));\n        });\n\n        this.serviceSala.read(Endpoint.Sala).subscribe(sl =>{\n          this.comboSala = sl.filter(x => x.empresaid == Number(this.utilService.Sessao().IdEmpresa));\n        });\n        \n        this.serviceGrupoAGenda.read(Endpoint.GrupoAgenda).subscribe(ga => {\n          this.comboTipoGrupoAgenda = ga.filter(x => x.empresaid == Number(this.utilService.Sessao().IdEmpresa));\n        });\n       \n      } \n\n      UpdateAgenda(){\n        this.agenda.id = this.dialogRef.id\n        this.agendaService.update(this.agenda, Endpoint.Agenda).subscribe(() => {\n          this.utilService.showMessage(\"Agenda Atualizada com Sucesso!\", false)\n          this.router.navigate(['home-component'])\n          this.fecharPopup();\n      \n        });\n\n      }\n\n      fecharPopup(): void {\n        this.dialogRef.close();\n      }\n\n}\n","<div class=\"container\">\n\n    <mat-card>\n        <mat-card-title>Atualizar Agenda</mat-card-title>\n            <form>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Nome Agenda\" \n                     [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\">\n                </mat-form-field>\n\n                \n                <mat-form-field>\n                        <input matInput placeholder=\"Profissional\" >\n                        <p></p>\n                    <mat-select \n                           [(value)]=\"agenda.profissionalid\" placeholder=\"Unidade Atendimento\">\n                         <mat-option *ngFor=\"let ret of comboProfissional \" [value]=\"ret.id\">\n                               {{ret.nome}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Unidade Atendimento\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.unidadeid\" placeholder=\"Unidade Atendimento\" >\n                        <mat-option *ngFor=\"let tipounidade of comboUnidade \" [value]=\"tipounidade.id\">\n                            {{tipounidade.nomeUnidade}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Sala Atendimento\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.salaid\" placeholder=\"Sala Atendimento\" >\n                        <mat-option *ngFor=\"let tipoSala of comboSala \" [value]=\"tipoSala.id\">\n                            {{tipoSala.nomeSala}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Substituição\">\n                        <input name=\"substituicao\" [(ngModel)]=\"agenda.substituicao\" [checked]=\"agenda.substituicao\" type=\"checkbox\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Grupo Agenda\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.grupoAgendaid\" placeholder=\"Grupo Agenda\" >\n                        <mat-option *ngFor=\"let tipoGrupo of comboTipoGrupoAgenda \" [value]=\"tipoGrupo.id\">\n                            {{tipoGrupo.nomeGrupoAgenda}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Vigência Início\"\n                     [(ngModel)]= \"agenda.vigenciaInicio\" name=\"vigenciaInicio\" type=\"datetime-local\" teste >\n                </mat-form-field>\n\n    \n                <mat-form-field>\n                    <input matInput placeholder=\"Vigência Fim\" \n                     [(ngModel)]=\"agenda.vigenciaFim\" name=\"vigenciaFim\" type=\"datetime-local\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Considera Feriado\">\n                        <input name=\"considerarFeriado\" [(ngModel)]=\"agenda.considerarFeriado\" [checked]=\"agenda.considerarFeriado\" type=\"checkbox\">\n                </mat-form-field>\n\n\n                <mat-form-field>\n                    <input matInput placeholder=\"bloqueado\">\n                        <input name=\"bloqueado\" [(ngModel)]=\"agenda.bloqueado\" [checked]=\"agenda.bloqueado\" type=\"checkbox\">\n                </mat-form-field>\n\n\n            </form>\n    \n            <button *ngIf=\"agenda.nomeAgenda && agenda.vigenciaInicio && agenda.vigenciaFim\"  mat-raised-button (click)=\"UpdateAgenda()\"  color=\"primary\" > \n                Salvar\n            </button>\n            \n            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                Cancelar\n            </button>\n    </mat-card>\n\n</div>","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home-agenda',\n  templateUrl: './home-agenda.component.html',\n  styleUrls: ['./home-agenda.component.css']\n})\nexport class HomeAgendaComponent implements OnInit {\n\n  constructor(private route : Router) { }\n\n  ngOnInit(): void {\n    this.route.navigate(['Agenda'])\n  }\n}\n","<app-agenda-read></app-agenda-read>","export enum Aplicacao{\r\n  Agenda = 'Agenda',\r\n  Cartões = 'Cartões',\r\n  Vendas = 'Vendas',\r\n  Octoplex = 'Octoplex',\r\n  \r\n}\r\n\r\nexport const TipoAplicacao = new Map<string, string>([\r\n  ['Agenda', 'Agenda'],\r\n  ['Cartões', 'Cartões'],\r\n  ['FrenteCaixa', 'FrenteCaixa'],\r\n  ['Octoplex', 'Octoplex']\r\n  \r\n])","export enum Endpoint {\r\n    Empresa = '/Empresa',\r\n    GrupoUsuario = '/GrupoUsuario',\r\n    Produto = '/Produto',\r\n    Usuario = '/Usuario',\r\n    Agenda = '/Agenda',\r\n    Unidade = '/Unidade',\r\n    Sala = '/Sala',\r\n    GrupoAgenda = '/GrupoAgenda',\r\n    Token = '/Token'\r\n\r\n}","import { HomeAgendaComponent } from './Aplicacoes/agenda/home-agenda/home-agenda.component';\nimport { AgendaReadComponent } from './Aplicacoes/agenda/agenda-read/agenda-read.component';\nimport { AgendaDeleteComponent } from './Aplicacoes/agenda/agenda-delete/agenda-delete.component';\nimport { AgendaUpdateComponent } from './Aplicacoes/agenda/agenda-update/agenda-update.component';\nimport { AgendaCreateComponent } from './Aplicacoes/agenda/agenda-create/agenda-create.component';\n\nimport { Aplicacao } from './Negocio/Aplicacao';\nimport { EmpresaDeleteComponent } from './components/empresa/empresa-delete/empresa-delete.component';\nimport { EmpresaUpdateComponent } from './components/empresa/empresa-update/empresa-update.component';\nimport { EmpresaCreateComponent } from './components/empresa/empresa-create/empresa-create.component';\nimport { EmpresaComponent } from './views/empresa/empresa.component';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from \"./views/home/home.component\";\nimport { ProductCrudComponent } from \"./views/product-crud/product-crud.component\";\nimport { UsuarioCrudComponent } from './views/usuario-crud/usuario-crud.component';\n\nimport { ProductCreateComponent } from './components/product/product-create/product-create.component';\nimport { ProductUpdateComponent } from './components/product/product-update/product-update.component';\nimport { ProductDeleteComponent } from './components/product/product-delete/product-delete.component';\n\nimport { UsuarioCreateComponent } from './components/usuario/usuario-create/usuario-create.component';\nimport { UsuarioUpdateComponent } from './components/usuario/usuario-update/usuario-update.component';\nimport { UsuarioDeleteComponent } from './components/usuario/usuario-delete/usuario-delete.component';\n\nimport { ChamadoCrudComponent } from './views/chamado-crud/chamado-crud.component';\nimport { ChamadoCreateComponent } from './components/chamados/chamado-create/chamado-create.component';\nimport { ChamadoUpdateComponent } from './components/chamados/chamado-update/chamado-update.component';\nimport { ChamadoDeleteComponent } from './components/chamados/chamado-delete/chamado-delete.component';\n\n\n//Rotas de componentes Negócio\n\nconst routes: Routes = [\n  {path : \"\", component:HomeComponent },\n  {path: \"login\", component: LoginComponent },\n  //Rotas de Produtos\n  {path: \"products\", component: ProductCrudComponent },\n\n  //Rotas de usuarios\n  {path: 'usuarios', component : UsuarioCrudComponent },\n\n  //Rotas de chamados\n  {path: \"chamados\", component : ChamadoCrudComponent },\n\n  //Rotas de empresa\n  {path: \"empresa\", component : EmpresaComponent },\n\n  //Rotas das APlicações\n  //Agenda\n  {path: Aplicacao.Agenda , component : HomeAgendaComponent}\n      \n]\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","//import { LoginService } from '../app/'\nimport { Component } from '@angular/core';\nimport { LoginService } from './services/login.service';\n\n\n\n@Component({\n  selector: 'app-root',\ntemplateUrl: 'app.conponent.html'\n})\nexport class AppComponent {\n  nome = 'Palm';\n\nmostrarMenu : boolean = false; \nmostrarlogin : boolean = true; \n\nconstructor(private authService : LoginService){\n\n}\n\nngOnInit(){\n    this.authService.mostrarMenuEmitter.subscribe(\n        mostrar => this.mostrarMenu = mostrar\n    );\n\n    this.authService.mostrarLoginEmitter.subscribe(\n        mostrarLogin => this.mostrarlogin = mostrarLogin\n    );\n}\n\n}\n\n\n\n","<app-login *ngIf=\"mostrarlogin\"></app-login>\r\n<app-header *ngIf=\"mostrarMenu\"></app-header>\r\n<app-nav *ngIf=\"mostrarMenu\"></app-nav>\r\n<app-footer *ngIf=\"mostrarMenu\"></app-footer>\r\n\r\n\r\n","import { LoginService } from './services/login.service';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, LOCALE_ID } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './components/template/header/header.component';\nimport { FooterComponent } from './components/template/footer/footer.component';\nimport { NavComponent } from './components/template/nav/nav.component';\n\nimport { HomeComponent } from './views/home/home.component';\nimport { ProductCrudComponent } from './views/product-crud/product-crud.component';\nimport { UsuarioCrudComponent } from './views/usuario-crud/usuario-crud.component';\n\nimport { ProductCreateComponent } from './components/product/product-create/product-create.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport localePt from '@angular/common/locales/pt';\nimport { registerLocaleData } from  '@angular/common';\nimport { LoginComponent } from './components/login/login.component';\n\n\n\n\nregisterLocaleData(localePt);\n\n//Modulos Material\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n import {MatDialogModule} from '@angular/material/dialog';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDividerModule} from '@angular/material/divider';\n\nimport { ProductReadComponent } from './components/product/product-read/product-read.component';\nimport { ProductReadTableprodutosComponent } from './components/product/product-read-tableprodutos/product-read-tableprodutos.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ProductUpdateComponent } from './components/product/product-update/product-update.component';\nimport { ProductDeleteComponent } from './components/product/product-delete/product-delete.component';\nimport { RedDirective } from './diretivas/red.directive';\nimport { UsuarioComponent } from './components/usuario/usuario.component';\nimport { UsuarioReadComponent } from './components/usuario/usuario-read/usuario-read.component';\nimport { UsuarioCreateComponent } from './components/usuario/usuario-create/usuario-create.component';\nimport { UsuarioDeleteComponent } from './components/usuario/usuario-delete/usuario-delete.component';\nimport { UsuarioUpdateComponent } from './components/usuario/usuario-update/usuario-update.component';\nimport { ChamadoCrudComponent } from './views/chamado-crud/chamado-crud.component';\nimport { ChamadoCreateComponent } from './components/chamados/chamado-create/chamado-create.component';\nimport { ChamadoUpdateComponent } from './components/chamados/chamado-update/chamado-update.component';\nimport { ChamadoDeleteComponent } from './components/chamados/chamado-delete/chamado-delete.component';\nimport { ChamadoReadComponent } from './components/chamados/chamado-read/chamado-read.component';\nimport { EmpresaComponent } from './views/empresa/empresa.component';\nimport { EmpresaCreateComponent } from './components/empresa/empresa-create/empresa-create.component';\nimport { EmpresaUpdateComponent } from './components/empresa/empresa-update/empresa-update.component';\nimport { EmpresaDeleteComponent } from './components/empresa/empresa-delete/empresa-delete.component';\nimport { EmpresaReadComponent } from './components/empresa/empresa-read/empresa-read.component';\nimport { AgendaUpdateComponent } from './Aplicacoes/agenda/agenda-update/agenda-update.component';\nimport { AgendaDeleteComponent } from './Aplicacoes/agenda/agenda-delete/agenda-delete.component';\nimport { AgendaCreateComponent } from './Aplicacoes/agenda/agenda-create/agenda-create.component';\nimport { AgendaReadComponent } from './Aplicacoes/agenda/agenda-read/agenda-read.component';\nimport { HomeAgendaComponent } from './Aplicacoes/agenda/home-agenda/home-agenda.component';\nimport { AgendaCadastroUnidadeComponent } from './Aplicacoes/agenda/Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component';\nimport { AgendaAlterarUnidadeComponent } from './Aplicacoes/agenda/Unidade/agenda-alterar-unidade/agenda-alterar-unidade.component';\nimport { AgendaExcluirUnidadeComponent } from './Aplicacoes/agenda/Unidade/agenda-excluir-unidade/agenda-excluir-unidade.component';\nimport { UnidadeSalaCadastroComponent } from './Aplicacoes/agenda/Unidade/Sala/unidade-sala-cadastro/unidade-sala-cadastro.component';\nimport { UnidadeSalaUpdateComponent } from './Aplicacoes/agenda/Unidade/Sala/unidade-sala-update/unidade-sala-update.component';\nimport { UnidadeSalaDeleteComponent } from './Aplicacoes/agenda/Unidade/Sala/unidade-sala-delete/unidade-sala-delete.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    FooterComponent,\n    NavComponent,\n    HomeComponent,\n    ProductCrudComponent,\n    ProductCreateComponent,\n    ProductReadComponent,\n    ProductReadTableprodutosComponent,\n    ProductUpdateComponent,\n    ProductDeleteComponent,\n    LoginComponent,\n    RedDirective,\n    UsuarioCrudComponent,\n    UsuarioComponent,\n    UsuarioReadComponent,\n    UsuarioCreateComponent,\n    UsuarioDeleteComponent,\n    UsuarioUpdateComponent,\n    ChamadoCrudComponent,\n    ChamadoCreateComponent,\n    ChamadoUpdateComponent,\n    ChamadoDeleteComponent,\n    ChamadoReadComponent,\n    EmpresaComponent,\n    EmpresaCreateComponent,\n    EmpresaUpdateComponent,\n    EmpresaDeleteComponent,\n    EmpresaReadComponent,\n    AgendaUpdateComponent,\n    AgendaDeleteComponent,\n    AgendaCreateComponent,\n    AgendaReadComponent,\n    HomeAgendaComponent,\n    AgendaCadastroUnidadeComponent,\n    AgendaAlterarUnidadeComponent,\n    AgendaExcluirUnidadeComponent,\n    UnidadeSalaCadastroComponent,\n    UnidadeSalaUpdateComponent,\n    UnidadeSalaDeleteComponent,\n  \n    \n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    HttpClientModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatMenuModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatDividerModule,\n  ],\n  providers: \n  [\n    {\n    provide : LOCALE_ID,\n    useValue : 'pt-BR',\n    },\n  [LoginService],\n ],\n  \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-create',\n  templateUrl: './chamado-create.component.html',\n  styleUrls: ['./chamado-create.component.css']\n})\nexport class ChamadoCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-create works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-delete',\n  templateUrl: './chamado-delete.component.html',\n  styleUrls: ['./chamado-delete.component.css']\n})\nexport class ChamadoDeleteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-delete works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-read',\n  templateUrl: './chamado-read.component.html',\n  styleUrls: ['./chamado-read.component.css']\n})\nexport class ChamadoReadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-read works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-update',\n  templateUrl: './chamado-update.component.html',\n  styleUrls: ['./chamado-update.component.css']\n})\nexport class ChamadoUpdateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-update works!</p>\n","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Router } from '@angular/router';\nimport { UtilService } from './../../../services/util.service';\nimport { Contato } from './../../../models/contato/modelContato';\nimport { ContatoService } from './../../../services/contato.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { cnpj } from 'cpf-cnpj-validator';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-empresa-create',\n  templateUrl: './empresa-create.component.html',\n  styleUrls: ['./empresa-create.component.css']\n})\nexport class EmpresaCreateComponent implements OnInit {\n\n \nempresa : Empresa = {\n    dtCriacao : null,\n    cnpj: null,\n    razaoSocial: null,\n    nomeFantasia: null,\n    inscricaoEstadual: null,\n    inscricaoMunicipal: null,\n    cnes : null,\n    codPIS : null,\n    observacao : null,\n    codCnae : null,\n    empresaPai : null,\n    criadoPor : null,\n    bloqueado : null\n    \n}\n\n\n\n  constructor(private utilService : UtilService,\n              private router : Router,\n              private servicoEmpresa : ServiceAllService<Empresa>,\n              public dialofRef : MatDialogRef<EmpresaCreateComponent>,\n   \n\n\n              )\n             { }\n\n  ngOnInit(): void {\n   \n  }\n\n  cadastrarEmpresa(){\n    \n    let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n    let empPai = Number(this.utilService.Sessao().IdEmpresa);\n    this.empresa.criadoPor  = Number(this.utilService.Sessao().UsuarioId);\n    this.empresa.dtCriacao = new Date;\n    this.empresa.empresaPai = empPai;\n       \n    this.empresa.bloqueado = false;\n    \n    if(grpId == TipoUsuario.Usuario)\n    {\n      this.utilService.showMessage(\"Você não possui permissão para cadastro de empresas\", false)\n\n    }else\n    {\n     if(cnpj.isValid(this.empresa.cnpj)){\n       this.servicoEmpresa.read(Endpoint.Empresa).subscribe(bemp => {\n          bemp = bemp;\n         let retornoEmp = bemp.filter(x => x.cnpj == this.empresa.cnpj)\n         let retornomaster = bemp.filter(x => x.id == empPai);\n\n          if (retornoEmp.length == 0 ){\n            \n            if(grpId == TipoUsuario.Administrador){\n\n                this.servicoEmpresa.create(this.empresa, Endpoint.Empresa).subscribe(emp => {\n                  emp = emp;\n                        \n                  let empresaPai = emp.id;\n                         \n                              emp.empresaPai = empresaPai;\n                              this.servicoEmpresa.update(emp,Endpoint.Empresa).subscribe(() => {})\n                         \n                          this.utilService.showMessage(\"Empresa cadastrada com sucesso!\",false);\n                          this.utilService.atualizaRota();\n                          this.empresa = null;\n                        })\n                }else if (grpId == TipoUsuario.Master && retornomaster.filter(x => x.empresaPai == empPai).length > 0)\n                {\n                  \n                  this.servicoEmpresa.create(this.empresa, Endpoint.Empresa).subscribe(emp => {\n                    emp = emp;\n                          \n                    let empresaPai = emp.id;\n                          \n                              emp.bloqueado = true;\n                              emp.empresaPai = Number(localStorage.getItem(\"empId\"));\n                              this.servicoEmpresa.update(emp,Endpoint.Empresa).subscribe(() => {})\n                       \n                            this.utilService.showMessage(\"Empresa cadastrada com sucesso!\",false);\n                            this.utilService.atualizaRota();\n                            this.empresa = null;\n                          })\n                }else{\n                  this.utilService.showMessage(\"Para criação de uma empresa precisa está logado com a Matriz.!\",false);\n                }\n          }\n          else\n           this.utilService.showMessage(\"Cnpj já cadastrado!\",false);\n        });  \n      }\n      else{\n        this.utilService.showMessage(\"Cnpj inválido\",false);\n      }\n    }\n  }\n\n  fecharPopup(){\n    this.dialofRef.close()\n  }\n\n}\n","<mat-tab-group>\n    <mat-tab label=\"Empresa\">\n        <section>\n\n        <div class=\"container\">\n\n            <mat-card>\n                <mat-card-title>Nova Empresa</mat-card-title>\n                    <form>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cnpj\" \n                             [(ngModel)]=\"empresa.cnpj\" name=\"cnpj\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Nome\"\n                            [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Razão Social\"\n                            [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Inscrição Estadual\"\n                            [(ngModel)]=\"empresa.inscricaoEstadual\" name=\"inscricaoEstadual\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Inscrição Municipal\"\n                            [(ngModel)]=\"empresa.inscricaoMunicipal\" name=\"inscricaoMunicipal\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"CNES\"\n                            [(ngModel)]=\"empresa.cnes\" name=\"cnes\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cod. PIS\"\n                            [(ngModel)]=\"empresa.codPIS\" name=\"codPIS\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cod. CNAE\"\n                            [(ngModel)]=\"empresa.codCnae\" name=\"codCnae\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Observação\"\n                            [(ngModel)]=\"empresa.observacao\" name=\"observacao\">\n                        </mat-form-field>\n            \n                    </form>\n            \n                    <button *ngIf=\"empresa.cnpj && empresa.nomeFantasia && empresa.razaoSocial\"  mat-raised-button (click)=\"cadastrarEmpresa()\" color=\"primary\" > \n                        Salvar\n                    </button>\n                    \n                    <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                        Cancelar\n                    </button>\n            </mat-card>\n\n        </div>\n\n        </section>\n</mat-tab>\n<mat-tab label=\"Contato\"> Contatos</mat-tab>\n<mat-tab label=\"Endereços\">Endereços </mat-tab>\n</mat-tab-group>","import { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { CanActivate, Router, ActivatedRoute } from '@angular/router';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-empresa-delete',\n  templateUrl: './empresa-delete.component.html',\n  styleUrls: ['./empresa-delete.component.css']\n})\nexport class EmpresaDeleteComponent implements OnInit {\n\n\n  empresa : Empresa\n  constructor(private serviceEmpresa : ServiceAllService<Empresa>,\n              private serviceUsuario : ServiceAllService<Usuario>,\n              private mensagem : UtilService,\n              public dialogRef : MatDialogRef<EmpresaDeleteComponent>,\n              private utilservice : UtilService\n\n            ) { }\n\n  ngOnInit(): void {\n    this.BuscarEmpresa();\n  }\n\n\n  excluirEmpresa(){\n    \n    let existeUsuario = null;\n    \n    this.serviceUsuario.read(Endpoint.Usuario).subscribe(usr => {\n        usr = usr;\n        existeUsuario = usr.filter(x => x.empresaid == this.empresa.id.toString())\n       \n        if (existeUsuario.length > 0)\n        {\n          this.mensagem.showMessage(\"Empresa não pode ser excluida porque possui Dependências de usuários.\", false)\n        }    \n        else\n        {\n            if (Number(this.utilservice.Sessao().GrupoUsuario) == TipoUsuario.Administrador){\n              this.serviceEmpresa.delete(this.empresa.id, Endpoint.Empresa).subscribe(()=>{\n                this.mensagem.showMessage(\"Empresa excluida com sucesso !\", false);\n               this.utilservice.atualizaRota()\n              })\n            }\n              else{\n                this.mensagem.showMessage(\"Permissão de exclusão negada !\", false);\n                this.utilservice.atualizaRota()\n              }\n        }\n    });\n  }\n\n  fecharPopup(){\n    this.dialogRef.close();\n  }\n\n   BuscarEmpresa(){\n    \n    \n    this.serviceEmpresa.readById(this.dialogRef.id, Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n\n    })\n\n   }\n\n\n}\n","<mat-card>\n    <mat-card-title>Excluir Empresa</mat-card-title>\n        <form>\n                       \n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\"\n                [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\" disabled=\"true\">\n            </mat-form-field>\n           \n            <mat-form-field>\n                <input matInput placeholder=\"Nome Fantasia\"\n                [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\" disabled=\"true\">\n            </mat-form-field>\n           \n           \n            <mat-form-field>\n                <input matInput placeholder=\"Cnpj\" \n                 [(ngModel)]=\"empresa.cnpj\" name=\"cnpj\" disabled=\"true\">\n\n            </mat-form-field>\n            \n        </form>\n\n        <button mat-raised-button (click)=\"excluirEmpresa()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\r\nimport { Endpoint } from './../../../Negocio/Endpoint';\r\nimport { Router } from '@angular/router';\r\nimport { ServiceAllService } from './../../../services/service-all.service';\r\nimport { Endereco } from './../../../models/endereco/modelEndereco';\r\nimport { Contato } from './../../../models/contato/modelContato';\r\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { elementAt } from 'rxjs/operators';\r\nimport { TipoUsuarioSistema } from 'src/app/models/usuarios/enumUsuarios';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { EmpresaCreateComponent } from '../empresa-create/empresa-create.component';\r\nimport { UtilService } from 'src/app/services/util.service';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { EmpresaUpdateComponent } from '../empresa-update/empresa-update.component';\r\nimport { EmpresaDeleteComponent } from '../empresa-delete/empresa-delete.component';\r\n\r\n@Component({\r\n  selector: 'app-empresa-read',\r\n  templateUrl: './empresa-read.component.html',\r\n  styleUrls: ['./empresa-read.component.css']\r\n})\r\nexport class EmpresaReadComponent implements OnInit {\r\n\r\n  \r\n  empresa: Empresa[];\r\n  empresas: Empresa[];\r\n  contato : Contato;\r\n  endereco : Endereco;\r\n  displayedColumns = ['id','cnpj', 'razaoSocial','nomeFantasia','inscricaoEstadual','inscricaoMunicipal','bloqueado','action']  \r\n\r\n  constructor(private router : Router,\r\n              private serviceEmpresa : ServiceAllService<Empresa>,\r\n              public dialog : MatDialog,\r\n              private _utilService : UtilService,\r\n              private overlay : Overlay\r\n             ) { }\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.buscarEmpresa();\r\n\r\n  }\r\n\r\n  buscarEmpresa(): void \r\n  {\r\n    let filtroEmpresa = (<HTMLSelectElement>document.getElementById('busca')).value;\r\n    let empId = localStorage.getItem(\"empId\");\r\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\r\n\r\n    this.serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\r\n      emp = emp;\r\n\r\n      \r\n      this.empresa =  new Array();\r\n\r\n          if(grpId == TipoUsuario.Administrador)\r\n          {\r\n            emp.forEach(element => {\r\n            this.empresa.push(element)\r\n             });\r\n          }\r\n          else if(grpId == TipoUsuario.Master)\r\n          {\r\n            emp.forEach(master => {\r\n              if(master.empresaPai.toString()== empId) \r\n              this.empresa.push(master)\r\n            });\r\n\r\n          }\r\n\r\n      let empresaFIltrada = new Array();\r\n      if (filtroEmpresa){\r\n           \r\n        for (let index = 0; index < this.empresa.length; index++) {\r\n          const element = this.empresa[index];\r\n            if (element.nomeFantasia.toLowerCase().includes(filtroEmpresa.toLowerCase()))\r\n            empresaFIltrada.push(element);\r\n        }\r\n        this.empresa = new Array();\r\n        this.empresa = empresaFIltrada;    \r\n      }else{\r\n        this.empresa = this.empresa;\r\n      }\r\n\r\n\r\n    })\r\n  }\r\n\r\n  addEmpresa(){\r\n\r\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\r\n        const dialogRef = this.dialog.open(EmpresaCreateComponent, {\r\n          width : '700px',\r\n          height : '730px',\r\n          scrollStrategy\r\n\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n          console.log(`Dialog result: ${result}`);\r\n        });\r\n    }else{\r\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  editarEmpresa(id : string){\r\n\r\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\r\n        const dialogRef = this.dialog.open(EmpresaUpdateComponent, {\r\n          width : '700px',\r\n          height : '750px',\r\n          scrollStrategy,\r\n          id\r\n\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n          console.log(`Dialog result: ${result}`);\r\n        });\r\n    }else{\r\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  excluirEmpresa(id : string){\r\n\r\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\r\n        const dialogRef = this.dialog.open(EmpresaDeleteComponent, {\r\n          width : '500',\r\n          height : '200px',\r\n          scrollStrategy,\r\n          id\r\n\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n          console.log(`Dialog result: ${result}`);\r\n        });\r\n    }else{\r\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\r\n    }\r\n    \r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\n      \r\n\r\n\r\n\r\n\r\n","<div>\n  <input class=\"search\" name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n   \n   <span (click)=\"buscarEmpresa()\">\n     <i class=\"material-icons\">search</i>\n   </span>\n</div>\n\n<div class=\"footer\">\n  <span (click)=\"addEmpresa()\">\n    <i class=\"material-icons\">person_add</i>\n  </span>\n</div>\n\n<div class=\"mat-elevation-z4\">\n    <table mat-table [dataSource]=\"empresa\">\n      <!-- Id Column -->\n      \n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n  \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"cnpj\">\n        <th mat-header-cell *matHeaderCellDef>Cnpj</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.cnpj}}</td>\n      </ng-container>\n      \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"razaoSocial\">\n        <th mat-header-cell *matHeaderCellDef>Razão Social</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.razaoSocial}}</td>\n      </ng-container>\n\n       <!-- Name Column -->\n       <ng-container matColumnDef=\"nomeFantasia\">\n        <th mat-header-cell *matHeaderCellDef>Nome Fantasia</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nomeFantasia}}</td>\n      </ng-container>\n\n      <!-- Name Price -->\n      <ng-container matColumnDef=\"inscricaoEstadual\">\n        <th mat-header-cell *matHeaderCellDef>Ins. Estadual</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.inscricaoEstadual}}</td>\n      </ng-container>\n\n       <!-- Name Column -->\n       <ng-container matColumnDef=\"inscricaoMunicipal\">\n        <th mat-header-cell *matHeaderCellDef>Ins. Municipal</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.inscricaoMunicipal}}</td>\n      </ng-container>\n\n      <!-- status -->\n      <ng-container matColumnDef=\"bloqueado\">\n        <th mat-header-cell *matHeaderCellDef>Bloqueado</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div *ngIf=\"row.bloqueado\" >\n              <i class=\"material-icons\">\n                lock\n              </i>\n            </div>\n            <div *ngIf=\"!row.bloqueado\" >\n              <i class=\"material-icons\">  \n                lock_open\n              </i>\n            </div>\n          </td>\n        </ng-container>\n\n       \n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n\n            <a (click)=\"editarEmpresa(row.id)\"  class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            <a (click)=\"excluirEmpresa(row.id)\" class=\"delete\">\n                <i class=\"material-icons\">\n                    delete\n                </i>\n            </a>\n            \n\n        </td>\n      </ng-container>\n          \n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n</div>\n\n\n\n","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { UtilService } from './../../../services/util.service';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Component, OnInit } from '@angular/core';\nimport { cnpj } from 'cpf-cnpj-validator';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-empresa-update',\n  templateUrl: './empresa-update.component.html',\n  styleUrls: ['./empresa-update.component.css']\n})\nexport class EmpresaUpdateComponent implements OnInit {\n\n  empresa : Empresa;\n  usuariologado : boolean;\n  constructor(\n              private empresaService : ServiceAllService<Empresa>,\n              private utilservice : UtilService,\n              public dialog : MatDialogRef<EmpresaUpdateComponent>\n              ) { }\n\n  ngOnInit(): void {\n \n  if (Number(this.utilservice.Sessao().GrupoUsuario) == TipoUsuario.Administrador)\n     this.usuariologado = true;\n  \n  this.ObterEmpresa();\n  \n  }\n\n\n  atualizarEmpresa() : void {\n    \n    let grpId = Number(this.utilservice.Sessao().GrupoUsuario);\n    if(grpId == TipoUsuario.Usuario)\n    {\n      this.utilservice.showMessage(\"Você não possui permissão para editar o cadastro de empresas\", false)\n\n    }else\n    {\n     if (cnpj.isValid(this.empresa.cnpj)){\n               try {\n                        this.empresaService.update(this.empresa, Endpoint.Empresa).subscribe(()=>{\n                        this.utilservice.showMessage(\"Empresa atualizada com sucesso\", false)\n                        this.utilservice.atualizaRota();\n                      });\n\n                    } catch (error) {\n                      this.utilservice.showMessage(\"Erro na atualização dos dados \" + error, true);\n                    }\n\n      }else{\n        this.utilservice.showMessage(\"Cnpj Inválido \" , false);\n      }\n      }\n  }\n\n  fecharPopup(){\n    this.dialog.close();\n  }\n\n  \n  ObterEmpresa() {\n    this.empresaService.readById(this.dialog.id, Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n    })    \n       \n  }\n  \n\n}\n\n\n","<mat-card>\n    <mat-card-title>Atualizar dados da Empresa</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Cnpj\" \n                 [(ngModel)]=\"empresa.cnpj\" disabled=\"true\" name=\"cnpj\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\"\n                [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Razão Social\"\n                [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Inscrição Estadual\"\n                [(ngModel)]=\"empresa.inscricaoEstadual\" name=\"inscricaoEstadual\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Inscrição Municipal\"\n                [(ngModel)]=\"empresa.inscricaoMunicipal\" name=\"inscricaoMunicipal\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"CNES\"\n                [(ngModel)]=\"empresa.cnes\" name=\"cnes\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Cod. PIS\"\n                [(ngModel)]=\"empresa.codPIS\" name=\"codPIS\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Cod. CNAE\"\n                [(ngModel)]=\"empresa.codCnae\" name=\"codCnae\">\n            </mat-form-field>\n            \n            <div *ngIf=\"usuariologado\">\n                <mat-form-field >\n                            <input matInput placeholder=\"Bloqueado\">\n                                        <input name=\"status\" [(ngModel)]=\"empresa.bloqueado\" [checked]=\"empresa.bloqueado\" type=\"checkbox\">\n                </mat-form-field>\n            </div>\n          \n            <mat-form-field>\n    \n                <input matInput placeholder=\"Observação\"\n                [(ngModel)]=\"empresa.observacao\" name=\"observacao\">\n            </mat-form-field>\n\n        </form>\n\n        <button *ngIf=\"empresa.cnpj && empresa.nomeFantasia && empresa.razaoSocial\"  mat-raised-button (click)=\"atualizarEmpresa()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>","import { Endpoint } from './../../Negocio/Endpoint';\nimport { Empresa } from './../../models/empresa/ModelEmpresa';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { Acesso } from '../../models/acessoModel';\nimport { UtilService } from './../../services/util.service';\nimport { LoginService } from './../../services/login.service';\n\nimport { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\nacesso : Acesso = new Acesso();\n\n\n\nconstructor(private router :Router,\n             private authservice : LoginService,\n             ) { }\n\n  ngOnInit(): void {\n  \n  }\n  \n  logarSistema(keyEvent : any){\n\n    if (keyEvent.which === 13 || keyEvent.which == 1)\n      this.authservice.logarSistema(this.acesso);\n\n  }\n  \n}\n","<mat-card >\n    <mat-card-title><i class=\"material-icons\">account_box</i></mat-card-title>\n        <form>\n            <mat-form-field > \n                <input matInput placeholder=\"Chave Empresa\" \n                 [(ngModel)]=\"acesso.nome\" name=\"name\" placeholder=\"Empresa\">\n                 \n            </mat-form-field>\n\n            <mat-form-field > \n                <input matInput placeholder=\"login\" \n                 [(ngModel)]=\"acesso.login\" name=\"name\" placeholder=\"login\">\n                 \n            </mat-form-field>\n           \n            <mat-form-field >\n                <input matInput placeholder=\"senha\"\n                [(ngModel)]=\"acesso.senha\" type=\"password\" name=\"senha\" (keypress)=\"logarSistema($event)\">\n                \n            </mat-form-field>\n        </form>\n        \n            <div *ngIf=\"acesso.login && acesso.senha && acesso.nome\">\n                <button mat-raised-button (click)=\"logarSistema($event)\"  color=\"primary\"> \n                    Login\n                </button> \n            </div>\n          \n   \n       \n        \n\n</mat-card>        \n","import { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Aplicacao, TipoAplicacao } from './../../../Negocio/Aplicacao';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { Token } from '@angular/compiler/src/ml_parser/lexer';\nimport { stringify } from 'querystring';\nimport { UtilService } from './../../../services/util.service';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-product-create',\n  templateUrl: './product-create.component.html',\n  styleUrls: ['./product-create.component.css']\n})\nexport class ProductCreateComponent implements OnInit {\n\n  comboProduto =  [];\n  empresa : Empresa[];\n  comboEmpresa : Empresa;\n\n    product : Product = {  \n    dtCriacao : null,\n    criadoPor : null,\n    nome : null,\n    valor : 0,\n    empresaid : null,\n    bloqueado : false,\n    }\n\n  constructor(\n              private utilService : UtilService,\n              private router : Router,\n              private ProdutoEmpresa : ServiceAllService<Product>,\n              private ServiceEmpresa : ServiceAllService<Empresa>,\n              public matDialogref : MatDialogRef<ProductCreateComponent>\n               ) { }\n\n  ngOnInit(): void {\n    this.buscarProduto();\n    this.buscarEmpresa()\n  }\n\n  associarProdutoEmpresa() : void {\n\n    this.product.criadoPor  = Number(localStorage.getItem(\"usId\"));\n    this.product.dtCriacao = new Date;\n    this.product.bloqueado = false;\n    \n    this.ProdutoEmpresa.read(Endpoint.Produto).subscribe(p => {\n      p = p;\n\n      let ativo = p.filter(x => x.nome == this.product.nome && x.empresaid == this.product.empresaid )\n      \n      if (ativo.length == 0)\n      {\n        this.ProdutoEmpresa.create(this.product, Endpoint.Produto).subscribe(() => {\n          this.utilService.showMessage('o Produto Criado!');\n          this.utilService.atualizaRota()\n          })\n      \n      }else{\n        this.utilService.showMessage('Esse Produto Já foi cadastrado para essa empresa!');\n      }\n\n    })\n    \n  }\n\n  fecharPopup() : void {\n    this.matDialogref.close();\n  }\n\n  buscarProduto(){\n    \n      TipoAplicacao.forEach(element => {\n        this.comboProduto.push(element)\n      });\n     return this.comboProduto;\n  }\n  buscarEmpresa(){\n    this.ServiceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n    })\n  }\n  \n}\n","<mat-card>\n    <mat-card-title>Habilitar - Produto Empresa</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Produto\">\n                <p></p>\n                <mat-select [(value)]=\"product.nome\" placeholder=\"productId\" >\n                    <mat-option *ngFor=\"let produto of comboProduto \" [value]=\"produto\">\n                         {{produto}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"product.empresaid\" placeholder=\"EmpresaID\" >\n                    <mat-option *ngFor=\"let comboEmpresa of empresa\" [value]=\"comboEmpresa.id\">\n                            {{comboEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Preço R$\"\n                [(ngModel)]=\"product.valor\" name=\"valor\">\n\n            </mat-form-field>\n            \n        </form>\n\n        <button mat-raised-button (click)=\"associarProdutoEmpresa()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>\n\n","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-product-delete',\n  templateUrl: './product-delete.component.html',\n  styleUrls: ['./product-delete.component.css']\n})\nexport class ProductDeleteComponent implements OnInit {\n\n  product : Product = {\n    id: null,\n    dtCriacao : null,\n    criadoPor : null,\n    nome: null,\n    valor : 0,\n    empresaid : null,\n    bloqueado : null,\n  }\n\n  constructor(private productService : ProductService,\n              private utilService : UtilService,\n              private deleteProduto : ServiceAllService<Product>,\n              public dialogRef : MatDialogRef<ProductDeleteComponent> \n              ) { }\n\n  ngOnInit(): void {\n    this.buscarProduto();\n  }\n  \n  deleteProduct():void{\n      \n    this.deleteProduto.delete(Number(this.dialogRef.id), Endpoint.Produto).subscribe(() => {\n        this.utilService.showMessage(\"Produto Excluído com Sucesso!\")\n        this.utilService.atualizaRota();\n      })\n    \n  }\n\n  buscarProduto(){\n    this.productService.readById(this.dialogRef.id).subscribe(product => {\n      this.product = product;\n    });\n  }\n\n  fecharPopup():void{\n    this.dialogRef.close();\n  }\n\n}\n\n\n  \n\n \n\n\n\n  \n","<mat-card>\n    <mat-card-title>Excluir Produto</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" disabled\n                [(ngModel)]=\"product.nome\" name=\"nome\">\n\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"deleteProduct()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>\n\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface ProductReadTableprodutosItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: ProductReadTableprodutosItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n];\n\n/**\n * Data source for the ProductReadTableprodutos view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class ProductReadTableprodutosDataSource extends DataSource<ProductReadTableprodutosItem> {\n  data: ProductReadTableprodutosItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator;\n  sort: MatSort;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<ProductReadTableprodutosItem[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: ProductReadTableprodutosItem[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: ProductReadTableprodutosItem[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable } from '@angular/material/table';\nimport { ProductReadTableprodutosDataSource, ProductReadTableprodutosItem } from './product-read-tableprodutos-datasource';\n\n@Component({\n  selector: 'app-product-read-tableprodutos',\n  templateUrl: './product-read-tableprodutos.component.html',\n  styleUrls: ['./product-read-tableprodutos.component.css']\n})\nexport class ProductReadTableprodutosComponent implements AfterViewInit, OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatTable) table: MatTable<ProductReadTableprodutosItem>;\n  dataSource: ProductReadTableprodutosDataSource;\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['id', 'name'];\n\n  ngOnInit() {\n    this.dataSource = new ProductReadTableprodutosDataSource();\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.table.dataSource = this.dataSource;\n  }\n}\n","<div class=\"mat-elevation-z8\">\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\">\n    <!-- Id Column -->\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.name}}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator #paginator\n      [length]=\"dataSource?.data.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"10\"\n      [pageSizeOptions]=\"[5, 10, 100]\">\n  </mat-paginator>\n</div>\n","import { stringify } from 'querystring';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Router } from '@angular/router';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { ProductService } from './../../../services/product.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Product } from '../../../models/produtos/product.model';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ProductCreateComponent } from '../product-create/product-create.component';\nimport { ProductUpdateComponent } from '../product-update/product-update.component';\nimport { ProductDeleteComponent } from '../product-delete/product-delete.component';\n\n@Component({\n  selector: 'app-product-read',\n  templateUrl: './product-read.component.html',\n  styleUrls: ['./product-read.component.css']\n})\nexport class ProductReadComponent implements OnInit {\n\n\n\nproducts: Product[]\n\ndisplayedColumns = ['id','nome', 'valor','empresaid','bloqueado','action']  \n\n  constructor(private router : Router,\n              private serviceProduto : ServiceAllService<Product>,\n              private serviceEmpresa : ServiceAllService<Empresa>,\n              private _utilService : UtilService,\n              public dialog : MatDialog, \n              private overlay : Overlay\n             ) { }\n\n  ngOnInit(): void {\n      this.buscarProduto()\n  }\n\n  addProduto(){\n\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(ProductCreateComponent, {\n          width : '500',\n          height : '400px',\n          scrollStrategy,\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\n    }\n\n\n  }\n\n  editarProduto(id : string){\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(ProductUpdateComponent, {\n          width : '400px',\n          height : '360px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para associar produtos a uma empresa\",true);\n    }\n  }\n\n\n  excluirProdutoEmpresa(id : string){\n\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(ProductDeleteComponent, {\n          width : '400px',\n          height : '240px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para associar produtos a uma empresa\",true);\n    }\n\n\n  }\n\n\n  buscarProduto() : void {\n\n    this.serviceProduto.read(Endpoint.Produto).subscribe(product => {\n        product = product;\n\n        this.products = new Array();\n\n        product.forEach(element => {\n          \n            this.serviceEmpresa.readById(element.empresaid.toString(), Endpoint.Empresa).subscribe(e => {\n              e = e;\n              if (e)\n                element.empresaid = e.razaoSocial;\n            })\n            this.products.push(element)\n        });\n    })\n  }\n}\n","<div class=\"mat-elevation-z4\">\n\n  <div class=\"head\">\n    <span (click)=\"addProduto()\">\n      <i class=\"material-icons\">person_add</i>\n    </span>\n  </div>\n\n    <table mat-table [dataSource]=\"products\">\n      <!-- Id Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"nome\">\n        <th mat-header-cell *matHeaderCellDef>Nome</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n      </ng-container>\n      \n       <!-- Name Price -->\n       <ng-container matColumnDef=\"valor\">\n        <th mat-header-cell *matHeaderCellDef>Preço</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.valor | currency: 'BRL'}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"empresaid\">\n        <th mat-header-cell *matHeaderCellDef>Empresa</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.empresaid}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"bloqueado\">\n        <th mat-header-cell *matHeaderCellDef>Status</th>\n        <td mat-cell *matCellDef=\"let row\">\n            <div *ngIf=\"row.bloqueado\" >\n              <i class=\"material-icons\">\n                lock\n              </i>\n            </div>\n            <div *ngIf=\"!row.bloqueado\" >\n              <i class=\"material-icons\">  \n                lock_open\n              </i>\n            </div>\n        </td>\n      </ng-container>\n\n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n\n            <a (click)=\"editarProduto(row.id)\" class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            <a (click)=\"excluirProdutoEmpresa(row.id)\" class=\"delete\">\n                <i class=\"material-icons\">\n                    delete\n                </i>\n            </a>\n        </td>\n      </ng-container>\n          \n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n\n  </div>\n\n","import { Endpoint } from './../../../Negocio/Endpoint';\n\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n\n@Component({\n  selector: 'app-product-update',\n  templateUrl: './product-update.component.html',\n  styleUrls: ['./product-update.component.css']\n})\nexport class ProductUpdateComponent implements OnInit {\n\nproduct: Product = new Product()\n  \n\n  constructor(\n              private utilService : UtilService,\n              private ProdutoService : ServiceAllService<Product>,\n              public matdialogRef : MatDialogRef<ProductUpdateComponent>,\n              private route : Router\n              ) { }\n\n\n  ngOnInit(): void {\n    \n    this.buscarProduto();\n   \n  }\n\n  updateProduct(): void {\n    this.product.criadoPor  = Number(localStorage.getItem(\"usId\"));\n      this.ProdutoService.update(this.product, Endpoint.Produto).subscribe(() => {\n      this.utilService.showMessage(\"Produto Atualizado com Sucesso!\")\n      this.fecharPopup();\n    })\n\n  }\n\n  fecharPopup(): void {\n    \n    this.matdialogRef.close();\n   \n  }\n  buscarProduto() : void {\n      this.ProdutoService.readById(this.matdialogRef.id, Endpoint.Produto).subscribe(product => {\n          this.product = product;\n      })\n  }  \n\n}\n","<mat-card>\n    <mat-card-title>Alterar Produto</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"product.nome\" name=\"nome\">\n\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Preço R$\"\n                [(ngModel)]=\"product.valor\" name=\"valor\">\n\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Bloqueado\">\n                    <input name=\"usuariosisteja\" [(ngModel)]=\"product.bloqueado\" [checked]=\"product.bloqueado\" type=\"checkbox\">\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"updateProduct()\" color=\"primary\" > \n            Atualizar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n       \n</mat-card>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar class=\"footer\">\n    <span>\n    Desenvolvido com \n        <i class=\"material-icons red v-middle\" appRed >\n            home\n        </i>\n        por <strong><span>Alberto</span></strong>\n    </span>\n</mat-toolbar>","import { HeaderService } from './header.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private headerService : HeaderService) { }\n\n  ngOnInit(): void {\n  }\n\nget title(): string {\n  return this.headerService.headerData.title\n}\n\nget icon(): string {\n  return this.headerService.headerData.icon\n}\n\nget routeUrl(): string {\n  return this.headerService.headerData.routeUrl\n}\n\n}\n","<mat-toolbar class=\"header mat-elevation-z4\">\n    <span>\n        <a routerLink=\"/\">\n            <img class=\"logo\" src=\"assets/img/logo.jpg\" alt=\"logo\">\n        </a>\n    </span>\n    <span class=\"title-group\">\n        <a routerLink=\"{{ routeUrl }}\" >\n            <i class=\"material-icons\">\n                {{ icon }}\n            </i>\n        \n            {{ title }}\n        </a>\n    </span> \n</mat-toolbar>\n\n","import { HeaderData } from './header.data.model';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeaderService {\n\n  private _headerData = new BehaviorSubject<HeaderData>({\n    title : 'Início',\n    icon : 'home',\n    routeUrl : ''\n  })\n\n\n  constructor() { }\n\nget headerData() : HeaderData {\n  return this._headerData.value;\n}\n\nset headerData(headerData : HeaderData) {\n   this._headerData.next(headerData)\n}\n\n\n}\n","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Component, OnInit } from '@angular/core';\nimport { LoginService } from 'src/app/services/login.service';\n\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\nopened = false;\nlock = false;  \n  constructor(private auth: LoginService) { }\n\n  ngOnInit(): void {\n  this.validarAcesso();\n  }\n\n  sairSistema(){\n    \n    this.auth.sairSistema();\n    \n  }\nvalidarAcesso(){\n  this.lock = Number(localStorage.getItem(\"grpUs\")) == TipoUsuario.Administrador ? true : false;\n}\n \n\n}\n","<mat-sidenav-container class=\"container\">\n    <mat-sidenav  class=\"sidenav\" mode=\"side\" \n            fixedInViewport=\"true\" fixedTopGap=\"64\" fixedBottomGap=\"64\" [(opened)]=\"opened\">\n            <mat-nav-list class=\"nav-list\">\n            \n                <a mat-list-item routerLink=\"/\">\n                <i class=\"material-icons\">\n                    home\n                </i>\n                Início\n            </a>\n            <!--Menus de cadastro-->    \n            <button mat-button [matMenuTriggerFor]=\"menu\" class=\"menuColor\" >\n                <i class=\"material-icons\">storefront</i>\n                \n                <mat-menu #menu=\"matMenu\">\n                        <a mat-list-item routerLink=\"empresa\" >\n                            <i class=\"material-icons\">\n                                reorder\n                            </i>\n                            Empresa\n                        </a>\n                        <a *ngIf=\"lock\" mat-list-item routerLink=\"products\" >\n                            <i class=\"material-icons\">\n                                storefront\n                            </i>\n                            Produto - Empresa\n                        </a>\n                        <a mat-list-item routerLink=\"chamados\">\n                            <i class=\"material-icons\">\n                                reorder\n                            </i>\n                            Solicitações\n                        </a>\n                        <a mat-list-item routerLink=\"usuarios\">\n                            <i class=\"material-icons\">\n                                perm_identity\n                            </i>\n                            Usuários\n                        </a>\n                </mat-menu>\n            </button>\n\n            <a mat-list-item (click)=\"sairSistema()\">\n                <i class=\"material-icons\">\n                    logout\n                </i>\n                Sair\n            </a>\n        </mat-nav-list>\n    </mat-sidenav>\n    <!--\n        Chamar o componente Home como página Principal\n    -->\n    <mat-sidenav-content class=\"content\">\n        <div *ngIf=\"!opened\">\n            <i class=\"material-icons\" (click)=\"opened=!opened\" >\n                navigate_next\n            </i>\n        </div>\n            \n        <div *ngIf=\"opened\">\n                <i class=\"material-icons\" (click)=\"opened=!opened\" >\n                    navigate_before\n                </i>\n        </div>\n        <router-outlet></router-outlet>\n    </mat-sidenav-content>\n\n</mat-sidenav-container>\n\n","import { stringify } from 'querystring';\nimport { UsuarioReadComponent } from './../usuario-read/usuario-read.component';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { GrupoUsuario } from './../../../models/usuarios/GrupoUsuarios';\nimport { LoginService } from 'src/app/services/login.service';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { TipoUsuario, TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Usuario } from '../../../models/usuarios/modelLogin';\nimport { Component, OnInit } from '@angular/core';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-usuario-create',\n  templateUrl: './usuario-create.component.html',\n  styleUrls: ['./usuario-create.component.css']\n})\nexport class UsuarioCreateComponent implements OnInit {\n\ntipoLogin : boolean = false;\nempresa : Empresa[];\n\ndadosEmpresa : Empresa;\nusuario : Usuario = new Usuario();\n\ngrupousuario : GrupoUsuario[];\n\ncriargrupousuario : GrupoUsuario = new GrupoUsuario()\n\ncomboTipousuario = [];\n\nconstructor(  private serviceUsuario : ServiceAllService<Usuario>,\n              private serviceEmpresa : ServiceAllService<Empresa>,\n              private serviceGrupoUsuario : ServiceAllService<GrupoUsuario>,\n              private utilService : UtilService,\n              private serviceLogin : LoginService,\n              public dialogRef: MatDialogRef <UsuarioCreateComponent>, \n              \n              private router : Router) { }\n\n  ngOnInit(): void {\n      let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n      \n      if (grpId == TipoUsuario.Administrador)\n         this.tipoLogin=true;\n\n      this.alimentarCombo();\n      this.buscarEmpresa();\n  }\n  \n  createUsuario() : void {\n    \n    this.usuario.criadoPor  = Number(this.utilService.Sessao().UsuarioId);\n    this.usuario.dtCriacao = new Date;\n   \n    this.usuario.grupoUsuarioid = this.usuario.grupoUsuarioid.toString().trim() == \"Administrador\" ? TipoUsuario.Administrador.toString() \n                                : this.usuario.grupoUsuarioid.toString().trim() == \"Sistema\" ? TipoUsuario.Sistema.toString()\n                                : this.usuario.grupoUsuarioid.toString().trim() == \"Master\" ? TipoUsuario.Master.toString()\n                                : this.usuario.grupoUsuarioid.toString() == \"Usuario\" ? TipoUsuario.Usuario.toString() : null;\n    \n    \n\n    this.serviceUsuario.read(Endpoint.Usuario).subscribe(user => {\n      user = user;\n\n      let ativo = user.filter(x => x.login.toLowerCase() == this.usuario.login.toLowerCase() && x.empresaid == this.usuario.empresaid);\n           \n            if (ativo.length > 0)\n            {\n              this.utilService.showMessage('Esse Usuário já existe para essa Empresa');\n              this.usuario.login =  null; \n              user =  new Array();\n            }else{\n           \n              this.serviceEmpresa.readById(this.usuario.empresaid, Endpoint.Empresa).subscribe(emp => {\n                emp = emp;\n                if (!emp.bloqueado){\n                  this.serviceUsuario.create(this.usuario, Endpoint.Usuario).subscribe(() => {\n                    this.utilService.showMessage('Usuário Criado!');\n                    this.utilService.atualizaRota()\n                  });\n                }\n                else\n                {\n                  this.utilService.showMessage(`Não pode ser criado Usuário para empresa ${emp.razaoSocial} porque essa empresa está bloqueada.`, false);\n                }\n              });\n              \n              user =  new Array();\n            }\n\n    })\n  }\n\n  fecharPopup(): void{\n    this.dialogRef.close();\n  }\n\n  buscarEmpresa() {\n   \n    let empId = this.utilService.Sessao().IdEmpresa\n    let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n\n    this.serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n        emp = emp; \n\n        this.empresa =  new Array()\n\n          emp.forEach(empresasCarregadas => {\n        \n            if(grpId == TipoUsuario.Administrador)\n              this.empresa.push(empresasCarregadas)\n            else if (grpId == TipoUsuario.Master && empId == empresasCarregadas.empresaPai.toString())\n                this.empresa.push(empresasCarregadas)\n            });\n    })\n  }\n\n  alimentarCombo() : void  {\n\n    let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n\n    for (var tipo in TipoUsuario) {\n      if (TipoUsuario.hasOwnProperty(tipo) &&\n        (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Administrador ) {\n\n          this.comboTipousuario.push(tipo)\n          \n      }\n      else if (TipoUsuario.hasOwnProperty(tipo) &&\n      (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Master ){\n\n        if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Master || TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n            this.comboTipousuario.push(tipo);\n        }\n    }\n  }\n\n  createGrupoUsuario(){\n    this.criargrupousuario.criadoPor  = Number(this.utilService.Sessao().UsuarioId);\n    this.criargrupousuario.dtCriacao = new Date;\n    this.criargrupousuario.empresaId = Number(this.utilService.Sessao().IdEmpresa);\n\n      this.serviceGrupoUsuario.create(this.criargrupousuario, Endpoint.GrupoUsuario).subscribe(() => {\n        this.utilService.showMessage('Grupo de Usuário Criado!');\n      })\n  }\n}\n","<mat-card>\n    <h1>Cadastro de Usuário</h1>\n    <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                [(ngModel)]=\"usuario.nome\" name=\"name\">\n\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Senha\" type=\"password\"\n                [(ngModel)]=\"usuario.senha\" name=\"senha\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Crachá\"\n                [(ngModel)]=\"usuario.cracha\" name=\"cracha\">\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"tipoLogin\">\n                <input matInput placeholder=\"Usuario de Sistema\">\n                    <input name=\"usuariosisteja\" [(ngModel)]=\"usuario.bolSistema\" [checked]=\"usuario.bolSistema\" type=\"checkbox\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Reseta Senha\">\n                    <input name=\"usuariresetasenha\" [(ngModel)]=\"usuario.bolResetaSenha\" [checked]=\"usuario.bolResetaSenha\" type=\"checkbox\">\n            </mat-form-field>\n\n            \n            <mat-form-field>\n                <input matInput placeholder=\"Tipo de Usuário\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.grupoUsuarioid\" placeholder=\"tipousuario\" >\n                    <mat-option *ngFor=\"let tipo of comboTipousuario \" [value]=\"tipo\">\n                        {{tipo}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.empresaid\" placeholder=\"EmpresaID\" >\n                    <mat-option *ngFor=\"let dadosEmpresa of empresa\" [value]=\"dadosEmpresa.id\">\n                    {{dadosEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Profissional\">\n                    <input name=\"usuarioProfissional\" [(ngModel)]=\"usuario.profissional\" [checked]=\"usuario.profissional\" type=\"checkbox\">\n            </mat-form-field>\n\n    </form>\n            <button *ngIf=\"usuario.nome && usuario.login && usuario.senha && usuario.grupoUsuarioid && usuario.empresaid\" mat-raised-button (click)=\"createUsuario()\" color=\"primary\" > \n                Salvar\n            </button>\n  \n            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                Voltar\n            </button>\n  \n \n</mat-card>","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { EmpresaService } from './../../../services/empresa.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UsuarioService } from './../../../services/usuario.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-usuario-delete',\n  templateUrl: './usuario-delete.component.html',\n  styleUrls: ['./usuario-delete.component.css']\n})\nexport class UsuarioDeleteComponent implements OnInit {\nempresa : Empresa\nusuario : Usuario;\n\n  constructor(private usuarioService : ServiceAllService<Usuario>,\n              private empresaService : ServiceAllService<Empresa>,\n              private utilService : UtilService,\n              private route : ActivatedRoute,\n              public dialogRef : MatDialogRef<UsuarioDeleteComponent>\n             ) { }\n\n  ngOnInit(): void {\n    this.carregaUsuario()\n  }\n\ncarregaUsuario(){\n\n  \n  this.usuarioService.readById(this.dialogRef.id, Endpoint.Usuario).subscribe(usuario => {\n    this.usuario = usuario;\n    \n    this.buscarEmpresa().subscribe(empresa =>{\n      this.empresa = empresa;\n      this.usuario.empresaid = this.empresa.nomeFantasia;\n     \n    });\n  })\n\n}\n\n  deleteUsuario(): void{\n      this.usuarioService.delete(this.usuario.id , Endpoint.Usuario).subscribe(() => {\n      this.utilService.showMessage(\"Usuário Excluído com Sucesso!\")\n      this.fecharPopup();\n      this.utilService.atualizaRota();\n\n\n    })\n  }\n  fecharPopup():void{\n    this.dialogRef.close();\n  }\n\n  buscarEmpresa(){\n    return this.empresaService.readById(this.usuario.empresaid, Endpoint.Empresa);\n  }\n}\n","<mat-card>\n    <mat-card-title>Excluir Usuário</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"usuario.nome\" name=\"nome\" disabled = \"true\" > \n\n            </mat-form-field>\n            \n            \n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\" disabled=\"true\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\"\n                [(ngModel)]=\"usuario.empresaid\" name=\"empresaid\" disabled=\"true\" >\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"deleteUsuario()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>","\n<div>\n   <input class=\"search\" name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n    \n    <span (click)=\"getUser()\">\n      <i class=\"material-icons\">search</i>\n    </span>\n</div>\n<div>\n  <span (click)=\"addUsuario()\">\n    <i class=\"material-icons\">person_add</i>\n  </span>\n</div>\n\n<div class=\"mat-elevation-z4\">\n    <table mat-table [dataSource]=\"usuario\">\n      <!-- Id Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n  \n      <!-- Nome -->\n      <ng-container matColumnDef=\"nome\">\n        <th mat-header-cell *matHeaderCellDef>Nome</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n      </ng-container>\n      \n\n        <!-- Login -->\n        <ng-container matColumnDef=\"login\">\n            <th mat-header-cell *matHeaderCellDef>Login</th>\n            <td mat-cell *matCellDef=\"let row\">{{row.login}}</td>\n        </ng-container> \n\n\n        <!-- Empresa -->\n        <ng-container matColumnDef=\"empresaid\">\n          <th mat-header-cell *matHeaderCellDef>Empresa</th>\n          <td mat-cell *matCellDef=\"let row\">{{row.empresaid}}</td>\n      </ng-container> \n       \n      <ng-container matColumnDef=\"grupoUsuarioid\">\n        <th mat-header-cell *matHeaderCellDef>Tipo de Usuário</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.grupoUsuarioid}}</td>\n    </ng-container> \n\n\n <!-- status -->\n <ng-container matColumnDef=\"bloqueado\">\n  <th mat-header-cell *matHeaderCellDef>Bloqueado</th>\n    <td mat-cell *matCellDef=\"let row\">\n      <div *ngIf=\"row.bloqueado\" >\n        <i class=\"material-icons\">\n          lock\n        </i>\n      </div>\n      <div *ngIf=\"!row.bloqueado\" >\n        <i class=\"material-icons\">  \n          lock_open\n        </i>\n      </div>\n    </td>\n  </ng-container>\n\n\n\n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n      \n         \n          <a (click)=\"editarUsuario(row.id )\" class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            \n            <a *ngIf=\"userAutenticado\" (click)=\"deletarUsuario(row.id)\"  class=\"delete\">\n              \n                <i class=\"material-icons\">\n                    delete \n                           \n                </i>\n              \n            </a>\n           \n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\">teste</tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      \n      \n\n    </table>\n\n</div>\n","import { TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { GrupoUsuario } from './../../../models/usuarios/GrupoUsuarios';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Router } from '@angular/router';\nimport { map, catchError, take, tap, elementAt } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Endpoint } from './../../../Negocio/Endpoint';\n\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatTable } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { EmpresaService } from './../../../services/empresa.service';\nimport { UsuarioService } from './../../../services/usuario.service';\nimport { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { __await } from 'tslib';\nimport { FooterComponent } from '../../template/footer/footer.component';\nimport { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { UsuarioCreateComponent } from '../usuario-create/usuario-create.component';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { UsuarioUpdateComponent } from '../usuario-update/usuario-update.component';\nimport { UsuarioDeleteComponent } from '../usuario-delete/usuario-delete.component';\n\n\n@Component({\n  selector: 'app-usuario-read',\n  templateUrl: './usuario-read.component.html',\n  styleUrls: ['./usuario-read.component.css']\n})\n\n\nexport class UsuarioReadComponent implements OnInit {\n\n  usuario : Usuario[];\n  userAutenticado : boolean = false; \n  \n  displayedColumns = ['id','nome','login','empresaid','grupoUsuarioid','bloqueado','action']  \n \n  constructor(\n              public dialog : MatDialog,\n              public overlay : Overlay,\n              private serviceEmpresa: ServiceAllService<Empresa>,\n              private serviceUsuario : ServiceAllService<Usuario>,\n              private _utilService : UtilService, \n              private router : Router,\n\n             ) \n             { }\n\n\n  ngOnInit(): void {\n     this.getUser();\n  }\n  \n\n\n  addUsuario(): void{\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioCreateComponent, {\n          width : '700px',\n          height : '820px',\n          scrollStrategy\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de usuários\",true);\n    }\n  }\n\n\n  editarUsuario(id : string): void{\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioUpdateComponent, {\n          width : '700px',\n          height : '670px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de usuários\",true);\n    }\n  }\n\n\n  deletarUsuario(id : string): void{\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioDeleteComponent, {\n          width : '500px',\n          height : '260px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de usuários\",true);\n    }\n  }\n\n\n  async getUser() {\n      \n      let filtroUsuario = (<HTMLSelectElement>document.getElementById('busca')).value;\n\n      let empId = this._utilService.Sessao().IdEmpresa;\n      let grpId = Number(this._utilService.Sessao().GrupoUsuario);\n      let logado =  Number(this._utilService.Sessao().UsuarioId);\n      this.userAutenticado = grpId == TipoUsuario.Usuario ? false : true;\n  \n      this.serviceUsuario.read(Endpoint.Usuario).subscribe(u =>{\n        u = u;\n        let responseUsuarios = u;\n\n        let usuarioFIltrados = new Array();\n         \n        if (filtroUsuario){\n           \n          for (let index = 0; index < responseUsuarios.length; index++) {\n            const element = responseUsuarios[index];\n              if (element.nome.toLowerCase().includes(filtroUsuario.toLowerCase()))\n                usuarioFIltrados.push(element);\n          }\n          responseUsuarios = new Array();\n          responseUsuarios = usuarioFIltrados;    \n        }\n\n        this.serviceEmpresa.read(Endpoint.Empresa).subscribe(e => {\n          e = e;     \n          let responseEmpresa = e;\n\n          this.usuario = new Array();\n          let empresaID = null;\n          let idEmpresa = null;\n          let IdEmpresaPai = null;\n\n          for (let index = 0; index < responseUsuarios.length; index++) {\n            const usr = responseUsuarios[index];\n            \n                  for (let index = 0; index <  responseEmpresa.length; index++) {\n                    const emp =  responseEmpresa[index];\n                    \n                    if(usr.empresaid == emp.id.toString().trim())\n                    {\n                      empresaID = emp.id;\n                      usr.empresaid = emp.razaoSocial;\n                      usr.grupoUsuarioid = usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpAdm\") ? \"Administrador\"\n                                         : usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpsis\") ? \"Sistema\" \n                                         : usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpUs\") ? \"Usuario\" \n                                         : usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpMs\") ? \"Master\" \n                                         : usr.grupoUsuarioid;\n\n                      idEmpresa = emp.id;\n                      IdEmpresaPai = emp.empresaPai;\n                      \n                        if(grpId == TipoUsuario.Administrador)\n                        {\n                          this.usuario.push(usr);\n                            break;  \n                          }\n                          else if(grpId == TipoUsuario.Master)\n                          { \n                            if(idEmpresa == empId || IdEmpresaPai == empId && usr.grupoUsuarioid != \"Administrador\")\n                            {\n                              this.usuario.push(usr);\n                              empresaID = null;\n                              idEmpresa = null;\n                              break;\n                            }\n                          }\n                          else if(grpId == TipoUsuario.Usuario)\n                          { \n                            \n                            if(idEmpresa == empId && usr.id == logado)\n                            {\n                              this.usuario.push(usr);\n                              empresaID = null;\n                              idEmpresa = null;\n                              break;\n                            }\n                            \n                          }\n\n                        }\n                  }\n          }\n      })\n  })\n   \n  \n }\n  \n\n}\n\n\n\n","import { TipoUsuario, TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Usuario } from '../../../models/usuarios/modelLogin';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { UsuarioReadComponent } from '../usuario-read/usuario-read.component';\n\n\n\n@Component({\n  selector: 'app-usuario-update',\n  templateUrl: './usuario-update.component.html',\n  styleUrls: ['./usuario-update.component.css']\n})\nexport class UsuarioUpdateComponent implements OnInit {\n\n  empresa : Empresa[];\n  dadosEmpresa : Empresa;\n  usuario : Usuario ;\n  userAutenticado : boolean = false; \n  \n  comboTipousuario = [];\n  UsuarioReadComponent: any;\n\n\n  constructor(private usarioService : ServiceAllService<Usuario>,\n             private empresaService : ServiceAllService<Empresa>,\n             private utilService: UtilService,\n             private router : Router,\n             public dialogRef : MatDialogRef<UsuarioUpdateComponent>,\n             ) { }\n\n  ngOnInit(): void {\n    this.buscarUsuario();\n    this.buscarEmpresa();\n\n  }\n\n  updateUsuario() : void {\n  \n        let grpId = Number(localStorage.getItem(\"grpUs\"));\n        this.usuario.grupoUsuarioid = this.usuario.grupoUsuarioid == \"Administrador\" ? TipoUsuario.Administrador.toString() \n                                        :this.usuario.grupoUsuarioid == \"Sistema\" ? TipoUsuario.Sistema.toString()\n                                        : this.usuario.grupoUsuarioid == \"Usuario\" ? TipoUsuario.Usuario.toString()\n                                        : this.usuario.grupoUsuarioid == \"Master\" ? TipoUsuario.Master.toString()\n                                        : null \n          \n            this.usarioService.read(Endpoint.Usuario).subscribe(user => {\n              user = user;\n                                    \n              let ativo = user.filter(x => x.login.toLowerCase() == this.usuario.login.toLowerCase() && x.empresaid == this.usuario.empresaid && x.id == this.usuario.id);\n          \n                if (ativo.length > 0 )\n                {\n                    this.usarioService.update(this.usuario, Endpoint.Usuario).subscribe(() => {\n                      this.utilService.showMessage(\"Usuário Atualizado com Sucesso!\")\n                      this.fecharPopup();\n                      this.utilService.atualizaRota();\n                    })\n                    user =  new Array();\n                  }else if(grpId == TipoUsuario.Administrador){\n                      \n                    this.usarioService.update(this.usuario, Endpoint.Usuario).subscribe(() => {\n                        this.utilService.showMessage(\"Usuário Atualizado com Sucesso!\")\n                        this.fecharPopup();\n                        this.utilService.atualizaRota();\n                        \n                      })\n                      user =  new Array();\n                  }else{\n\n                    this.utilService.showMessage('A empresa do Usuário não pode ser Alterada', false);\n                    this.usuario.login =  null; \n                    user =  new Array();\n                }\n            })\n\n  }\n\n  buscarEmpresa() {\n    \n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    this.empresaService.read(Endpoint.Empresa).subscribe(emp => {\n      emp = emp;\n\n      this.empresa =  new Array()\n\n       grpId==TipoUsuario.Administrador ? this.empresa = emp : \n                      grpId == TipoUsuario.Master && emp.filter(x => x.id == Number(empId))\n                      || grpId == TipoUsuario.Usuario && emp.filter(x => x.id == Number(empId))\n                      || emp.filter(x => x.empresaPai == Number(empId));\n                   \n    \n      \n    /*  emp.forEach(empresasCarregadas => {\n        \n        if(grpId == TipoUsuario.Administrador)\n          this.empresa.push(empresasCarregadas)\n        else if (grpId == TipoUsuario.Master && empId == empresasCarregadas.id.toString() || grpId == TipoUsuario.Usuario && empId == empresasCarregadas.id.toString() || empId == empresasCarregadas.empresaPai.toString())\n            this.empresa.push(empresasCarregadas)\n        });\n      */  \n\n    });\n  }\n\n  buscarUsuario(){\n\n      this.usarioService.readById(this.dialogRef.id, Endpoint.Usuario).subscribe(usuario => {\n      this.usuario = usuario;\n\n      let tipousuario = usuario.grupoUsuarioid;\n      this.usuario.grupoUsuarioid = this.usuario.grupoUsuarioid == TipoUsuario.Administrador.toString() ? \"Administrador\"\n                                   :this.usuario.grupoUsuarioid == TipoUsuario.Sistema.toString()  ? \"Sistema\"\n                                   : this.usuario.grupoUsuarioid == TipoUsuario.Usuario.toString()  ? \"Usuario\" \n                                   : this.usuario.grupoUsuarioid == TipoUsuario.Master.toString()  ? \"Master\" \n                                   : null \n     \n     this.carregarComboTipoUsuario(this.usuario.grupoUsuarioid, tipousuario); \n    });\n  }\n\n  carregarComboTipoUsuario(usuario : string, tipousuario : string) : void  {\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    \n      for (var tipo in TipoUsuario) {\n      \n           if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Administrador ) {\n    \n              this.comboTipousuario.push(tipo)\n              \n            }\n            else if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Master ){\n    \n            if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Master || TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n                this.comboTipousuario.push(tipo);\n          \n            }\n            else if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Usuario ){\n      \n              if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n                  this.comboTipousuario.push(tipo);\n            \n            }\n      }\n  }\n\n  fecharPopup(): void{\n    this.dialogRef.close();\n  }\n\n\n\n}\n","<mat-card>\n    <mat-card-title>Alterar Usuário</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"usuario.nome\" name=\"nome\">\n            </mat-form-field>\n            \n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Senha\" type=\"password\"\n                [(ngModel)]=\"usuario.senha\" name=\"senha\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Tipo de Usuário\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.grupoUsuarioid\" placeholder=\"GrupoUsuarioID\">\n                         <mat-option *ngFor=\"let tipo of comboTipousuario\" [value]=\"tipo\">\n                        {{tipo}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.empresaid\" placeholder=\"EmpresaID\">\n                    <mat-option *ngFor=\"let dadosEmpresa of empresa\" [value]=\"dadosEmpresa.id\">\n                       {{dadosEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Bloqueado\">\n                    <input name=\"status\" [(ngModel)]=\"usuario.bloqueado\" [checked]=\"usuario.bloqueado\" type=\"checkbox\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Profissional\">\n                    <input name=\"profissional\" [(ngModel)]=\"usuario.profissional\" [checked]=\"usuario.profissional\" type=\"checkbox\">\n            </mat-form-field>\n\n      \n        </form>\n\n        <button *ngIf=\"usuario.nome && usuario.login && usuario.grupoUsuarioid && usuario.empresaid\" mat-raised-button (click)=\"updateUsuario()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-usuario',\n  templateUrl: './usuario.component.html',\n  styleUrls: ['./usuario.component.css']\n})\nexport class UsuarioComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>usuario works!</p>\n","import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appRed]'\n})\nexport class RedDirective {\n\n  constructor(private el: ElementRef) { \n    el.nativeElement.style.color = '#e35e6b';\n  }\n\n}\n","\r\n\r\nexport class Sala {\r\n    id? : null\r\n    dtCriacao : Date\r\n    nomeSala     : string\r\n    empresaid : number\r\n    unidadeid : number\r\n    criadoPor : number\r\n    ativo : boolean\r\n}","export class Unidade {\r\n    id? : number\r\n    dtCriacao : Date\r\n    nomeUnidade : string\r\n    empresaid : number\r\n    criadoPor : number\r\n    bloqueado : boolean\r\n}","export class Acesso{\r\n    login : string\r\n    senha : string\r\n    nome : string\r\n}","export class Product {\r\n    id ?: number\r\n    dtCriacao : Date\r\n    criadoPor : number\r\n    nome: string\r\n    valor : number\r\n    empresaid : string\r\n    bloqueado : boolean\r\n}","export class GrupoUsuario{\r\n    id? : number\r\n    dtCriacao : Date\r\n    nome : string\r\n    usuarioApp : boolean\r\n    empresaId : number\r\n    criadoPor : number\r\n    bloqueado : boolean\r\n\r\n}","import { convertActionBinding, ConvertActionBindingResult } from '@angular/compiler/src/compiler_util/expression_converter';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport enum TipoUsuario {\r\n    \r\n    Administrador =  Number(localStorage.getItem(\"grpUsGrpAdm\")),\r\n    Sistema = Number(localStorage.getItem(\"grpUsGrpsis\")),\r\n    Usuario = Number(localStorage.getItem(\"grpUsGrpUs\")),\r\n    Master = Number(localStorage.getItem(\"grpUsGrpMs\")),\r\n}\r\n\r\nexport const TipoUsuarioSistema = new Map<string, number>([\r\n['Administrador', Number(localStorage.getItem(\"grpUsGrpAdm\"))],\r\n['Sistema', Number(localStorage.getItem(\"grpUsGrpsis\"))],\r\n['Usuario', Number(localStorage.getItem(\"grpUsGrpUs\"))],\r\n['Master', Number(localStorage.getItem(\"grpUsGrpMs\"))]\r\n])\r\n","export class Usuario {\r\nid ? : number\r\ndtCriacao : Date\r\nnome : string\r\nlogin : string\r\nsenha : string\r\ncracha : string\r\nbolSistema: boolean\r\nbolResetaSenha : boolean\r\ndataTrocaSenha : Date\r\ncriadoPor : number\r\nbloqueado : boolean\r\nempresaid : string\r\ngrupoUsuarioid : string\r\nprofissional : boolean\r\n}\r\n","import { GrupoUsuario } from './../models/usuarios/GrupoUsuarios';\nimport { ServiceAllService } from './service-all.service';\nimport { Endpoint } from './../Negocio/Endpoint';\nimport { TipoUsuario, TipoUsuarioSistema } from './../models/usuarios/enumUsuarios';\nimport { ObjetoToken } from './../models/Token/ObjetoToken';\nimport { Empresa } from './../models/empresa/ModelEmpresa';\nimport { Acesso } from '../models/acessoModel';\nimport { UtilService } from './util.service';\n\nimport { environment } from './../../environments/environment';\n\nimport { map, catchError, take, retry } from 'rxjs/operators';\nimport { Observable, EMPTY, from, empty, pipe } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Router } from '@angular/router';\nimport { Injectable, EventEmitter  } from '@angular/core';\nimport { stringify } from 'querystring';\nimport { Token } from '@angular/compiler/src/ml_parser/lexer';\nimport { STRING_TYPE } from '@angular/compiler';\n\nconst httpOptions = {\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  title = 'multiple-env-demo';\n  environmentName = '';\n  environmentUrl = 'Debug api';\n  acesso : Acesso = new Acesso();\n  objetoToken : ObjetoToken []\n\n  private tipoUsuarios = [];\n\n  private usuarioAutenticado: boolean = false; \n\n  mostrarMenuEmitter = new EventEmitter<boolean>();\n  mostrarLoginEmitter = new EventEmitter<boolean>();\n  \n\n  constructor(private router: Router,\n              private snackbar : MatSnackBar,\n              private http: HttpClient,\n              private utilService : UtilService,\n               \n              ) { \n                this.environmentName = environment.environmentName;\n              this.environmentUrl =  environment.BASE_URL;\n              }\n\n  async logarSistema(acesso: Acesso) {\n    \n    try {\n      let response = await this.http.post<ObjetoToken>(this.environmentUrl + Endpoint.Token, acesso).toPromise()\n     \n\n       if (response != null && !response.bloqueado && !response.statusEmpresa && !response.erroLogin )\n          {\n\n            this.mostrarMenuEmitter.emit(true);\n            this.mostrarLoginEmitter.emit(false)\n            this.usuarioAutenticado = true;\n            this.router.navigate(['/']);\n\n            localStorage.setItem(\"tId\", response.token )\n            localStorage.setItem(\"usId\", response.id)\n            localStorage.setItem(\"grpUs\", response.grupoUsuarioid)\n           \n            localStorage.setItem(\"stUs\", response.bloqueado);\n            localStorage.setItem(\"empId\", response.empresaid);\n            this.utilService.showMessage(\"Seja Bem Vindo!  \" + acesso.login , false);\n\n            response.gruposUsuarios.forEach(element => {\n\n              if (element.nome == \"Administrador\")\n                  localStorage.setItem(\"grpUsGrpAdm\", element.id.toString())\n              else if (element.nome == \"Sistema\")\n                  localStorage.setItem(\"grpUsGrpsis\", element.id.toString())\n              else if (element.nome == \"Usuario\")\n                  localStorage.setItem(\"grpUsGrpUs\", element.id.toString())\n              else if (element.nome == \"Master\")\n                  localStorage.setItem(\"grpUsGrpMs\", element.id.toString())\n            });\n            \n          }\n          else\n          {\n            this.usuarioAutenticado = false;\n            this.mostrarMenuEmitter.emit(false);\n            this.mostrarLoginEmitter.emit(true);\n            \n            if (response.bloqueado)\n              this.utilService.showMessage(\"Usuário bloqueado!\", true);\n            else if (response.statusEmpresa)\n              this.utilService.showMessage(\"Empresa bloqueada!\", true);\n            else \n              this.utilService.showMessage(\"Usuário ou senha Inválido!\", true);\n        }\n      \n      } catch (e) {\n     \n          this.utilService.showMessage(\"Erro de acesso a API\" + e.message, true);\n      }\n    \n  }\n  sairSistema(){\n    this.mostrarMenuEmitter.emit(false);\n    this.mostrarLoginEmitter.emit(true)\n    localStorage.removeItem(\"tId\");\n    localStorage.removeItem(\"usId\");\n    localStorage.removeItem(\"grpUs\");\n    localStorage.removeItem(\"stUs\");\n    localStorage.removeItem(\"empId\");\n    this.utilService.showMessage(\"Até logo! \", false);\n    this.router.navigate(['/login']);\n  }\n\n  header(){\n    var reqHeader = new HttpHeaders({ \n        'Content-Type' : 'application/json; charset=utf-8',\n        'Accept'       : 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('tId')\n    })\n    return { headers: reqHeader };\n  }\n\n  TipoUsuarioSistema(){\n    \n    TipoUsuarioSistema.forEach(element => {\n      this.tipoUsuarios.push(element)\n    });\n   return this.tipoUsuarios;\n  }\n  \n}\n\n\n\n\n\n","import { LoginService } from 'src/app/services/login.service';\n\nimport { UtilService } from './util.service';\nimport { environment } from '../../environments/environment';\nimport { Component } from '@angular/core';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Product } from '../models/produtos/product.model';\nimport { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  title = '';\n  environmentName = '';\n  environmentUrl = '';\n   \nconstructor(private snackbar : MatSnackBar,\n              private http : HttpClient,\n              private utilService: UtilService,\n              private loginservice : LoginService\n              \n             ) { \n              this.environmentName = environment.environmentName;\n              this.environmentUrl =  environment.BASE_URL + '/Produto';\n             }\n\n    //Criar um produto\n    create(product : Product): Observable<Product>{\n      return this.http.post<Product>(this.environmentUrl, product, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n    \n    // Buscar todos Get All\n    read(): Observable<Product[]>{\n      return this.http.get<Product[]>(this.environmentUrl, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      ); \n    }\n\n   //Buscar um produto por id\n   readById(id: string): Observable<Product>{\n    const url = `${this.environmentUrl}/${id}`\n\n      return this.http.get<Product>(url, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n   }\n\n   // Atualizar Produto \n   update(product: Product): Observable<Product> {    \n    return this.http.put<Product>(this.environmentUrl, product, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n    );\n   }\n\n   delete(id: number) : Observable<Product>{\n    const url = `${this.environmentUrl}/${id}`      \n    return this.http.delete<Product>(url, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n    );\n\n   }\n\n}\n","import { map, catchError, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { LoginService } from 'src/app/services/login.service';\nimport { UtilService } from './util.service';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceAllService <T>{\n\n  title = '';\n  environmentName = '';\n  environmentUrl = '';\n\n  constructor(\n    private snackbar : MatSnackBar,\n              private http : HttpClient,\n              private utilService: UtilService,\n              private loginservice : LoginService\n              ) {\n                this.environmentName = environment.environmentName;\n                this.environmentUrl =  environment.BASE_URL;\n              }\n\n\n    //Criar Cadastro\n    create(T : T, tipo: string) : Observable <T>{\n      return this.http.post<T>(this.environmentUrl + tipo , T, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    // Buscar todos Get All\n    read(tipo: string): Observable<T[]>{\n      return this.http.get<T[]>(this.environmentUrl + tipo, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      ); \n    }\n\n    //Buscar um cadastro por id\n    readById(id: string, tipo: string): Observable<T>{\n    const url = `${this.environmentUrl + tipo}/${id}`\n\n      return this.http.get<T>(url, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    // Atualizar Produto \n    update(T: T, tipo: string): Observable<T> {    \n    return this.http.put<T>(this.environmentUrl + tipo, T, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    delete(id: number, tipo : string) : Observable<T>{\n      const url = `${this.environmentUrl + tipo}/${id}`      \n      return this.http.delete<T>(url, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n      );\n\n    }\n\n}\n","import { HeaderService } from './../components/template/header/header.service';\nimport { ObjetoToken } from './../models/Token/ObjetoToken';\n\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, EMPTY } from 'rxjs';\nimport { Component, Injectable } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TipoUsuario } from '../models/usuarios/enumUsuarios';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { isNull } from '@angular/compiler/src/output/output_ast';\nimport { isNullOrUndefined } from 'util';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilService {\n\n  constructor(private snackbar : MatSnackBar,\n             private http : HttpClient,\n             private headerService : HeaderService,\n             private router : Router,\n             public overlay : Overlay,\n             public dialog : MatDialog\n\n             ) { }\n\n\n  showMessage(msg : string, isErro: boolean = false) : void { \n    this.snackbar.open(msg, 'X' , { \n      duration : 3000,\n      horizontalPosition: \"right\",\n      verticalPosition : \"top\",\n      panelClass : isErro ? ['msg-error'] : ['msg-sucess']\n    })\n\n}\n\n  erroHandler(e: any) : Observable<any>{\n    this.showMessage(\"Erro ao Acessar a API!\", true )\n    return EMPTY \n  }\n\n  convertToBase64(txt : string){\n    return btoa(txt);\n  }\n\n  convertBase64toText(txt: string){\n    return atob(txt);\n\n  }\n\n  AtualizarMenu(titulo : string, icone : string, urlIcone : string ) {\n      this.headerService.headerData.title = titulo ;\n      this.headerService.headerData.icon = icone\n      this.headerService.headerData.routeUrl = urlIcone\n  \n  }\n\n  Sessao(){\n    \n    let chaveEntrada = this.convertBase64toText(\"123\");\n    \n    var dados =  {\n        IdEmpresa : localStorage.getItem(\"empId\"),\n        GrupoUsuario : Number(localStorage.getItem(\"grpUs\")),\n        UsuarioId : Number(localStorage.getItem(\"usId\")),\n        StatusUsuario : localStorage.getItem(\"stUs\"),\n        TokenSessao : chaveEntrada \n\n    }\n    return dados\n  }\n\n\n  atualizaRota() {\n    this.router.routeReuseStrategy.shouldReuseRoute = function(){return false;};\n  \n    let currentUrl = this.router.url + '?';\n  \n    this.router.navigateByUrl(currentUrl, {skipLocationChange: true})\n      .then(() => {\n        this.router.navigate([this.router.url]);\n      });\n  \n\n\n\n  \n  \n    }\n\n  Popup(id : string, T : any, largura : string, altura: string ): void {\n   \n    const scrollStrategy = this.overlay.scrollStrategies.reposition();\n    const dialogRef = this.dialog.open(T, {\n        width : largura,\n        height : altura,\n        scrollStrategy,\n        id\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        console.log(`Dialog result: ${result}`);\n      });\n\n  }\n\n}","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-crud',\n  templateUrl: './chamado-crud.component.html',\n  styleUrls: ['./chamado-crud.component.css']\n})\nexport class ChamadoCrudComponent implements OnInit {\n\n  constructor(private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  navigateToChamadoCreate():void{\n    this.router.navigate(['chamados/read'])\n  }\n\n}\n","<button mat-raised-button (click)=\"navigateToChamadoCreate()\"\n        color=\"primary\" > \n        Novo\n</button>\n\n\n<app-chamado-read></app-chamado-read>\n\n","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-empresa',\n  templateUrl: './empresa.component.html',\n  styleUrls: ['./empresa.component.css']\n})\nexport class EmpresaComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  navigateToEmpresaCreate() : void {\n    this.router.navigate(['empresa/create'])\n  }\n\n\n}\n","<app-empresa-read></app-empresa-read>\n\n","import { UtilService } from './../../services/util.service';\nimport { TipoUsuario } from './../../models/usuarios/enumUsuarios';\nimport { Endpoint } from './../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { HeaderService } from './../../components/template/header/header.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ok } from 'assert';\nimport { Product } from 'src/app/models/produtos/product.model';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\nprodutos : Product[];\n\n\n  constructor(private serviceProdutos : ServiceAllService<Product>,\n              private headerService : HeaderService,\n              private utilService : UtilService\n              ) \n              {\n               // this.headerService.headerData = {\n               //  title : 'Início',\n              //    icon : 'home',\n              //    routeUrl : ''\n               // }\n              }\n\n  ngOnInit(): void {\n    this.ObterComponentes();\n    this.utilService.AtualizarMenu(\"Início\",\"home\",'');\n  }\n  \n  \n  ObterComponentes(){\n     \n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    this.serviceProdutos.read(Endpoint.Produto).subscribe(prod => {\n      prod = prod;\n\n      this.produtos = new Array();\n        prod.forEach(element => {\n          if (empId == element.empresaid)\n              this.produtos.push(element)\n        });\n    });\n  }\n}\n","<mat-card class=\"home mat-elevation-z3\">\n    <mat-card-title class=\"title\">\n        Bem Vindo\n    </mat-card-title>\n</mat-card>\n\n<div class=\"content\">\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\n      <div fxFlex=\"10%\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let prod of produtos\">\n        <mat-card  class=\"tamanhoCard\">\n            <mat-card-header></mat-card-header>\n                <mat-card-title>\n                    {{prod.nome}} \n                    <a *ngIf=\"!prod.bloqueado\" mat-list-item routerLink=\"{{prod.nome}}\" >\n                        <i class=\"material-icons\" >\n                            schedule\n                        </i>\n                    </a>\n                    <a *ngIf=\"prod.bloqueado\" >\n                        <i class=\"material-icons\" >\n                            block\n                        </i>\n                    </a>\n                </mat-card-title>\n            <mat-card-footer  >\n            </mat-card-footer>\n\n        </mat-card>\n      </div>\n    </div>\n  </div>","import { HeaderService } from './../../components/template/header/header.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router} from '@angular/router';\n\n\n@Component({\n  selector: 'app-product-crud',\n  templateUrl: './product-crud.component.html',\n  styleUrls: ['./product-crud.component.css']\n})\nexport class ProductCrudComponent implements OnInit {\n\n  constructor(private router : Router,\n             private headerService : HeaderService\n             ) { \n\n    this.headerService.headerData = {\n      title : 'Cadastro de Produtos',\n      icon : 'storefront',\n      routeUrl : '/products'\n    }\n\n\n  }\n\n  ngOnInit(): void {\n  }\n\nnavigateToProductsCreate() : void {\n  this.router.navigate(['products/create'])\n}\n\n}\n","<app-product-read></app-product-read>\n\n","import { stringify } from 'querystring';\nimport { query } from '@angular/animations';\nimport { UsuarioReadComponent } from './../../components/usuario/usuario-read/usuario-read.component';\nimport { Empresa } from './../../models/empresa/ModelEmpresa';\nimport { Endpoint } from './../../Negocio/Endpoint';\nimport { UsuarioService } from './../../services/usuario.service';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\n\n@Component({\n  selector: 'app-usuario-crud',\n  templateUrl: './usuario-crud.component.html',\n  styleUrls: ['./usuario-crud.component.css']\n})\nexport class UsuarioCrudComponent implements OnInit {\n\n  constructor(\n              private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  \n}\n","<app-usuario-read></app-usuario-read>\n\n\n\n\n\n","export const environment = {\n  production: false,\n  environmentName: \"QA\",\n  apiUrl:  'http://localhost:5000',\n  BASE_URL : '/api'\n\n\n};\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}