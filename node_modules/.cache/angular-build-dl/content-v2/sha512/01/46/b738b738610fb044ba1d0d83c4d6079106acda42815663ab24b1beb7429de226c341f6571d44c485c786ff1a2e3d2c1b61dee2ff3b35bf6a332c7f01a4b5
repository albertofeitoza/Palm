{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-alterar-unidade/agenda-alterar-unidade.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-alterar-unidade/agenda-alterar-unidade.component.html","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component.html","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-excluir-unidade/agenda-excluir-unidade.component.ts","webpack:///src/app/Aplicacoes/agenda/Unidade/agenda-excluir-unidade/agenda-excluir-unidade.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-create/agenda-create.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-create/agenda-create.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-delete/agenda-delete.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-delete/agenda-delete.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-read/agenda-read.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-read/agenda-read.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-update/agenda-update.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-update/agenda-update.component.html","webpack:///src/app/Aplicacoes/agenda/home-agenda/home-agenda.component.ts","webpack:///src/app/Aplicacoes/agenda/home-agenda/home-agenda.component.html","webpack:///src/app/Negocio/Aplicacao.ts","webpack:///src/app/Negocio/Endpoint.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.conponent.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/chamados/chamado-create/chamado-create.component.ts","webpack:///src/app/components/chamados/chamado-create/chamado-create.component.html","webpack:///src/app/components/chamados/chamado-delete/chamado-delete.component.ts","webpack:///src/app/components/chamados/chamado-delete/chamado-delete.component.html","webpack:///src/app/components/chamados/chamado-read/chamado-read.component.ts","webpack:///src/app/components/chamados/chamado-read/chamado-read.component.html","webpack:///src/app/components/chamados/chamado-update/chamado-update.component.ts","webpack:///src/app/components/chamados/chamado-update/chamado-update.component.html","webpack:///src/app/components/empresa/empresa-create/empresa-create.component.ts","webpack:///src/app/components/empresa/empresa-create/empresa-create.component.html","webpack:///src/app/components/empresa/empresa-delete/empresa-delete.component.ts","webpack:///src/app/components/empresa/empresa-delete/empresa-delete.component.html","webpack:///src/app/components/empresa/empresa-read/empresa-read.component.ts","webpack:///src/app/components/empresa/empresa-read/empresa-read.component.html","webpack:///src/app/components/empresa/empresa-update/empresa-update.component.ts","webpack:///src/app/components/empresa/empresa-update/empresa-update.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/product/product-create/product-create.component.ts","webpack:///src/app/components/product/product-create/product-create.component.html","webpack:///src/app/components/product/product-delete/product-delete.component.ts","webpack:///src/app/components/product/product-delete/product-delete.component.html","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos-datasource.ts","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos.component.ts","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos.component.html","webpack:///src/app/components/product/product-read/product-read.component.ts","webpack:///src/app/components/product/product-read/product-read.component.html","webpack:///src/app/components/product/product-update/product-update.component.ts","webpack:///src/app/components/product/product-update/product-update.component.html","webpack:///src/app/components/template/footer/footer.component.ts","webpack:///src/app/components/template/footer/footer.component.html","webpack:///src/app/components/template/header/header.component.ts","webpack:///src/app/components/template/header/header.component.html","webpack:///src/app/components/template/header/header.service.ts","webpack:///src/app/components/template/nav/nav.component.ts","webpack:///src/app/components/template/nav/nav.component.html","webpack:///src/app/components/usuario/usuario-create/usuario-create.component.ts","webpack:///src/app/components/usuario/usuario-create/usuario-create.component.html","webpack:///src/app/components/usuario/usuario-delete/usuario-delete.component.ts","webpack:///src/app/components/usuario/usuario-delete/usuario-delete.component.html","webpack:///src/app/components/usuario/usuario-read/usuario-read.component.html","webpack:///src/app/components/usuario/usuario-read/usuario-read.component.ts","webpack:///src/app/components/usuario/usuario-update/usuario-update.component.ts","webpack:///src/app/components/usuario/usuario-update/usuario-update.component.html","webpack:///src/app/components/usuario/usuario.component.ts","webpack:///src/app/components/usuario/usuario.component.html","webpack:///src/app/diretivas/red.directive.ts","webpack:///src/app/models/Unidade/unidadeModel.ts","webpack:///src/app/models/acessoModel.ts","webpack:///src/app/models/usuarios/GrupoUsuarios.ts","webpack:///src/app/models/usuarios/enumUsuarios.ts","webpack:///src/app/models/usuarios/modelLogin.ts","webpack:///src/app/services/login.service.ts","webpack:///src/app/services/product.service.ts","webpack:///src/app/services/service-all.service.ts","webpack:///src/app/services/util.service.ts","webpack:///src/app/views/chamado-crud/chamado-crud.component.ts","webpack:///src/app/views/chamado-crud/chamado-crud.component.html","webpack:///src/app/views/empresa/empresa.component.ts","webpack:///src/app/views/empresa/empresa.component.html","webpack:///src/app/views/home/home.component.ts","webpack:///src/app/views/home/home.component.html","webpack:///src/app/views/product-crud/product-crud.component.ts","webpack:///src/app/views/product-crud/product-crud.component.html","webpack:///src/app/views/usuario-crud/usuario-crud.component.ts","webpack:///src/app/views/usuario-crud/usuario-crud.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AgendaAlterarUnidadeComponent","selector","templateUrl","styleUrls","AgendaCadastroUnidadeComponent","dialog","servico","ServicoUnidade","Colunas","unidade","novaUnidade","buscarUnidade","criadoPor","Sessao","UsuarioId","dtCriacao","Date","empresaid","Number","IdEmpresa","create","Unidade","subscribe","showMessage","atualizaRota","vlrTxt","read","un","unidades","filter","x","toString","nomeUnidade","toLowerCase","includes","Popup","close","keyEvent","which","document","getElementById","value","AgendaExcluirUnidadeComponent","AgendaCreateComponent","route","dialogRef","overlay","_serviceAgenda","_serviceUnidade","_serviceSala","_serviceGrupoAgenda","_serviceUsuario","_utilService","agenda","DtCriacao","nomeAgenda","profissionalid","Empresaid","unidadeid","salaid","substituicao","grupoAgendaid","vigenciaInicio","vigenciaFim","considerarFeriado","bloqueado","carregaCombos","Agenda","ag","navigate","carregaComboProfissional","GrupoUsuario","carregaComboUnidade","carregaComboSala","carregaComboGrupoAgenda","grpId","empId","Usuario","pro","comboProfissional","Master","Administrador","comboUnidade","Sala","sl","comboSala","GrupoAgenda","ga","comboTipoGrupoAgenda","scrollStrategy","scrollStrategies","reposition","open","width","height","afterClosed","result","console","log","novoUsuario","fecharPopup","AgendaDeleteComponent","dialgRef","serviceAgenda","utilService","buscarAgendaByid","readById","ExcluirAgenda","AgendaReadComponent","_repAgenda","AtualizarMenu","buscarAgenda","filtroAgenda","empresaId","addNovaAgenda","addUnidade","AgendaUpdateComponent","router","agendaService","serviceUnidade","serviceSala","serviceGrupoAGenda","serviceEmpresa","serviceUsuario","buscarAgendaPorId","agId","pr","update","HomeAgendaComponent","Aplicacao","TipoAplicacao","Map","Endpoint","routes","path","component","children","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","authService","nome","mostrarMenu","mostrarlogin","mostrarMenuEmitter","mostrar","mostrarLoginEmitter","mostrarLogin","AppModule","provide","useValue","declarations","providers","bootstrap","ChamadoCreateComponent","ChamadoDeleteComponent","ChamadoReadComponent","ChamadoUpdateComponent","EmpresaCreateComponent","servicoEmpresa","dialofRef","empresa","cnpj","razaoSocial","nomeFantasia","inscricaoEstadual","inscricaoMunicipal","cnes","codPIS","observacao","codCnae","empresaPai","empPai","isValid","Empresa","bemp","retornoEmp","retornomaster","length","emp","localStorage","getItem","EmpresaDeleteComponent","mensagem","utilservice","BuscarEmpresa","existeUsuario","usr","excluirEmpresa","EmpresaReadComponent","displayedColumns","buscarEmpresa","filtroEmpresa","Array","forEach","element","push","master","empresaFIltrada","index","addEmpresa","EmpresaUpdateComponent","empresaService","usuariologado","ObterEmpresa","error","LoginComponent","authservice","acesso","logarSistema","ProductCreateComponent","ProdutoEmpresa","ServiceEmpresa","matDialogref","comboProduto","product","valor","buscarProduto","Produto","p","ativo","associarProdutoEmpresa","ProductDeleteComponent","productService","deleteProduto","deleteProduct","EXAMPLE_DATA","name","ProductReadTableprodutosDataSource","data","dataMutations","paginator","page","sort","sortChange","pipe","getPagedData","getSortedData","startIndex","pageIndex","pageSize","splice","active","direction","a","b","isAsc","compare","ProductReadTableprodutosComponent","dataSource","table","ProductReadComponent","serviceProduto","products","addProduto","ProductUpdateComponent","ProdutoService","matdialogRef","updateProduct","FooterComponent","HeaderComponent","headerService","headerData","title","icon","routeUrl","HeaderService","_headerData","next","providedIn","NavComponent","auth","opened","lock","validarAcesso","sairSistema","UsuarioCreateComponent","serviceGrupoUsuario","serviceLogin","tipoLogin","usuario","criargrupousuario","comboTipousuario","alimentarCombo","grupoUsuarioid","trim","Sistema","user","login","empresasCarregadas","tipo","hasOwnProperty","isNaN","parseInt","get","UsuarioDeleteComponent","usuarioService","carregaUsuario","deleteUsuario","UsuarioReadComponent","userAutenticado","getUser","filtroUsuario","logado","u","responseUsuarios","usuarioFIltrados","responseEmpresa","empresaID","idEmpresa","IdEmpresaPai","addUsuario","UsuarioUpdateComponent","usarioService","buscarUsuario","tipousuario","carregarComboTipoUsuario","UsuarioComponent","RedDirective","el","nativeElement","style","color","Acesso","TipoUsuario","TipoUsuarioSistema","httpOptions","headers","LoginService","snackbar","http","environmentName","environmentUrl","tipoUsuarios","usuarioAutenticado","BASE_URL","post","Token","toPromise","response","statusEmpresa","erroLogin","emit","setItem","token","gruposUsuarios","message","removeItem","reqHeader","ProductService","loginservice","header","obj","erroHandler","url","put","ServiceAllService","T","UtilService","msg","isErro","duration","horizontalPosition","verticalPosition","panelClass","txt","btoa","atob","titulo","icone","urlIcone","chaveEntrada","convertBase64toText","dados","StatusUsuario","TokenSessao","routeReuseStrategy","shouldReuseRoute","currentUrl","navigateByUrl","navigated","largura","altura","ChamadoCrudComponent","navigateToChamadoCreate","EmpresaComponent","HomeComponent","serviceProdutos","ObterComponentes","prod","produtos","ProductCrudComponent","UsuarioCrudComponent","environment","production","apiUrl","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-agenda-alterar-unidade',\n  templateUrl: './agenda-alterar-unidade.component.html',\n  styleUrls: ['./agenda-alterar-unidade.component.css']\n})\nexport class AgendaAlterarUnidadeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>agenda-alterar-unidade works!</p>\n","import { getLocaleDateTimeFormat } from '@angular/common';\nimport { stringify } from '@angular/compiler/src/util';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\nimport { Unidade } from '../../../../models/Unidade/unidadeModel';\n\n\nimport { GrupoUsuario } from '../../../../models/usuarios/GrupoUsuarios';\nimport { AgendaAlterarUnidadeComponent } from '../agenda-alterar-unidade/agenda-alterar-unidade.component';\nimport { AgendaExcluirUnidadeComponent } from '../agenda-excluir-unidade/agenda-excluir-unidade.component';\n\n@Component({\n  selector: 'app-agenda-cadastro-unidade',\n  templateUrl: './agenda-cadastro-unidade.component.html',\n  styleUrls: ['./agenda-cadastro-unidade.component.css']\n})\nexport class AgendaCadastroUnidadeComponent implements OnInit {\n\n  Colunas = ['id','dtCriacao', 'nomeUnidade','bloqueado','action']\n\n\nunidade : Unidade = new Unidade\n\nnovaUnidade : boolean = false;\n\nunidades : Unidade[];\n\n  constructor(\n             public dialog : MatDialogRef<AgendaCadastroUnidadeComponent>,\n             private servico : UtilService,\n             private ServicoUnidade : ServiceAllService<Unidade>\n\n              ) { }\n\n  ngOnInit(): void {\n      this.buscarUnidade(\"\");\n  }\n\n\n  cadUnidade(){\n    this.novaUnidade = true;\n  }\n\n  addUnidade(){\n    \n    this.unidade.criadoPor = this.servico.Sessao().UsuarioId;\n    this.unidade.dtCriacao = new Date;\n    this.unidade.empresaid =  Number(this.servico.Sessao().IdEmpresa);\n    \n    this.ServicoUnidade.create(this.unidade, Endpoint.Unidade).subscribe(() => {\n     this.servico.showMessage(\"Unidade cadastrada com sucesso\", false);\n     this.servico.atualizaRota();\n     this.novaUnidade = false;\n   })\n\n  }\n\n  buscarUnidade(vlrTxt : string){\n    \n    this.ServicoUnidade.read(Endpoint.Unidade).subscribe(un => {\n      this.unidades = vlrTxt == null ? un.filter(x => x.empresaid.toString() == this.servico.Sessao().IdEmpresa) :\n                                         un.filter(x => x.empresaid.toString() == this.servico.Sessao().IdEmpresa && x.nomeUnidade.toLowerCase().includes(vlrTxt.toLowerCase()));\n    })\n    \n  }\n\n  AtualizarUnidade(id :string){\n\n    this.servico.Popup(id, AgendaAlterarUnidadeComponent, '500px', '400px');\n\n\n  }\n\n  ExcluirUnidade(id : string){\n    this.servico.Popup(id, AgendaExcluirUnidadeComponent, '500px', '400px');\n\n  }\n\n\n  fecharPopup(){\n      this.dialog.close();\n  }\n  voltar(){\n    this.novaUnidade = false;\n  }\n\n  selecionarUnidade(keyEvent : any){\n\n    if (keyEvent.which === 13 || keyEvent.which == 1){\n      let vlrTxt =  (<HTMLInputElement>document.getElementById('txtbusca')).value;\n      this.buscarUnidade(vlrTxt);\n    }\n    \n    \n  }\n\n}\n","<mat-tab-group>\n    \n    \n    <mat-tab label=\"Cadastro de Unidade\">\n\n        <div class=\"container\">\n                    <mat-card *ngIf=\"novaUnidade\">\n                        <mat-card-title>Nova Unidade</mat-card-title>\n                            <form>\n                                <mat-form-field>\n                                    <input matInput placeholder=\"Nome Unidade\" \n                                    [(ngModel)]=\"unidade.nomeUnidade\" name=\"nomeUnidade\">\n                                </mat-form-field>\n\n                                \n                                <mat-form-field>\n                                    <input matInput placeholder=\"bloqueado\">\n                                        <input name=\"bloqueado\" [(ngModel)]=\"unidade.bloqueado\" [checked]=\"unidade.bloqueado\" type=\"checkbox\">\n                                </mat-form-field>\n\n                            </form>\n                    \n                            <button *ngIf=\"unidade.nomeUnidade\" mat-raised-button (click)=\"addUnidade()\" color=\"primary\" > \n                                Salvar\n                            </button>\n                            \n                            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                              Sair\n                            </button>\n                            <button mat-raised-button (click)=\"voltar()\" color=\"primary\" > \n                              Voltar\n                          </button>\n                    </mat-card>\n\n\n            <mat-card *ngIf=\"!novaUnidade\" >\n                <mat-card-title class=\"titleCard\" >Unidades</mat-card-title>\n\n                <div class=\"mat-elevation-z3\">\n        \n                    <span class=\"botaoBusca\" (click)=\"selecionarUnidade($event)\">\n                        <i class=\"material-icons\">search</i>\n                    </span>\n            \n                    <input class=\"textBusca\"  name=\"busca\" id=\"txtbusca\" type=\"text\" (keypress)=\"selecionarUnidade($event)\" value=\"\">\n\n                    <a (click)=\"cadUnidade()\" class=\"cadUnidade\" >\n                      <i class=\"material-icons\">add</i>\n                    </a>\n                    \n                    <table class=\"tabelaUnidade\" mat-table [dataSource]=\"unidades\">\n                        <!-- Id Column -->\n                        \n                        <ng-container matColumnDef=\"id\">\n                          <th mat-header-cell *matHeaderCellDef>Id</th>\n                          <td mat-cell id=\"idunidade\" *matCellDef=\"let row\">{{row.id}}</td>\n                        </ng-container>\n                    \n                        <!-- Name Column -->\n                        <ng-container matColumnDef=\"dtCriacao\">\n                          <th mat-header-cell *matHeaderCellDef>Criado Em</th>\n                          <td mat-cell *matCellDef=\"let row\">{{row.dtCriacao | date: 'dd/MM/yyyy hh:mm:ss'}}</td>\n                        </ng-container>\n                        \n                        <!-- Name Column -->\n                        <ng-container matColumnDef=\"nomeUnidade\">\n                          <th mat-header-cell *matHeaderCellDef>Nome Unidade</th>\n                          <td mat-cell *matCellDef=\"let row\">{{row.nomeUnidade}}</td>\n                        </ng-container>\n                  \n                       \n                        <!-- status -->\n                        <ng-container matColumnDef=\"bloqueado\">\n                          <th mat-header-cell *matHeaderCellDef>Status</th>\n                            <td mat-cell *matCellDef=\"let row\">\n                              <div *ngIf=\"row.bloqueado == 'Sim'\" >\n                                <i class=\"material-icons\">\n                                  lock\n                                </i>\n                              </div>\n                              <div *ngIf=\"row.bloqueado == 'Não'\" >\n                                <i class=\"material-icons\">  \n                                  lock_open\n                                </i>\n                              </div>\n                            </td>\n                          </ng-container>\n                  \n                        \n                        <!-- Coluna de Ações -->\n                        <ng-container matColumnDef=\"action\">\n                          <th mat-header-cell *matHeaderCellDef>Ações</th>\n                          <td mat-cell *matCellDef=\"let row\">\n                              \n                              <a  (click)=\"AtualizarUnidade(row.id)\" class=\"edit\">\n                                  <i class=\"material-icons\">\n                                      edit\n                                  </i>\n                              </a>\n                              <a (click)=\"ExcluirUnidade(row.id)\" class=\"delete\">\n                                  <i class=\"material-icons\">\n                                      delete\n                                  </i>\n                              </a>\n                              \n                          </td>\n                        </ng-container>\n                    \n                        <tr mat-header-row *matHeaderRowDef=\"Colunas\"></tr>\n                        <tr mat-row *matRowDef=\"let row; columns: Colunas;\"></tr>\n                    </table>\n            \n                  </div>\n                \n                \n                \n              \n\n            </mat-card>\n        </div>\n\n    </mat-tab>  \n    \n    \n    <mat-tab label=\"Cadastro de Sala\">\n\n\n\n    </mat-tab>  \n    <mat-tab label=\"Grupos de Agenda\">\n\n    </mat-tab>\n</mat-tab-group>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-agenda-excluir-unidade',\n  templateUrl: './agenda-excluir-unidade.component.html',\n  styleUrls: ['./agenda-excluir-unidade.component.css']\n})\nexport class AgendaExcluirUnidadeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>agenda-excluir-unidade works!</p>\n","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { Aplicacao } from './../../../Negocio/Aplicacao';\nimport { Router } from '@angular/router';\n\nimport { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { UtilService } from 'src/app/services/util.service';\nimport { TipoUsuario, TipoUsuarioSistema } from 'src/app/models/usuarios/enumUsuarios';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { GrupoAgenda } from 'src/app/models/Agenda/modelGrupoAgenda';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { UsuarioCreateComponent } from 'src/app/components/usuario/usuario-create/usuario-create.component';\n\n@Component({\n  selector: 'app-agenda-create',\n  templateUrl: './agenda-create.component.html',\n  styleUrls: ['./agenda-create.component.css']\n})\nexport class AgendaCreateComponent implements OnInit {\n  \n  agenda : Agenda = {\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    profissionalid: null,\n    Empresaid: null,\n    unidadeid: null,\n    salaid: null,\n    substituicao: false,\n    grupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n  \n  comboProfissional  : Usuario[];\n  comboUnidade : Unidade[];\n  comboSala : Sala[];\n  comboTipoGrupoAgenda : GrupoAgenda[];\n  empresa : Empresa[];\n\n  constructor(private route : Router,\n              public dialogRef: MatDialogRef <AgendaCreateComponent>, \n              public overlay : Overlay,\n              public dialog: MatDialog,         \n              private _serviceAgenda : ServiceAllService<Agenda>,\n              private _serviceUnidade : ServiceAllService<Unidade>,\n              private _serviceSala : ServiceAllService<Sala>,\n              private _serviceGrupoAgenda : ServiceAllService<GrupoAgenda>,\n              private _serviceUsuario : ServiceAllService<Usuario>,\n              private _utilService : UtilService\n    ) { }\n\n\n  ngOnInit(): void {\n     this.carregaCombos()\n  }\n  \n  createAgenda(){\n     this.agenda.Empresaid = Number(this._utilService.Sessao().IdEmpresa)\n \n      this._serviceAgenda.create(this.agenda, Endpoint.Agenda).subscribe(ag => {\n      this._utilService.showMessage(\"Agenda cadastrada com sucesso!\",false);\n      this.route.navigate(['home-component'])\n      });\n        this.route.navigate(['home-component'])\n  }\n\n  cancel(){\n    this.route.navigate(['home-component'])  \n  }\n\n  carregaCombos(){\n\n    this.carregaComboProfissional(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa)\n      this.carregaComboUnidade(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa);\n      this.carregaComboSala(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa);\n      this.carregaComboGrupoAgenda(this._utilService.Sessao().GrupoUsuario, this._utilService.Sessao().IdEmpresa);\n  }\n\n  carregaComboProfissional(grpId: number , empId: string){\n    this._serviceUsuario.read(Endpoint.Usuario).subscribe(pro => {\n      pro = this.comboProfissional = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador ? this.comboProfissional = pro.filter(x => x.empresaid.toString() == empId) : null;\n    });\n  }\n  \n  carregaComboUnidade(grpId: number , empId: string){\n    this._serviceUnidade.read(Endpoint.Unidade).subscribe(un => {\n      un = this.comboUnidade = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador ? this.comboUnidade = un.filter(x => x.empresaid.toString() == empId) : null;\n    });\n  }\n\n  carregaComboSala(grpId: number , empId: string){\n    this._serviceSala.read(Endpoint.Sala).subscribe(sl => {\n      sl = this.comboSala = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador? this.comboSala = sl.filter(x => x.empresaid .toString() == empId) : null;                      \n    });\n  }\n\n  carregaComboGrupoAgenda(grpId: number , empId: string){\n    this._serviceGrupoAgenda.read(Endpoint.GrupoAgenda).subscribe(ga => {\n      ga = this.comboTipoGrupoAgenda = grpId == TipoUsuario.Master || grpId == TipoUsuario.Administrador ? this.comboTipoGrupoAgenda = ga.filter(x => x.empresaid .toString() == empId) : null;\n    });\n  }\n\n  fecharPopup(): void {\n    this.dialogRef.close();\n  }\n\n  novoUsuario(){\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioCreateComponent, {\n          width : '700px',\n          height : '820px',\n          scrollStrategy\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Solicitar ao um Usuário Master para criar Nova Agenda!\",true);\n    }\n  }\n\n  \n}\n","        <div class=\"container\">\r\n\r\n            <mat-card>\r\n                <mat-card-title>Nova Agenda</mat-card-title>\r\n                    <form>\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Nome Agenda\" \r\n                             [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Profissional\"><i class=\"material-icons ordem\" (click)=\"novoUsuario()\" >person_add</i>\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.profissionalid\" placeholder=\"Profissional\">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor=\"let tipoProf of comboProfissional \" [value]=\"tipoProf.id\">\r\n                                        {{tipoProf.nome}}\r\n                                    </mat-option>\r\n                                </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Unidade Atendimento\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.unidadeid\" placeholder=\"Unidade Atendimento\" >\r\n                                <mat-option *ngFor=\"let tipounidade of comboUnidade \" [value]=\"tipounidade.id\">\r\n                                    {{tipounidade.nomeUnidade}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Sala Atendimento\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.salaid\" placeholder=\"Sala Atendimento\" >\r\n                                <mat-option *ngFor=\"let tipoSala of comboSala \" [value]=\"tipoSala.id\">\r\n                                    {{tipoSala.nomeSala}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Substituição\">\r\n                                <input name=\"substituicao\" [(ngModel)]=\"agenda.substituicao\" [checked]=\"agenda.substituicao\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Grupo Agenda\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.grupoAgendaid\" placeholder=\"Grupo Agenda\" >\r\n                                <mat-option *ngFor=\"let tipoGrupo of comboTipoGrupoAgenda \" [value]=\"tipoGrupo.id\">\r\n                                    {{tipoGrupo.nomeGrupoAgenda}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Vigência Início\"\r\n                             [(ngModel)]=\"agenda.vigenciaInicio\" name=\"vigenciaInicio\" type=\"datetime-local\" teste >\r\n                        </mat-form-field>\r\n\r\n            \r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Vigência Fim\" \r\n                             [(ngModel)]=\"agenda.vigenciaFim\" name=\"vigenciaFim\" type=\"datetime-local\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Considera Feriado\">\r\n                                <input name=\"considerarFeriado\" [(ngModel)]=\"agenda.considerarFeriado\" [checked]=\"agenda.considerarFeriado\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"bloqueado\">\r\n                                <input name=\"bloqueado\" [(ngModel)]=\"agenda.bloqueado\" [checked]=\"agenda.bloqueado\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n\r\n                    </form>\r\n            \r\n                    <button *ngIf=\"agenda.nomeAgenda && agenda.vigenciaInicio && agenda.vigenciaFim\"  mat-raised-button (click)=\"createAgenda()\" color=\"primary\" > \r\n                        Salvar\r\n                    </button>\r\n                    \r\n                    <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \r\n                        Cancelar\r\n                    </button>\r\n            </mat-card>\r\n\r\n        </div>","import { Route } from '@angular/compiler/src/core';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-agenda-delete',\n  templateUrl: './agenda-delete.component.html',\n  styleUrls: ['./agenda-delete.component.css']\n})\nexport class AgendaDeleteComponent implements OnInit {\n\n  agenda : Agenda = {  \n    id: null,\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    profissionalid: null,\n    Empresaid: null,\n    unidadeid: null,\n    salaid: null,\n    substituicao: false,\n    grupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n\n  constructor(\n              public dialgRef : MatDialogRef<AgendaDeleteComponent>,\n              private serviceAgenda : ServiceAllService<Agenda>,\n              private utilService : UtilService,\n              private route : Router\n\n             ) { }\n\n  ngOnInit(): void {\n    this.buscarAgendaByid();\n    \n  }\n\n  ExcluirAgenda(): void{\n      this.serviceAgenda.delete(Number(this.dialgRef.id), Endpoint.Agenda).subscribe(x => {\n          this.utilService.showMessage(\"Agenda Excluida com sucesso\", false);\n          this.route.navigate(['home-component'])\n          this.fecharPopup();\n\n      });\n  }\n\n  fecharPopup():void{\n      this.dialgRef.close();\n  }\n  buscarAgendaByid() : void {\n     this.serviceAgenda.readById(this.dialgRef.id, Endpoint.Agenda).subscribe(ag => {\n       this.agenda = ag;\n     });\n  }\n\n\n}\n \n  \n\n","<div class=\"container\">\n\n    <mat-card>\n        <mat-card-title>Excluir Agenda</mat-card-title>\n            <form>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Id Agenda\" \n                     [(ngModel)]=\"agenda.id\" name=\"idAgenda\" disabled=\"true\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Nome Agenda\" \n                    [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\" disabled=\"true\"> \n                </mat-form-field>\n               \n            </form>\n    \n            <button mat-raised-button (click)=\"ExcluirAgenda()\"  color=\"primary\" > \n                Excluir\n            </button>\n            \n            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                Cancelar\n            </button>\n    </mat-card>\n\n</div>","import { Router } from '@angular/router';\r\nimport { Componentes } from './../../../Negocio/Componentes';\r\nimport { Aplicacao } from './../../../Negocio/Aplicacao';\r\nimport { UtilService } from './../../../services/util.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\r\nimport { ServiceAllService } from 'src/app/services/service-all.service';\r\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\r\nimport { AgendaDto } from 'src/app/models/Agenda/modelRetornoAgenda';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AgendaCreateComponent } from '../agenda-create/agenda-create.component';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { AgendaUpdateComponent } from '../agenda-update/agenda-update.component';\r\nimport { AgendaDeleteComponent } from '../agenda-delete/agenda-delete.component';\r\nimport { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\r\nimport { UsuarioCreateComponent } from 'src/app/components/usuario/usuario-create/usuario-create.component';\r\nimport { AgendaCadastroUnidadeComponent } from '../Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-agenda-read',\r\n  templateUrl: './agenda-read.component.html',\r\n  styleUrls: ['./agenda-read.component.css']\r\n})\r\nexport class AgendaReadComponent implements OnInit {\r\n\r\n  Colunas = ['id','DtCriacao', 'NomeAgenda','Funcionario','NomeEmpresa','NomeUnidade','NomeSala',\r\n                      'substituicao','GrupoAgenda','vigenciaInicio','vigenciaFim','considerarFeriado','bloqueado','action']  \r\n  agenda : AgendaDto[];\r\n\r\n  constructor(\r\n              public dialog: MatDialog,\r\n              public overlay : Overlay,\r\n              private servico : UtilService,\r\n              private _repAgenda : ServiceAllService<AgendaDto>,\r\n\r\n             ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.servico.AtualizarMenu(Aplicacao.Agenda,'app_registration','');\r\n    this.buscarAgenda();\r\n  }\r\n\r\n \r\n  buscarAgenda(){\r\n    \r\n    let filtroAgenda = (<HTMLSelectElement>document.getElementById('busca')).value;\r\n\r\n    this._repAgenda.read(Endpoint.Agenda).subscribe(ag => {\r\n      this.agenda = filtroAgenda == null ? ag.filter(x => x.empresaId.toString() == this.servico.Sessao().IdEmpresa) \r\n                    :  ag.filter(x => x.nomeAgenda.toLowerCase().includes(filtroAgenda.toLowerCase()) && x.empresaId.toString() == this.servico.Sessao().IdEmpresa)\r\n    });\r\n  }\r\n\r\n  addNovaAgenda(): void {\r\n   \r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n      this.servico.Popup(\"0\",AgendaCreateComponent, '700px','900px' );\r\n    }else{\r\n      this.servico.showMessage(\"Solicitar ao um Usuário Master para criar Nova Agenda!\",true);\r\n    }\r\n  }\r\n\r\n  AtualizarAgenda(id : string): void {\r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n      this.servico.Popup(id, AgendaUpdateComponent, '30%','80%' )\r\n     \r\n      }else{\r\n        this.servico.showMessage(\"Solicitar ao um Usuário Master para Editar os  dados da Agenda!\",true);\r\n      }   \r\n  }\r\n\r\n  ExcluirAgenda(id : string): void {\r\n      \r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n      {\r\n        this.servico.Popup(id, AgendaDeleteComponent,'30%','25%');\r\n      }\r\n      else\r\n      {\r\n        this.servico.showMessage(\"Solicitar ao um Usuário Master para Excluir a Agenda!\",true);\r\n      }\r\n  }\r\n\r\n\r\n  addUnidade(){\r\n    \r\n    if(this.servico.Sessao().GrupoUsuario == TipoUsuario.Master || this.servico.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n      this.servico.Popup(\"0\", AgendaCadastroUnidadeComponent, \"800px\", \"600px\", )\r\n    else\r\n      this.servico.showMessage(\"Solicitar ao um Usuário Master cadastrar a Unidade\",true);\r\n  }\r\n\r\n\r\n}\r\n","<mat-dialog-content>\n    <div class=\"mat-elevation-z3\">\n\n        \n        <button mat-button [matMenuTriggerFor]=\"menu\">Rotina Diária</button>\n          <mat-menu #menu=\"matMenu\">\n            <a mat-menu-item>Agendamento</a>\n            <a mat-menu-item>Consulta de Agenda</a>\n            <a mat-menu-item>Consulta Agendamentos</a>\n          \n          </mat-menu>\n\n          <button mat-button [matMenuTriggerFor]=\"menucadastro\">Cadastro</button>\n            <mat-menu #menucadastro=\"matMenu\">\n              <a (click)=\"addNovaAgenda()\" mat-menu-item>Agenda</a>\n              <a (click)=\"addUnidade()\" mat-menu-item>Unidade</a>\n              <a mat-menu-item>Sala</a>\n              <a mat-menu-item>Grupo Agenda</a>\n              \n            </mat-menu>\n\n\n\n            <span class=\"botaoBusca\" (click)=\"buscarAgenda()\" (keypress)=\"buscarAgenda()\">\n              <i class=\"material-icons\">search</i>\n            </span>\n\n            <input class=\"textBusca\"  name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n\n          <table class=\"tabelaagenda\" mat-table [dataSource]=\"agenda\">\n            <!-- Id Column -->\n            \n            <ng-container matColumnDef=\"id\">\n              <th mat-header-cell *matHeaderCellDef>Id</th>\n              <td mat-cell id=\"idAgenda\" *matCellDef=\"let row\">{{row.id}}</td>\n            </ng-container>\n        \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"DtCriacao\">\n              <th mat-header-cell *matHeaderCellDef>Criado Em</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.dtCriacao | date: 'dd/MM/yyyy hh:mm:ss'}}</td>\n            </ng-container>\n            \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"NomeAgenda\">\n              <th mat-header-cell *matHeaderCellDef>Nome Agenda</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeAgenda}}</td>\n            </ng-container>\n      \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"Funcionario\">\n              <th mat-header-cell *matHeaderCellDef>Funcionário</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n            </ng-container>\n      \n            <!-- Name Price -->\n            <ng-container matColumnDef=\"NomeEmpresa\">\n              <th mat-header-cell *matHeaderCellDef>Empresa</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeFantasia}}</td>\n            </ng-container>\n      \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"NomeUnidade\">\n              <th mat-header-cell *matHeaderCellDef>Unidade</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeUnidade}}</td>\n            </ng-container>\n      \n            <ng-container matColumnDef=\"NomeSala\">\n                <th mat-header-cell *matHeaderCellDef>Sala</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.nomeSala}}</td>\n              </ng-container>\n    \n              <ng-container matColumnDef=\"GrupoAgenda\">\n                <th mat-header-cell *matHeaderCellDef>Grupo Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.nomeGrupoAgenda}}</td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"substituicao\">\n                <th mat-header-cell *matHeaderCellDef>Pode Substituir?</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.substituicao}}</td>\n              </ng-container>\n\n              \n              <ng-container matColumnDef=\"vigenciaInicio\">\n                <th mat-header-cell *matHeaderCellDef>Inicio Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.vigenciaInicio | date: 'dd/MM/yyyy hh:mm:ss'}} </td>\n              </ng-container>\n\n\n              <ng-container matColumnDef=\"vigenciaFim\">\n                <th mat-header-cell *matHeaderCellDef>Fim Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.vigenciaFim | date: 'dd/MM/yyyy hh:mm:ss'}}</td>\n              </ng-container>\n\n              \n              <ng-container matColumnDef=\"considerarFeriado\">\n                <th mat-header-cell *matHeaderCellDef>Cons. Feriado</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.considerarFeriado}}</td>\n              </ng-container>\n\n            <!-- status -->\n            <ng-container matColumnDef=\"bloqueado\">\n              <th mat-header-cell *matHeaderCellDef>Ativa</th>\n                <td mat-cell *matCellDef=\"let row\">\n                  <div *ngIf=\"row.bloqueado == 'Sim'\" >\n                    <i class=\"material-icons\">\n                      lock\n                    </i>\n                  </div>\n                  <div *ngIf=\"row.bloqueado == 'Não'\" >\n                    <i class=\"material-icons\">  \n                      lock_open\n                    </i>\n                  </div>\n                </td>\n              </ng-container>\n      \n            \n            <!-- Coluna de Ações -->\n            <ng-container matColumnDef=\"action\">\n              <th mat-header-cell *matHeaderCellDef>Ações</th>\n              <td mat-cell *matCellDef=\"let row\">\n                  \n                  <a  (click)=\"AtualizarAgenda(row.id)\" class=\"edit\">\n                      <i class=\"material-icons\">\n                          edit\n                      </i>\n                  </a>\n                  <a (click)=\"ExcluirAgenda(row.id)\" class=\"delete\">\n                      <i class=\"material-icons\">\n                          delete\n                      </i>\n                  </a>\n                  \n              </td>\n            </ng-container>\n                \n        \n            <tr mat-header-row *matHeaderRowDef=\"Colunas\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: Colunas;\"></tr>\n          </table>\n\n      </div>\n\n      <div class=\"row\">\n        <router-outlet></router-outlet>\n      </div>\n</mat-dialog-content>\n  ","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { endWith, filter } from 'rxjs/operators';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { GrupoAgenda } from 'src/app/models/Agenda/modelGrupoAgenda';\nimport { Empresa } from 'src/app/models/empresa/ModelEmpresa';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-agenda-update',\n  templateUrl: './agenda-update.component.html',\n  styleUrls: ['./agenda-update.component.css']\n})\nexport class AgendaUpdateComponent implements OnInit {\n\n  constructor(\n            private router: Router,\n            private utilService : UtilService,\n            private agendaService : ServiceAllService<Agenda>,\n            private serviceUnidade : ServiceAllService<Unidade>,\n            private serviceSala : ServiceAllService<Sala>,\n            private serviceGrupoAGenda : ServiceAllService<GrupoAgenda>,\n            private serviceEmpresa : ServiceAllService<Empresa>,\n            private serviceUsuario : ServiceAllService<Usuario>,\n            public dialogRef: MatDialogRef <AgendaUpdateComponent>,\n\n\n            ) { }\n\n  comboProfissional  : Usuario[];\n  comboUnidade : Unidade[];\n  comboSala : Sala[];\n  comboTipoGrupoAgenda : GrupoAgenda[];\n\n\n  agenda : Agenda = {  \n    id: null,\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    profissionalid: null,\n    Empresaid: null,\n    unidadeid: null,\n    salaid: null,\n    substituicao: false,\n    grupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n\n  \n  \n  ngOnInit(): void {\n \n    this.buscarAgendaPorId();\n    \n  \n  }\n\n      buscarAgendaPorId(){\n             \n        this.agendaService.readById(this.dialogRef.id, Endpoint.Agenda).subscribe(agId => {\n              this.agenda = agId\n              this.carregaCombos();\n            });\n      }\n\n      carregaCombos(){\n        \n        this.serviceUsuario.read(Endpoint.Usuario).subscribe(pr => {\n          this.comboProfissional = pr.filter(x => x.empresaid == this.utilService.Sessao().IdEmpresa )\n        });\n\n        \n        this.serviceUnidade.read(Endpoint.Unidade).subscribe(un => {\n          this.comboUnidade = un.filter(x => x.empresaid == Number(this.utilService.Sessao().IdEmpresa));\n        });\n\n        this.serviceSala.read(Endpoint.Sala).subscribe(sl =>{\n          this.comboSala = sl.filter(x => x.empresaid == Number(this.utilService.Sessao().IdEmpresa));\n        });\n        \n        this.serviceGrupoAGenda.read(Endpoint.GrupoAgenda).subscribe(ga => {\n          this.comboTipoGrupoAgenda = ga.filter(x => x.empresaid == Number(this.utilService.Sessao().IdEmpresa));\n        });\n       \n      } \n\n      UpdateAgenda(){\n        this.agenda.id = this.dialogRef.id\n        this.agendaService.update(this.agenda, Endpoint.Agenda).subscribe(() => {\n          this.utilService.showMessage(\"Agenda Atualizada com Sucesso!\", false)\n          this.router.navigate(['home-component'])\n          this.fecharPopup();\n      \n        });\n\n      }\n\n      fecharPopup(): void {\n        this.dialogRef.close();\n      }\n\n}\n","<div class=\"container\">\n\n    <mat-card>\n        <mat-card-title>Atualizar Agenda</mat-card-title>\n            <form>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Nome Agenda\" \n                     [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\">\n                </mat-form-field>\n\n                \n                <mat-form-field>\n                        <input matInput placeholder=\"Profissional\" >\n                        <p></p>\n                    <mat-select \n                           [(value)]=\"agenda.profissionalid\" placeholder=\"Unidade Atendimento\">\n                         <mat-option *ngFor=\"let ret of comboProfissional \" [value]=\"ret.id\">\n                               {{ret.nome}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Unidade Atendimento\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.unidadeid\" placeholder=\"Unidade Atendimento\" >\n                        <mat-option *ngFor=\"let tipounidade of comboUnidade \" [value]=\"tipounidade.id\">\n                            {{tipounidade.nomeUnidade}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Sala Atendimento\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.salaid\" placeholder=\"Sala Atendimento\" >\n                        <mat-option *ngFor=\"let tipoSala of comboSala \" [value]=\"tipoSala.id\">\n                            {{tipoSala.nomeSala}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Substituição\">\n                        <input name=\"substituicao\" [(ngModel)]=\"agenda.substituicao\" [checked]=\"agenda.substituicao\" type=\"checkbox\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Grupo Agenda\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.grupoAgendaid\" placeholder=\"Grupo Agenda\" >\n                        <mat-option *ngFor=\"let tipoGrupo of comboTipoGrupoAgenda \" [value]=\"tipoGrupo.id\">\n                            {{tipoGrupo.nomeGrupoAgenda}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Vigência Início\"\n                     [(ngModel)]= \"agenda.vigenciaInicio\" name=\"vigenciaInicio\" type=\"datetime-local\" teste >\n                </mat-form-field>\n\n    \n                <mat-form-field>\n                    <input matInput placeholder=\"Vigência Fim\" \n                     [(ngModel)]=\"agenda.vigenciaFim\" name=\"vigenciaFim\" type=\"datetime-local\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Considera Feriado\">\n                        <input name=\"considerarFeriado\" [(ngModel)]=\"agenda.considerarFeriado\" [checked]=\"agenda.considerarFeriado\" type=\"checkbox\">\n                </mat-form-field>\n\n\n                <mat-form-field>\n                    <input matInput placeholder=\"bloqueado\">\n                        <input name=\"bloqueado\" [(ngModel)]=\"agenda.bloqueado\" [checked]=\"agenda.bloqueado\" type=\"checkbox\">\n                </mat-form-field>\n\n\n            </form>\n    \n            <button *ngIf=\"agenda.nomeAgenda && agenda.vigenciaInicio && agenda.vigenciaFim\"  mat-raised-button (click)=\"UpdateAgenda()\"  color=\"primary\" > \n                Salvar\n            </button>\n            \n            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                Cancelar\n            </button>\n    </mat-card>\n\n</div>","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home-agenda',\n  templateUrl: './home-agenda.component.html',\n  styleUrls: ['./home-agenda.component.css']\n})\nexport class HomeAgendaComponent implements OnInit {\n\n  constructor(private route : Router) { }\n\n  ngOnInit(): void {\n    this.route.navigate(['Agenda'])\n  }\n}\n","<app-agenda-read></app-agenda-read>","export enum Aplicacao{\r\n  Agenda = 'Agenda',\r\n  Cartões = 'Cartões',\r\n  Vendas = 'Vendas',\r\n  Octoplex = 'Octoplex',\r\n  \r\n}\r\n\r\nexport const TipoAplicacao = new Map<string, string>([\r\n  ['Agenda', 'Agenda'],\r\n  ['Cartões', 'Cartões'],\r\n  ['FrenteCaixa', 'FrenteCaixa'],\r\n  ['Octoplex', 'Octoplex']\r\n  \r\n])","export enum Endpoint {\r\n    Empresa = '/Empresa',\r\n    GrupoUsuario = '/GrupoUsuario',\r\n    Produto = '/Produto',\r\n    Usuario = '/Usuario',\r\n    Agenda = '/Agenda',\r\n    Unidade = '/Unidade',\r\n    Sala = '/Sala',\r\n    GrupoAgenda = '/GrupoAgenda',\r\n    Token = '/Token'\r\n\r\n}","import { HomeAgendaComponent } from './Aplicacoes/agenda/home-agenda/home-agenda.component';\nimport { AgendaReadComponent } from './Aplicacoes/agenda/agenda-read/agenda-read.component';\nimport { AgendaDeleteComponent } from './Aplicacoes/agenda/agenda-delete/agenda-delete.component';\nimport { AgendaUpdateComponent } from './Aplicacoes/agenda/agenda-update/agenda-update.component';\nimport { AgendaCreateComponent } from './Aplicacoes/agenda/agenda-create/agenda-create.component';\n\nimport { Aplicacao } from './Negocio/Aplicacao';\nimport { EmpresaDeleteComponent } from './components/empresa/empresa-delete/empresa-delete.component';\nimport { EmpresaUpdateComponent } from './components/empresa/empresa-update/empresa-update.component';\nimport { EmpresaCreateComponent } from './components/empresa/empresa-create/empresa-create.component';\nimport { EmpresaComponent } from './views/empresa/empresa.component';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from \"./views/home/home.component\";\nimport { ProductCrudComponent } from \"./views/product-crud/product-crud.component\";\nimport { UsuarioCrudComponent } from './views/usuario-crud/usuario-crud.component';\n\nimport { ProductCreateComponent } from './components/product/product-create/product-create.component';\nimport { ProductUpdateComponent } from './components/product/product-update/product-update.component';\nimport { ProductDeleteComponent } from './components/product/product-delete/product-delete.component';\n\nimport { UsuarioCreateComponent } from './components/usuario/usuario-create/usuario-create.component';\nimport { UsuarioUpdateComponent } from './components/usuario/usuario-update/usuario-update.component';\nimport { UsuarioDeleteComponent } from './components/usuario/usuario-delete/usuario-delete.component';\n\nimport { ChamadoCrudComponent } from './views/chamado-crud/chamado-crud.component';\nimport { ChamadoCreateComponent } from './components/chamados/chamado-create/chamado-create.component';\nimport { ChamadoUpdateComponent } from './components/chamados/chamado-update/chamado-update.component';\nimport { ChamadoDeleteComponent } from './components/chamados/chamado-delete/chamado-delete.component';\n\n\n//Rotas de componentes Negócio\n\nconst routes: Routes = [\n  {path : \"\", component:HomeComponent },\n  {path: \"login\", component: LoginComponent },\n  //Rotas de Produtos\n  {path: \"products\", component: ProductCrudComponent },\n  {path: \"products/create\", component : ProductCreateComponent },\n  {path: \"products/update/:id\", component : ProductUpdateComponent },\n  {path: \"products/delete/:id\", component : ProductDeleteComponent },\n\n  //Rotas de usuarios\n  {path: 'usuarios', component : UsuarioCrudComponent },\n  {path: \"usuarios/create\", component : UsuarioCreateComponent },\n  {path: \"usuarios/update/:id\", component : UsuarioUpdateComponent },\n  {path: \"usuarios/delete/:id\", component : UsuarioDeleteComponent },\n\n  //Rotas de chamados\n  {path: \"chamados\", component : ChamadoCrudComponent },\n  {path: \"chamados/create\", component : ChamadoCreateComponent },\n  {path: \"chamados/update/:id\", component : ChamadoUpdateComponent },\n  {path: \"chamados/delete/:id\", component : ChamadoDeleteComponent },\n\n  //Rotas de empresa\n  {path: \"empresa\", component : EmpresaComponent },\n  {path: \"empresa/create\", component : EmpresaCreateComponent },\n  {path: \"empresa/update/:id\", component : EmpresaUpdateComponent },\n  {path: \"empresa/delete/:id\", component : EmpresaDeleteComponent },\n\n  //Rotas das APlicações\n  //Agenda\n  {path: 'home-component' , component : HomeAgendaComponent},\n  {path: Aplicacao.Agenda , component : HomeAgendaComponent,\n    children:[\n      {path: 'agendaHomeDefault', redirectTo: Aplicacao.Agenda, pathMatch: 'full'},\n      {path: 'agenda-home', component : HomeAgendaComponent},\n      {path: 'agenda-create', component : AgendaCreateComponent},\n      {path: 'agenda-delete/:id', component : AgendaDeleteComponent },\n      {path: 'agenda-update/:id', component : AgendaUpdateComponent},\n    ]},\n  \n      \n]\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","//import { LoginService } from '../app/'\nimport { Component } from '@angular/core';\nimport { LoginService } from './services/login.service';\n\n\n\n@Component({\n  selector: 'app-root',\ntemplateUrl: 'app.conponent.html'\n})\nexport class AppComponent {\n  nome = 'Palm';\n\nmostrarMenu : boolean = false; \nmostrarlogin : boolean = true; \n\nconstructor(private authService : LoginService){\n\n}\n\nngOnInit(){\n    this.authService.mostrarMenuEmitter.subscribe(\n        mostrar => this.mostrarMenu = mostrar\n    );\n\n    this.authService.mostrarLoginEmitter.subscribe(\n        mostrarLogin => this.mostrarlogin = mostrarLogin\n    );\n}\n\n}\n\n\n\n","<app-login *ngIf=\"mostrarlogin\"></app-login>\r\n<app-header *ngIf=\"mostrarMenu\"></app-header>\r\n<app-nav *ngIf=\"mostrarMenu\"></app-nav>\r\n<app-footer *ngIf=\"mostrarMenu\"></app-footer>\r\n\r\n\r\n","import { LoginService } from './services/login.service';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, LOCALE_ID } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './components/template/header/header.component';\nimport { FooterComponent } from './components/template/footer/footer.component';\nimport { NavComponent } from './components/template/nav/nav.component';\n\nimport { HomeComponent } from './views/home/home.component';\nimport { ProductCrudComponent } from './views/product-crud/product-crud.component';\nimport { UsuarioCrudComponent } from './views/usuario-crud/usuario-crud.component';\n\nimport { ProductCreateComponent } from './components/product/product-create/product-create.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport localePt from '@angular/common/locales/pt';\nimport { registerLocaleData } from  '@angular/common';\nimport { LoginComponent } from './components/login/login.component';\n\n\n\n\nregisterLocaleData(localePt);\n\n//Modulos Material\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n import {MatDialogModule} from '@angular/material/dialog';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDividerModule} from '@angular/material/divider';\n\nimport { ProductReadComponent } from './components/product/product-read/product-read.component';\nimport { ProductReadTableprodutosComponent } from './components/product/product-read-tableprodutos/product-read-tableprodutos.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ProductUpdateComponent } from './components/product/product-update/product-update.component';\nimport { ProductDeleteComponent } from './components/product/product-delete/product-delete.component';\nimport { RedDirective } from './diretivas/red.directive';\nimport { UsuarioComponent } from './components/usuario/usuario.component';\nimport { UsuarioReadComponent } from './components/usuario/usuario-read/usuario-read.component';\nimport { UsuarioCreateComponent } from './components/usuario/usuario-create/usuario-create.component';\nimport { UsuarioDeleteComponent } from './components/usuario/usuario-delete/usuario-delete.component';\nimport { UsuarioUpdateComponent } from './components/usuario/usuario-update/usuario-update.component';\nimport { ChamadoCrudComponent } from './views/chamado-crud/chamado-crud.component';\nimport { ChamadoCreateComponent } from './components/chamados/chamado-create/chamado-create.component';\nimport { ChamadoUpdateComponent } from './components/chamados/chamado-update/chamado-update.component';\nimport { ChamadoDeleteComponent } from './components/chamados/chamado-delete/chamado-delete.component';\nimport { ChamadoReadComponent } from './components/chamados/chamado-read/chamado-read.component';\nimport { EmpresaComponent } from './views/empresa/empresa.component';\nimport { EmpresaCreateComponent } from './components/empresa/empresa-create/empresa-create.component';\nimport { EmpresaUpdateComponent } from './components/empresa/empresa-update/empresa-update.component';\nimport { EmpresaDeleteComponent } from './components/empresa/empresa-delete/empresa-delete.component';\nimport { EmpresaReadComponent } from './components/empresa/empresa-read/empresa-read.component';\nimport { AgendaUpdateComponent } from './Aplicacoes/agenda/agenda-update/agenda-update.component';\nimport { AgendaDeleteComponent } from './Aplicacoes/agenda/agenda-delete/agenda-delete.component';\nimport { AgendaCreateComponent } from './Aplicacoes/agenda/agenda-create/agenda-create.component';\nimport { AgendaReadComponent } from './Aplicacoes/agenda/agenda-read/agenda-read.component';\nimport { HomeAgendaComponent } from './Aplicacoes/agenda/home-agenda/home-agenda.component';\nimport { AgendaCadastroUnidadeComponent } from './Aplicacoes/agenda/Unidade/agenda-cadastro-unidade/agenda-cadastro-unidade.component';\nimport { AgendaAlterarUnidadeComponent } from './Aplicacoes/agenda/Unidade/agenda-alterar-unidade/agenda-alterar-unidade.component';\nimport { AgendaExcluirUnidadeComponent } from './Aplicacoes/agenda/Unidade/agenda-excluir-unidade/agenda-excluir-unidade.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    FooterComponent,\n    NavComponent,\n    HomeComponent,\n    ProductCrudComponent,\n    ProductCreateComponent,\n    ProductReadComponent,\n    ProductReadTableprodutosComponent,\n    ProductUpdateComponent,\n    ProductDeleteComponent,\n    LoginComponent,\n    RedDirective,\n    UsuarioCrudComponent,\n    UsuarioComponent,\n    UsuarioReadComponent,\n    UsuarioCreateComponent,\n    UsuarioDeleteComponent,\n    UsuarioUpdateComponent,\n    ChamadoCrudComponent,\n    ChamadoCreateComponent,\n    ChamadoUpdateComponent,\n    ChamadoDeleteComponent,\n    ChamadoReadComponent,\n    EmpresaComponent,\n    EmpresaCreateComponent,\n    EmpresaUpdateComponent,\n    EmpresaDeleteComponent,\n    EmpresaReadComponent,\n    AgendaUpdateComponent,\n    AgendaDeleteComponent,\n    AgendaCreateComponent,\n    AgendaReadComponent,\n    HomeAgendaComponent,\n    AgendaCadastroUnidadeComponent,\n    AgendaAlterarUnidadeComponent,\n    AgendaExcluirUnidadeComponent,\n  \n    \n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    HttpClientModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatMenuModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatDividerModule,\n  ],\n  providers: \n  [\n    {\n    provide : LOCALE_ID,\n    useValue : 'pt-BR',\n    },\n  [LoginService],\n ],\n  \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-create',\n  templateUrl: './chamado-create.component.html',\n  styleUrls: ['./chamado-create.component.css']\n})\nexport class ChamadoCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-create works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-delete',\n  templateUrl: './chamado-delete.component.html',\n  styleUrls: ['./chamado-delete.component.css']\n})\nexport class ChamadoDeleteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-delete works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-read',\n  templateUrl: './chamado-read.component.html',\n  styleUrls: ['./chamado-read.component.css']\n})\nexport class ChamadoReadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-read works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-update',\n  templateUrl: './chamado-update.component.html',\n  styleUrls: ['./chamado-update.component.css']\n})\nexport class ChamadoUpdateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-update works!</p>\n","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Router } from '@angular/router';\nimport { UtilService } from './../../../services/util.service';\nimport { Contato } from './../../../models/contato/modelContato';\nimport { ContatoService } from './../../../services/contato.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { cnpj } from 'cpf-cnpj-validator';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-empresa-create',\n  templateUrl: './empresa-create.component.html',\n  styleUrls: ['./empresa-create.component.css']\n})\nexport class EmpresaCreateComponent implements OnInit {\n\n \nempresa : Empresa = {\n    dtCriacao : null,\n    cnpj: null,\n    razaoSocial: null,\n    nomeFantasia: null,\n    inscricaoEstadual: null,\n    inscricaoMunicipal: null,\n    cnes : null,\n    codPIS : null,\n    observacao : null,\n    codCnae : null,\n    empresaPai : null,\n    criadoPor : null,\n    bloqueado : null\n    \n}\n\n\n\n  constructor(private utilService : UtilService,\n              private router : Router,\n              private servicoEmpresa : ServiceAllService<Empresa>,\n              public dialofRef : MatDialogRef<EmpresaCreateComponent>,\n   \n\n\n              )\n             { }\n\n  ngOnInit(): void {\n   \n  }\n\n  cadastrarEmpresa(){\n    \n    let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n    let empPai = Number(this.utilService.Sessao().IdEmpresa);\n    this.empresa.criadoPor  = Number(this.utilService.Sessao().UsuarioId);\n    this.empresa.dtCriacao = new Date;\n    this.empresa.empresaPai = empPai;\n       \n    this.empresa.bloqueado = false;\n    \n    if(grpId == TipoUsuario.Usuario)\n    {\n      this.utilService.showMessage(\"Você não possui permissão para cadastro de empresas\", false)\n\n    }else\n    {\n     if(cnpj.isValid(this.empresa.cnpj)){\n       this.servicoEmpresa.read(Endpoint.Empresa).subscribe(bemp => {\n          bemp = bemp;\n         let retornoEmp = bemp.filter(x => x.cnpj == this.empresa.cnpj)\n         let retornomaster = bemp.filter(x => x.id == empPai);\n\n          if (retornoEmp.length == 0 ){\n            \n            if(grpId == TipoUsuario.Administrador){\n\n                this.servicoEmpresa.create(this.empresa, Endpoint.Empresa).subscribe(emp => {\n                  emp = emp;\n                        \n                  let empresaPai = emp.id;\n                         \n                              emp.empresaPai = empresaPai;\n                              this.servicoEmpresa.update(emp,Endpoint.Empresa).subscribe(() => {})\n                         \n                          this.utilService.showMessage(\"Empresa cadastrada com sucesso!\",false);\n                          this.utilService.atualizaRota();\n                          this.empresa = null;\n                        })\n                }else if (grpId == TipoUsuario.Master && retornomaster.filter(x => x.empresaPai == empPai).length > 0)\n                {\n                  \n                  this.servicoEmpresa.create(this.empresa, Endpoint.Empresa).subscribe(emp => {\n                    emp = emp;\n                          \n                    let empresaPai = emp.id;\n                          \n                              emp.bloqueado = true;\n                              emp.empresaPai = Number(localStorage.getItem(\"empId\"));\n                              this.servicoEmpresa.update(emp,Endpoint.Empresa).subscribe(() => {})\n                       \n                            this.utilService.showMessage(\"Empresa cadastrada com sucesso!\",false);\n                            this.utilService.atualizaRota();\n                            this.empresa = null;\n                          })\n                }else{\n                  this.utilService.showMessage(\"Para criação de uma empresa precisa está logado com a Matriz.!\",false);\n                }\n          }\n          else\n           this.utilService.showMessage(\"Cnpj já cadastrado!\",false);\n        });  \n      }\n      else{\n        this.utilService.showMessage(\"Cnpj inválido\",false);\n      }\n    }\n  }\n\n  fecharPopup(){\n    this.dialofRef.close()\n  }\n\n}\n","<mat-tab-group>\n    <mat-tab label=\"Empresa\">\n        <section>\n\n        <div class=\"container\">\n\n            <mat-card>\n                <mat-card-title>Nova Empresa</mat-card-title>\n                    <form>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cnpj\" \n                             [(ngModel)]=\"empresa.cnpj\" name=\"cnpj\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Nome\"\n                            [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Razão Social\"\n                            [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Inscrição Estadual\"\n                            [(ngModel)]=\"empresa.inscricaoEstadual\" name=\"inscricaoEstadual\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Inscrição Municipal\"\n                            [(ngModel)]=\"empresa.inscricaoMunicipal\" name=\"inscricaoMunicipal\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"CNES\"\n                            [(ngModel)]=\"empresa.cnes\" name=\"cnes\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cod. PIS\"\n                            [(ngModel)]=\"empresa.codPIS\" name=\"codPIS\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cod. CNAE\"\n                            [(ngModel)]=\"empresa.codCnae\" name=\"codCnae\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Observação\"\n                            [(ngModel)]=\"empresa.observacao\" name=\"observacao\">\n                        </mat-form-field>\n            \n                    </form>\n            \n                    <button *ngIf=\"empresa.cnpj && empresa.nomeFantasia && empresa.razaoSocial\"  mat-raised-button (click)=\"cadastrarEmpresa()\" color=\"primary\" > \n                        Salvar\n                    </button>\n                    \n                    <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                        Cancelar\n                    </button>\n            </mat-card>\n\n        </div>\n\n        </section>\n</mat-tab>\n<mat-tab label=\"Contato\"> Contatos</mat-tab>\n<mat-tab label=\"Endereços\">Endereços </mat-tab>\n</mat-tab-group>","import { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { CanActivate, Router, ActivatedRoute } from '@angular/router';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-empresa-delete',\n  templateUrl: './empresa-delete.component.html',\n  styleUrls: ['./empresa-delete.component.css']\n})\nexport class EmpresaDeleteComponent implements OnInit {\n\n\n  empresa : Empresa\n  constructor(private serviceEmpresa : ServiceAllService<Empresa>,\n              private serviceUsuario : ServiceAllService<Usuario>,\n              private mensagem : UtilService,\n              public dialogRef : MatDialogRef<EmpresaDeleteComponent>,\n              private utilservice : UtilService\n\n            ) { }\n\n  ngOnInit(): void {\n    this.BuscarEmpresa();\n  }\n\n\n  excluirEmpresa(){\n    \n    let existeUsuario = null;\n    \n    this.serviceUsuario.read(Endpoint.Usuario).subscribe(usr => {\n        usr = usr;\n        existeUsuario = usr.filter(x => x.empresaid == this.empresa.id.toString())\n       \n        if (existeUsuario.length > 0)\n        {\n          this.mensagem.showMessage(\"Empresa não pode ser excluida porque possui Dependências de usuários.\", false)\n        }    \n        else\n        {\n            if (Number(this.utilservice.Sessao().GrupoUsuario) == TipoUsuario.Administrador){\n              this.serviceEmpresa.delete(this.empresa.id, Endpoint.Empresa).subscribe(()=>{\n                this.mensagem.showMessage(\"Empresa excluida com sucesso !\", false);\n               this.utilservice.atualizaRota()\n              })\n            }\n              else{\n                this.mensagem.showMessage(\"Permissão de exclusão negada !\", false);\n                this.utilservice.atualizaRota()\n              }\n        }\n    });\n  }\n\n  fecharPopup(){\n    this.dialogRef.close();\n  }\n\n   BuscarEmpresa(){\n    \n    \n    this.serviceEmpresa.readById(this.dialogRef.id, Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n\n    })\n\n   }\n\n\n}\n","<mat-card>\n    <mat-card-title>Excluir Empresa</mat-card-title>\n        <form>\n                       \n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\"\n                [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\" disabled=\"true\">\n            </mat-form-field>\n           \n            <mat-form-field>\n                <input matInput placeholder=\"Nome Fantasia\"\n                [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\" disabled=\"true\">\n            </mat-form-field>\n           \n           \n            <mat-form-field>\n                <input matInput placeholder=\"Cnpj\" \n                 [(ngModel)]=\"empresa.cnpj\" name=\"cnpj\" disabled=\"true\">\n\n            </mat-form-field>\n            \n        </form>\n\n        <button mat-raised-button (click)=\"excluirEmpresa()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\r\nimport { Endpoint } from './../../../Negocio/Endpoint';\r\nimport { Router } from '@angular/router';\r\nimport { ServiceAllService } from './../../../services/service-all.service';\r\nimport { Endereco } from './../../../models/endereco/modelEndereco';\r\nimport { Contato } from './../../../models/contato/modelContato';\r\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { elementAt } from 'rxjs/operators';\r\nimport { TipoUsuarioSistema } from 'src/app/models/usuarios/enumUsuarios';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { EmpresaCreateComponent } from '../empresa-create/empresa-create.component';\r\nimport { UtilService } from 'src/app/services/util.service';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { EmpresaUpdateComponent } from '../empresa-update/empresa-update.component';\r\nimport { EmpresaDeleteComponent } from '../empresa-delete/empresa-delete.component';\r\n\r\n@Component({\r\n  selector: 'app-empresa-read',\r\n  templateUrl: './empresa-read.component.html',\r\n  styleUrls: ['./empresa-read.component.css']\r\n})\r\nexport class EmpresaReadComponent implements OnInit {\r\n\r\n  \r\n  empresa: Empresa[];\r\n  empresas: Empresa[];\r\n  contato : Contato;\r\n  endereco : Endereco;\r\n  displayedColumns = ['id','cnpj', 'razaoSocial','nomeFantasia','inscricaoEstadual','inscricaoMunicipal','bloqueado','action']  \r\n\r\n  constructor(private router : Router,\r\n              private serviceEmpresa : ServiceAllService<Empresa>,\r\n              public dialog : MatDialog,\r\n              private _utilService : UtilService,\r\n              private overlay : Overlay\r\n             ) { }\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.buscarEmpresa();\r\n\r\n  }\r\n\r\n  buscarEmpresa(): void \r\n  {\r\n    let filtroEmpresa = (<HTMLSelectElement>document.getElementById('busca')).value;\r\n    let empId = localStorage.getItem(\"empId\");\r\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\r\n\r\n    this.serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\r\n      emp = emp;\r\n\r\n      \r\n      this.empresa =  new Array();\r\n\r\n          if(grpId == TipoUsuario.Administrador)\r\n          {\r\n            emp.forEach(element => {\r\n            this.empresa.push(element)\r\n             });\r\n          }\r\n          else if(grpId == TipoUsuario.Master)\r\n          {\r\n            emp.forEach(master => {\r\n              if(master.empresaPai.toString()== empId) \r\n              this.empresa.push(master)\r\n            });\r\n\r\n          }\r\n\r\n      let empresaFIltrada = new Array();\r\n      if (filtroEmpresa){\r\n           \r\n        for (let index = 0; index < this.empresa.length; index++) {\r\n          const element = this.empresa[index];\r\n            if (element.nomeFantasia.toLowerCase().includes(filtroEmpresa.toLowerCase()))\r\n            empresaFIltrada.push(element);\r\n        }\r\n        this.empresa = new Array();\r\n        this.empresa = empresaFIltrada;    \r\n      }else{\r\n        this.empresa = this.empresa;\r\n      }\r\n\r\n\r\n    })\r\n  }\r\n\r\n  addEmpresa(){\r\n\r\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\r\n        const dialogRef = this.dialog.open(EmpresaCreateComponent, {\r\n          width : '700px',\r\n          height : '730px',\r\n          scrollStrategy\r\n\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n          console.log(`Dialog result: ${result}`);\r\n        });\r\n    }else{\r\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  editarEmpresa(id : string){\r\n\r\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\r\n        const dialogRef = this.dialog.open(EmpresaUpdateComponent, {\r\n          width : '700px',\r\n          height : '750px',\r\n          scrollStrategy,\r\n          id\r\n\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n          console.log(`Dialog result: ${result}`);\r\n        });\r\n    }else{\r\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  excluirEmpresa(id : string){\r\n\r\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\r\n    {\r\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\r\n        const dialogRef = this.dialog.open(EmpresaDeleteComponent, {\r\n          width : '500',\r\n          height : '200px',\r\n          scrollStrategy,\r\n          id\r\n\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n          console.log(`Dialog result: ${result}`);\r\n        });\r\n    }else{\r\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\r\n    }\r\n    \r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\n      \r\n\r\n\r\n\r\n\r\n","<div>\n  <input class=\"search\" name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n   \n   <span (click)=\"buscarEmpresa()\">\n     <i class=\"material-icons\">search</i>\n   </span>\n</div>\n\n<div class=\"footer\">\n  <span (click)=\"addEmpresa()\">\n    <i class=\"material-icons\">person_add</i>\n  </span>\n</div>\n\n<div class=\"mat-elevation-z4\">\n    <table mat-table [dataSource]=\"empresa\">\n      <!-- Id Column -->\n      \n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n  \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"cnpj\">\n        <th mat-header-cell *matHeaderCellDef>Cnpj</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.cnpj}}</td>\n      </ng-container>\n      \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"razaoSocial\">\n        <th mat-header-cell *matHeaderCellDef>Razão Social</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.razaoSocial}}</td>\n      </ng-container>\n\n       <!-- Name Column -->\n       <ng-container matColumnDef=\"nomeFantasia\">\n        <th mat-header-cell *matHeaderCellDef>Nome Fantasia</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nomeFantasia}}</td>\n      </ng-container>\n\n      <!-- Name Price -->\n      <ng-container matColumnDef=\"inscricaoEstadual\">\n        <th mat-header-cell *matHeaderCellDef>Ins. Estadual</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.inscricaoEstadual}}</td>\n      </ng-container>\n\n       <!-- Name Column -->\n       <ng-container matColumnDef=\"inscricaoMunicipal\">\n        <th mat-header-cell *matHeaderCellDef>Ins. Municipal</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.inscricaoMunicipal}}</td>\n      </ng-container>\n\n      <!-- status -->\n      <ng-container matColumnDef=\"bloqueado\">\n        <th mat-header-cell *matHeaderCellDef>Bloqueado</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div *ngIf=\"row.bloqueado\" >\n              <i class=\"material-icons\">\n                lock\n              </i>\n            </div>\n            <div *ngIf=\"!row.bloqueado\" >\n              <i class=\"material-icons\">  \n                lock_open\n              </i>\n            </div>\n          </td>\n        </ng-container>\n\n       \n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n\n            <a (click)=\"editarEmpresa(row.id)\"  class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            <a (click)=\"excluirEmpresa(row.id)\" class=\"delete\">\n                <i class=\"material-icons\">\n                    delete\n                </i>\n            </a>\n            \n\n        </td>\n      </ng-container>\n          \n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n</div>\n\n\n\n","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { UtilService } from './../../../services/util.service';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Component, OnInit } from '@angular/core';\nimport { cnpj } from 'cpf-cnpj-validator';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-empresa-update',\n  templateUrl: './empresa-update.component.html',\n  styleUrls: ['./empresa-update.component.css']\n})\nexport class EmpresaUpdateComponent implements OnInit {\n\n  empresa : Empresa;\n  usuariologado : boolean;\n  constructor(\n              private empresaService : ServiceAllService<Empresa>,\n              private utilservice : UtilService,\n              public dialog : MatDialogRef<EmpresaUpdateComponent>\n              ) { }\n\n  ngOnInit(): void {\n \n  if (Number(this.utilservice.Sessao().GrupoUsuario) == TipoUsuario.Administrador)\n     this.usuariologado = true;\n  \n  this.ObterEmpresa();\n  \n  }\n\n\n  atualizarEmpresa() : void {\n    \n    let grpId = Number(this.utilservice.Sessao().GrupoUsuario);\n    if(grpId == TipoUsuario.Usuario)\n    {\n      this.utilservice.showMessage(\"Você não possui permissão para editar o cadastro de empresas\", false)\n\n    }else\n    {\n     if (cnpj.isValid(this.empresa.cnpj)){\n               try {\n                        this.empresaService.update(this.empresa, Endpoint.Empresa).subscribe(()=>{\n                        this.utilservice.showMessage(\"Empresa atualizada com sucesso\", false)\n                        this.utilservice.atualizaRota();\n                      });\n\n                    } catch (error) {\n                      this.utilservice.showMessage(\"Erro na atualização dos dados \" + error, true);\n                    }\n\n      }else{\n        this.utilservice.showMessage(\"Cnpj Inválido \" , false);\n      }\n      }\n  }\n\n  fecharPopup(){\n    this.dialog.close();\n  }\n\n  \n  ObterEmpresa() {\n    this.empresaService.readById(this.dialog.id, Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n    })    \n       \n  }\n  \n\n}\n\n\n","<mat-card>\n    <mat-card-title>Atualizar dados da Empresa</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Cnpj\" \n                 [(ngModel)]=\"empresa.cnpj\" disabled=\"true\" name=\"cnpj\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\"\n                [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Razão Social\"\n                [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Inscrição Estadual\"\n                [(ngModel)]=\"empresa.inscricaoEstadual\" name=\"inscricaoEstadual\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Inscrição Municipal\"\n                [(ngModel)]=\"empresa.inscricaoMunicipal\" name=\"inscricaoMunicipal\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"CNES\"\n                [(ngModel)]=\"empresa.cnes\" name=\"cnes\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Cod. PIS\"\n                [(ngModel)]=\"empresa.codPIS\" name=\"codPIS\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Cod. CNAE\"\n                [(ngModel)]=\"empresa.codCnae\" name=\"codCnae\">\n            </mat-form-field>\n            \n            <div *ngIf=\"usuariologado\">\n                <mat-form-field >\n                            <input matInput placeholder=\"Bloqueado\">\n                                        <input name=\"status\" [(ngModel)]=\"empresa.bloqueado\" [checked]=\"empresa.bloqueado\" type=\"checkbox\">\n                </mat-form-field>\n            </div>\n          \n            <mat-form-field>\n    \n                <input matInput placeholder=\"Observação\"\n                [(ngModel)]=\"empresa.observacao\" name=\"observacao\">\n            </mat-form-field>\n\n        </form>\n\n        <button *ngIf=\"empresa.cnpj && empresa.nomeFantasia && empresa.razaoSocial\"  mat-raised-button (click)=\"atualizarEmpresa()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>","import { Endpoint } from './../../Negocio/Endpoint';\nimport { Empresa } from './../../models/empresa/ModelEmpresa';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { Acesso } from '../../models/acessoModel';\nimport { UtilService } from './../../services/util.service';\nimport { LoginService } from './../../services/login.service';\n\nimport { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\nacesso : Acesso = new Acesso();\n\n\n\nconstructor(private router :Router,\n             private authservice : LoginService,\n             ) { }\n\n  ngOnInit(): void {\n  \n  }\n  \n  logarSistema(keyEvent : any){\n\n    if (keyEvent.which === 13 || keyEvent.which == 1)\n      this.authservice.logarSistema(this.acesso);\n\n  }\n  \n}\n","<mat-card >\n    <mat-card-title><i class=\"material-icons\">account_box</i></mat-card-title>\n        <form>\n            <mat-form-field > \n                <input matInput placeholder=\"Chave Empresa\" \n                 [(ngModel)]=\"acesso.nome\" name=\"name\" placeholder=\"Empresa\">\n                 \n            </mat-form-field>\n\n            <mat-form-field > \n                <input matInput placeholder=\"login\" \n                 [(ngModel)]=\"acesso.login\" name=\"name\" placeholder=\"login\">\n                 \n            </mat-form-field>\n           \n            <mat-form-field >\n                <input matInput placeholder=\"senha\"\n                [(ngModel)]=\"acesso.senha\" type=\"password\" name=\"senha\" (keypress)=\"logarSistema($event)\">\n                \n            </mat-form-field>\n        </form>\n        \n            <div *ngIf=\"acesso.login && acesso.senha && acesso.nome\">\n                <button mat-raised-button (click)=\"logarSistema($event)\"  color=\"primary\"> \n                    Login\n                </button> \n            </div>\n          \n   \n       \n        \n\n</mat-card>        \n","import { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Aplicacao, TipoAplicacao } from './../../../Negocio/Aplicacao';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { Token } from '@angular/compiler/src/ml_parser/lexer';\nimport { stringify } from 'querystring';\nimport { UtilService } from './../../../services/util.service';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-product-create',\n  templateUrl: './product-create.component.html',\n  styleUrls: ['./product-create.component.css']\n})\nexport class ProductCreateComponent implements OnInit {\n\n  comboProduto =  [];\n  empresa : Empresa[];\n  comboEmpresa : Empresa;\n\n    product : Product = {  \n    dtCriacao : null,\n    criadoPor : null,\n    nome : null,\n    valor : 0,\n    empresaid : null,\n    bloqueado : false,\n    }\n\n  constructor(\n              private utilService : UtilService,\n              private router : Router,\n              private ProdutoEmpresa : ServiceAllService<Product>,\n              private ServiceEmpresa : ServiceAllService<Empresa>,\n              public matDialogref : MatDialogRef<ProductCreateComponent>\n               ) { }\n\n  ngOnInit(): void {\n    this.buscarProduto();\n    this.buscarEmpresa()\n  }\n\n  associarProdutoEmpresa() : void {\n\n    this.product.criadoPor  = Number(localStorage.getItem(\"usId\"));\n    this.product.dtCriacao = new Date;\n    this.product.bloqueado = false;\n    \n    this.ProdutoEmpresa.read(Endpoint.Produto).subscribe(p => {\n      p = p;\n\n      let ativo = p.filter(x => x.nome == this.product.nome && x.empresaid == this.product.empresaid )\n      \n      if (ativo.length == 0)\n      {\n        this.ProdutoEmpresa.create(this.product, Endpoint.Produto).subscribe(() => {\n          this.utilService.showMessage('o Produto Criado!');\n          this.utilService.atualizaRota()\n          })\n      \n      }else{\n        this.utilService.showMessage('Esse Produto Já foi cadastrado para essa empresa!');\n      }\n\n    })\n    \n  }\n\n  fecharPopup() : void {\n    this.matDialogref.close();\n  }\n\n  buscarProduto(){\n    \n      TipoAplicacao.forEach(element => {\n        this.comboProduto.push(element)\n      });\n     return this.comboProduto;\n  }\n  buscarEmpresa(){\n    this.ServiceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n    })\n  }\n  \n}\n","<mat-card>\n    <mat-card-title>Habilitar - Produto Empresa</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Produto\">\n                <p></p>\n                <mat-select [(value)]=\"product.nome\" placeholder=\"productId\" >\n                    <mat-option *ngFor=\"let produto of comboProduto \" [value]=\"produto\">\n                         {{produto}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"product.empresaid\" placeholder=\"EmpresaID\" >\n                    <mat-option *ngFor=\"let comboEmpresa of empresa\" [value]=\"comboEmpresa.id\">\n                            {{comboEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Preço R$\"\n                [(ngModel)]=\"product.valor\" name=\"valor\">\n\n            </mat-form-field>\n            \n        </form>\n\n        <button mat-raised-button (click)=\"associarProdutoEmpresa()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>\n\n","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-product-delete',\n  templateUrl: './product-delete.component.html',\n  styleUrls: ['./product-delete.component.css']\n})\nexport class ProductDeleteComponent implements OnInit {\n\n  product : Product = {\n    id: null,\n    dtCriacao : null,\n    criadoPor : null,\n    nome: null,\n    valor : 0,\n    empresaid : null,\n    bloqueado : null,\n  }\n\n  constructor(private productService : ProductService,\n              private utilService : UtilService,\n              private deleteProduto : ServiceAllService<Product>,\n              public dialogRef : MatDialogRef<ProductDeleteComponent> \n              ) { }\n\n  ngOnInit(): void {\n    this.buscarProduto();\n  }\n  \n  deleteProduct():void{\n      \n    this.deleteProduto.delete(Number(this.dialogRef.id), Endpoint.Produto).subscribe(() => {\n        this.utilService.showMessage(\"Produto Excluído com Sucesso!\")\n        this.utilService.atualizaRota();\n      })\n    \n  }\n\n  buscarProduto(){\n    this.productService.readById(this.dialogRef.id).subscribe(product => {\n      this.product = product;\n    });\n  }\n\n  fecharPopup():void{\n    this.dialogRef.close();\n  }\n\n}\n\n\n  \n\n \n\n\n\n  \n","<mat-card>\n    <mat-card-title>Excluir Produto</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" disabled\n                [(ngModel)]=\"product.nome\" name=\"nome\">\n\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"deleteProduct()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>\n\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface ProductReadTableprodutosItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: ProductReadTableprodutosItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n];\n\n/**\n * Data source for the ProductReadTableprodutos view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class ProductReadTableprodutosDataSource extends DataSource<ProductReadTableprodutosItem> {\n  data: ProductReadTableprodutosItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator;\n  sort: MatSort;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<ProductReadTableprodutosItem[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: ProductReadTableprodutosItem[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: ProductReadTableprodutosItem[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable } from '@angular/material/table';\nimport { ProductReadTableprodutosDataSource, ProductReadTableprodutosItem } from './product-read-tableprodutos-datasource';\n\n@Component({\n  selector: 'app-product-read-tableprodutos',\n  templateUrl: './product-read-tableprodutos.component.html',\n  styleUrls: ['./product-read-tableprodutos.component.css']\n})\nexport class ProductReadTableprodutosComponent implements AfterViewInit, OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatTable) table: MatTable<ProductReadTableprodutosItem>;\n  dataSource: ProductReadTableprodutosDataSource;\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['id', 'name'];\n\n  ngOnInit() {\n    this.dataSource = new ProductReadTableprodutosDataSource();\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.table.dataSource = this.dataSource;\n  }\n}\n","<div class=\"mat-elevation-z8\">\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\">\n    <!-- Id Column -->\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.name}}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator #paginator\n      [length]=\"dataSource?.data.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"10\"\n      [pageSizeOptions]=\"[5, 10, 100]\">\n  </mat-paginator>\n</div>\n","import { stringify } from 'querystring';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Router } from '@angular/router';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { ProductService } from './../../../services/product.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Product } from '../../../models/produtos/product.model';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ProductCreateComponent } from '../product-create/product-create.component';\nimport { ProductUpdateComponent } from '../product-update/product-update.component';\nimport { ProductDeleteComponent } from '../product-delete/product-delete.component';\n\n@Component({\n  selector: 'app-product-read',\n  templateUrl: './product-read.component.html',\n  styleUrls: ['./product-read.component.css']\n})\nexport class ProductReadComponent implements OnInit {\n\n\n\nproducts: Product[]\n\ndisplayedColumns = ['id','nome', 'valor','empresaid','bloqueado','action']  \n\n  constructor(private router : Router,\n              private serviceProduto : ServiceAllService<Product>,\n              private serviceEmpresa : ServiceAllService<Empresa>,\n              private _utilService : UtilService,\n              public dialog : MatDialog, \n              private overlay : Overlay\n             ) { }\n\n  ngOnInit(): void {\n      this.buscarProduto()\n  }\n\n  addProduto(){\n\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(ProductCreateComponent, {\n          width : '500',\n          height : '400px',\n          scrollStrategy,\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de empresas\",true);\n    }\n\n\n  }\n\n  editarProduto(id : string){\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(ProductUpdateComponent, {\n          width : '400px',\n          height : '360px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para associar produtos a uma empresa\",true);\n    }\n  }\n\n\n  excluirProdutoEmpresa(id : string){\n\n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(ProductDeleteComponent, {\n          width : '400px',\n          height : '240px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para associar produtos a uma empresa\",true);\n    }\n\n\n  }\n\n\n  buscarProduto() : void {\n\n    this.serviceProduto.read(Endpoint.Produto).subscribe(product => {\n        product = product;\n\n        this.products = new Array();\n\n        product.forEach(element => {\n          \n            this.serviceEmpresa.readById(element.empresaid.toString(), Endpoint.Empresa).subscribe(e => {\n              e = e;\n              if (e)\n                element.empresaid = e.razaoSocial;\n            })\n            this.products.push(element)\n        });\n    })\n  }\n}\n","<div class=\"mat-elevation-z4\">\n\n  <div class=\"head\">\n    <span (click)=\"addProduto()\">\n      <i class=\"material-icons\">person_add</i>\n    </span>\n  </div>\n\n    <table mat-table [dataSource]=\"products\">\n      <!-- Id Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"nome\">\n        <th mat-header-cell *matHeaderCellDef>Nome</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n      </ng-container>\n      \n       <!-- Name Price -->\n       <ng-container matColumnDef=\"valor\">\n        <th mat-header-cell *matHeaderCellDef>Preço</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.valor | currency: 'BRL'}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"empresaid\">\n        <th mat-header-cell *matHeaderCellDef>Empresa</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.empresaid}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"bloqueado\">\n        <th mat-header-cell *matHeaderCellDef>Status</th>\n        <td mat-cell *matCellDef=\"let row\">\n            <div *ngIf=\"row.bloqueado\" >\n              <i class=\"material-icons\">\n                lock\n              </i>\n            </div>\n            <div *ngIf=\"!row.bloqueado\" >\n              <i class=\"material-icons\">  \n                lock_open\n              </i>\n            </div>\n        </td>\n      </ng-container>\n\n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n\n            <a (click)=\"editarProduto(row.id)\" class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            <a (click)=\"excluirProdutoEmpresa(row.id)\" class=\"delete\">\n                <i class=\"material-icons\">\n                    delete\n                </i>\n            </a>\n        </td>\n      </ng-container>\n          \n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n\n  </div>\n\n","import { Endpoint } from './../../../Negocio/Endpoint';\n\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n\n@Component({\n  selector: 'app-product-update',\n  templateUrl: './product-update.component.html',\n  styleUrls: ['./product-update.component.css']\n})\nexport class ProductUpdateComponent implements OnInit {\n\nproduct: Product = {\n    id : null,\n    dtCriacao : null,\n    criadoPor : null,\n    nome: null,\n    valor: 0,\n    empresaid :null,\n    bloqueado : null\n  }\n  \n\n  constructor(\n              private utilService : UtilService,\n              private ProdutoService : ServiceAllService<Product>,\n              public matdialogRef : MatDialogRef<ProductUpdateComponent>\n              ) { }\n\n\n  ngOnInit(): void {\n    \n    this.buscarProduto();\n   \n  }\n\n  updateProduct(): void {\n    this.product.criadoPor  = Number(localStorage.getItem(\"usId\"));\n      this.ProdutoService.update(this.product, Endpoint.Produto).subscribe(() => {\n      this.utilService.showMessage(\"Produto Atualizado com Sucesso!\")\n      this.utilService.atualizaRota();\n      this.fecharPopup();\n    })\n\n  }\n\n  fecharPopup(): void {\n    this.matdialogRef.close();\n\n  }\n  buscarProduto() : void {\n      this.ProdutoService.readById(this.matdialogRef.id, Endpoint.Produto).subscribe(product => {\n          this.product = product;\n      })\n  }  \n\n}\n","<mat-card>\n    <mat-card-title>Alterar Produto</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"product.nome\" name=\"nome\">\n\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Preço R$\"\n                [(ngModel)]=\"product.valor\" name=\"valor\">\n\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Bloqueado\">\n                    <input name=\"usuariosisteja\" [(ngModel)]=\"product.bloqueado\" [checked]=\"product.bloqueado\" type=\"checkbox\">\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"updateProduct()\" color=\"primary\" > \n            Atualizar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n       \n</mat-card>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar class=\"footer\">\n    <span>\n    Desenvolvido com \n        <i class=\"material-icons red v-middle\" appRed >\n            home\n        </i>\n        por <strong><span>Alberto</span></strong>\n    </span>\n</mat-toolbar>","import { HeaderService } from './header.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private headerService : HeaderService) { }\n\n  ngOnInit(): void {\n  }\n\nget title(): string {\n  return this.headerService.headerData.title\n}\n\nget icon(): string {\n  return this.headerService.headerData.icon\n}\n\nget routeUrl(): string {\n  return this.headerService.headerData.routeUrl\n}\n\n}\n","<mat-toolbar class=\"header mat-elevation-z4\">\n    <span>\n        <a routerLink=\"/\">\n            <img class=\"logo\" src=\"assets/img/logo.jpg\" alt=\"logo\">\n        </a>\n    </span>\n    <span class=\"title-group\">\n        <a routerLink=\"{{ routeUrl }}\" >\n            <i class=\"material-icons\">\n                {{ icon }}\n            </i>\n        \n            {{ title }}\n        </a>\n    </span> \n</mat-toolbar>\n\n","import { HeaderData } from './header.data.model';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeaderService {\n\n  private _headerData = new BehaviorSubject<HeaderData>({\n    title : 'Início',\n    icon : 'home',\n    routeUrl : ''\n  })\n\n\n  constructor() { }\n\nget headerData() : HeaderData {\n  return this._headerData.value;\n}\n\nset headerData(headerData : HeaderData) {\n   this._headerData.next(headerData)\n}\n\n\n}\n","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Component, OnInit } from '@angular/core';\nimport { LoginService } from 'src/app/services/login.service';\n\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\nopened = false;\nlock = false;  \n  constructor(private auth: LoginService) { }\n\n  ngOnInit(): void {\n  this.validarAcesso();\n  }\n\n  sairSistema(){\n    \n    this.auth.sairSistema();\n    \n  }\nvalidarAcesso(){\n  this.lock = Number(localStorage.getItem(\"grpUs\")) == TipoUsuario.Administrador ? true : false;\n}\n \n\n}\n","<mat-sidenav-container class=\"container\">\n    <mat-sidenav  class=\"sidenav\" mode=\"side\" \n            fixedInViewport=\"true\" fixedTopGap=\"64\" fixedBottomGap=\"64\" [(opened)]=\"opened\">\n            <mat-nav-list class=\"nav-list\">\n            \n                <a mat-list-item routerLink=\"/\">\n                <i class=\"material-icons\">\n                    home\n                </i>\n                Início\n            </a>\n            <!--Menus de cadastro-->    \n            <button mat-button [matMenuTriggerFor]=\"menu\" class=\"menuColor\" >\n                <i class=\"material-icons\">storefront</i>\n                \n                <mat-menu #menu=\"matMenu\">\n                        <a mat-list-item routerLink=\"empresa\" >\n                            <i class=\"material-icons\">\n                                reorder\n                            </i>\n                            Empresa\n                        </a>\n                        <a *ngIf=\"lock\" mat-list-item routerLink=\"products\" >\n                            <i class=\"material-icons\">\n                                storefront\n                            </i>\n                            Produto - Empresa\n                        </a>\n                        <a mat-list-item routerLink=\"chamados\">\n                            <i class=\"material-icons\">\n                                reorder\n                            </i>\n                            Solicitações\n                        </a>\n                        <a mat-list-item routerLink=\"usuarios\">\n                            <i class=\"material-icons\">\n                                perm_identity\n                            </i>\n                            Usuários\n                        </a>\n                </mat-menu>\n            </button>\n\n            <a mat-list-item (click)=\"sairSistema()\">\n                <i class=\"material-icons\">\n                    logout\n                </i>\n                Sair\n            </a>\n        </mat-nav-list>\n    </mat-sidenav>\n    <!--\n        Chamar o componente Home como página Principal\n    -->\n    <mat-sidenav-content class=\"content\">\n        <div *ngIf=\"!opened\">\n            <i class=\"material-icons\" (click)=\"opened=!opened\" >\n                navigate_next\n            </i>\n        </div>\n            \n        <div *ngIf=\"opened\">\n                <i class=\"material-icons\" (click)=\"opened=!opened\" >\n                    navigate_before\n                </i>\n        </div>\n        <router-outlet></router-outlet>\n    </mat-sidenav-content>\n\n</mat-sidenav-container>\n\n","import { stringify } from 'querystring';\nimport { UsuarioReadComponent } from './../usuario-read/usuario-read.component';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { GrupoUsuario } from './../../../models/usuarios/GrupoUsuarios';\nimport { LoginService } from 'src/app/services/login.service';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { TipoUsuario, TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Usuario } from '../../../models/usuarios/modelLogin';\nimport { Component, OnInit } from '@angular/core';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-usuario-create',\n  templateUrl: './usuario-create.component.html',\n  styleUrls: ['./usuario-create.component.css']\n})\nexport class UsuarioCreateComponent implements OnInit {\n\ntipoLogin : boolean = false;\nempresa : Empresa[];\n\ndadosEmpresa : Empresa;\nusuario : Usuario = new Usuario();\n\ngrupousuario : GrupoUsuario[];\n\ncriargrupousuario : GrupoUsuario = new GrupoUsuario()\n\ncomboTipousuario = [];\n\nconstructor(  private serviceUsuario : ServiceAllService<Usuario>,\n              private serviceEmpresa : ServiceAllService<Empresa>,\n              private serviceGrupoUsuario : ServiceAllService<GrupoUsuario>,\n              private utilService : UtilService,\n              private serviceLogin : LoginService,\n              public dialogRef: MatDialogRef <UsuarioCreateComponent>, \n              \n              private router : Router) { }\n\n  ngOnInit(): void {\n      let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n      \n      if (grpId == TipoUsuario.Administrador)\n         this.tipoLogin=true;\n\n      this.alimentarCombo();\n      this.buscarEmpresa();\n  }\n  \n  createUsuario() : void {\n    \n    this.usuario.criadoPor  = Number(this.utilService.Sessao().UsuarioId);\n    this.usuario.dtCriacao = new Date;\n   \n    this.usuario.grupoUsuarioid = this.usuario.grupoUsuarioid.toString().trim() == \"Administrador\" ? TipoUsuario.Administrador.toString() \n                                : this.usuario.grupoUsuarioid.toString().trim() == \"Sistema\" ? TipoUsuario.Sistema.toString()\n                                : this.usuario.grupoUsuarioid.toString().trim() == \"Master\" ? TipoUsuario.Master.toString()\n                                : this.usuario.grupoUsuarioid.toString() == \"Usuario\" ? TipoUsuario.Usuario.toString() : null;\n    \n    \n\n    this.serviceUsuario.read(Endpoint.Usuario).subscribe(user => {\n      user = user;\n\n      let ativo = user.filter(x => x.login.toLowerCase() == this.usuario.login.toLowerCase() && x.empresaid == this.usuario.empresaid);\n           \n            if (ativo.length > 0)\n            {\n              this.utilService.showMessage('Esse Usuário já existe para essa Empresa');\n              this.usuario.login =  null; \n              user =  new Array();\n            }else{\n           \n              this.serviceEmpresa.readById(this.usuario.empresaid, Endpoint.Empresa).subscribe(emp => {\n                emp = emp;\n                if (!emp.bloqueado){\n                  this.serviceUsuario.create(this.usuario, Endpoint.Usuario).subscribe(() => {\n                    this.utilService.showMessage('Usuário Criado!');\n                    this.utilService.atualizaRota()\n                  });\n                }\n                else\n                {\n                  this.utilService.showMessage(`Não pode ser criado Usuário para empresa ${emp.razaoSocial} porque essa empresa está bloqueada.`, false);\n                }\n              });\n              \n              user =  new Array();\n            }\n\n    })\n  }\n\n  fecharPopup(): void{\n    this.dialogRef.close();\n  }\n\n  buscarEmpresa() {\n   \n    let empId = this.utilService.Sessao().IdEmpresa\n    let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n\n    this.serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n        emp = emp; \n\n        this.empresa =  new Array()\n\n          emp.forEach(empresasCarregadas => {\n        \n            if(grpId == TipoUsuario.Administrador)\n              this.empresa.push(empresasCarregadas)\n            else if (grpId == TipoUsuario.Master && empId == empresasCarregadas.empresaPai.toString())\n                this.empresa.push(empresasCarregadas)\n            });\n    })\n  }\n\n  alimentarCombo() : void  {\n\n    let grpId = Number(this.utilService.Sessao().GrupoUsuario);\n\n    for (var tipo in TipoUsuario) {\n      if (TipoUsuario.hasOwnProperty(tipo) &&\n        (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Administrador ) {\n\n          this.comboTipousuario.push(tipo)\n          \n      }\n      else if (TipoUsuario.hasOwnProperty(tipo) &&\n      (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Master ){\n\n        if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Master || TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n            this.comboTipousuario.push(tipo);\n        }\n    }\n  }\n\n  createGrupoUsuario(){\n    this.criargrupousuario.criadoPor  = Number(this.utilService.Sessao().UsuarioId);\n    this.criargrupousuario.dtCriacao = new Date;\n    this.criargrupousuario.empresaId = Number(this.utilService.Sessao().IdEmpresa);\n\n      this.serviceGrupoUsuario.create(this.criargrupousuario, Endpoint.GrupoUsuario).subscribe(() => {\n        this.utilService.showMessage('Grupo de Usuário Criado!');\n      })\n  }\n}\n","<mat-card>\n    <h1>Cadastro de Usuário</h1>\n    <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                [(ngModel)]=\"usuario.nome\" name=\"name\">\n\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Senha\" type=\"password\"\n                [(ngModel)]=\"usuario.senha\" name=\"senha\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Crachá\"\n                [(ngModel)]=\"usuario.cracha\" name=\"cracha\">\n            </mat-form-field>\n\n            <mat-form-field *ngIf=\"tipoLogin\">\n                <input matInput placeholder=\"Usuario de Sistema\">\n                    <input name=\"usuariosisteja\" [(ngModel)]=\"usuario.bolSistema\" [checked]=\"usuario.bolSistema\" type=\"checkbox\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Reseta Senha\">\n                    <input name=\"usuariresetasenha\" [(ngModel)]=\"usuario.bolResetaSenha\" [checked]=\"usuario.bolResetaSenha\" type=\"checkbox\">\n            </mat-form-field>\n\n            \n            <mat-form-field>\n                <input matInput placeholder=\"Tipo de Usuário\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.grupoUsuarioid\" placeholder=\"tipousuario\" >\n                    <mat-option *ngFor=\"let tipo of comboTipousuario \" [value]=\"tipo\">\n                        {{tipo}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.empresaid\" placeholder=\"EmpresaID\" >\n                    <mat-option *ngFor=\"let dadosEmpresa of empresa\" [value]=\"dadosEmpresa.id\">\n                    {{dadosEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Profissional\">\n                    <input name=\"usuarioProfissional\" [(ngModel)]=\"usuario.profissional\" [checked]=\"usuario.profissional\" type=\"checkbox\">\n            </mat-form-field>\n\n    </form>\n            <button *ngIf=\"usuario.nome && usuario.login && usuario.senha && usuario.grupoUsuarioid && usuario.empresaid\" mat-raised-button (click)=\"createUsuario()\" color=\"primary\" > \n                Salvar\n            </button>\n  \n            <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n                Voltar\n            </button>\n  \n \n</mat-card>","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { EmpresaService } from './../../../services/empresa.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UsuarioService } from './../../../services/usuario.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-usuario-delete',\n  templateUrl: './usuario-delete.component.html',\n  styleUrls: ['./usuario-delete.component.css']\n})\nexport class UsuarioDeleteComponent implements OnInit {\nempresa : Empresa\nusuario : Usuario;\n\n  constructor(private usuarioService : ServiceAllService<Usuario>,\n              private empresaService : ServiceAllService<Empresa>,\n              private utilService : UtilService,\n              private route : ActivatedRoute,\n              public dialogRef : MatDialogRef<UsuarioDeleteComponent>\n             ) { }\n\n  ngOnInit(): void {\n    this.carregaUsuario()\n  }\n\ncarregaUsuario(){\n\n  \n  this.usuarioService.readById(this.dialogRef.id, Endpoint.Usuario).subscribe(usuario => {\n    this.usuario = usuario;\n    \n    this.buscarEmpresa().subscribe(empresa =>{\n      this.empresa = empresa;\n      this.usuario.empresaid = this.empresa.nomeFantasia;\n     \n    });\n  })\n\n}\n\n  deleteUsuario(): void{\n      this.usuarioService.delete(this.usuario.id , Endpoint.Usuario).subscribe(() => {\n      this.utilService.showMessage(\"Usuário Excluído com Sucesso!\")\n      this.fecharPopup();\n      this.utilService.atualizaRota();\n\n\n    })\n  }\n  fecharPopup():void{\n    this.dialogRef.close();\n  }\n\n  buscarEmpresa(){\n    return this.empresaService.readById(this.usuario.empresaid, Endpoint.Empresa);\n  }\n}\n","<mat-card>\n    <mat-card-title>Excluir Usuário</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"usuario.nome\" name=\"nome\" disabled = \"true\" > \n\n            </mat-form-field>\n            \n            \n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\" disabled=\"true\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\"\n                [(ngModel)]=\"usuario.empresaid\" name=\"empresaid\" disabled=\"true\" >\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"deleteUsuario()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>","\n<div>\n   <input class=\"search\" name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n    \n    <span (click)=\"getUser()\">\n      <i class=\"material-icons\">search</i>\n    </span>\n</div>\n<div>\n  <span (click)=\"addUsuario()\">\n    <i class=\"material-icons\">person_add</i>\n  </span>\n</div>\n\n<div class=\"mat-elevation-z4\">\n    <table mat-table [dataSource]=\"usuario\">\n      <!-- Id Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n  \n      <!-- Nome -->\n      <ng-container matColumnDef=\"nome\">\n        <th mat-header-cell *matHeaderCellDef>Nome</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n      </ng-container>\n      \n\n        <!-- Login -->\n        <ng-container matColumnDef=\"login\">\n            <th mat-header-cell *matHeaderCellDef>Login</th>\n            <td mat-cell *matCellDef=\"let row\">{{row.login}}</td>\n        </ng-container> \n\n\n        <!-- Empresa -->\n        <ng-container matColumnDef=\"empresaid\">\n          <th mat-header-cell *matHeaderCellDef>Empresa</th>\n          <td mat-cell *matCellDef=\"let row\">{{row.empresaid}}</td>\n      </ng-container> \n       \n      <ng-container matColumnDef=\"grupoUsuarioid\">\n        <th mat-header-cell *matHeaderCellDef>Tipo de Usuário</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.grupoUsuarioid}}</td>\n    </ng-container> \n\n\n <!-- status -->\n <ng-container matColumnDef=\"bloqueado\">\n  <th mat-header-cell *matHeaderCellDef>Bloqueado</th>\n    <td mat-cell *matCellDef=\"let row\">\n      <div *ngIf=\"row.bloqueado\" >\n        <i class=\"material-icons\">\n          lock\n        </i>\n      </div>\n      <div *ngIf=\"!row.bloqueado\" >\n        <i class=\"material-icons\">  \n          lock_open\n        </i>\n      </div>\n    </td>\n  </ng-container>\n\n\n\n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n      \n         \n          <a (click)=\"editarUsuario(row.id )\" class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            \n            <a *ngIf=\"userAutenticado\" (click)=\"deletarUsuario(row.id)\"  class=\"delete\">\n              \n                <i class=\"material-icons\">\n                    delete \n                           \n                </i>\n              \n            </a>\n           \n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\">teste</tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      \n      \n\n    </table>\n\n</div>\n","import { TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { GrupoUsuario } from './../../../models/usuarios/GrupoUsuarios';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Router } from '@angular/router';\nimport { map, catchError, take, tap, elementAt } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Endpoint } from './../../../Negocio/Endpoint';\n\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatTable } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { EmpresaService } from './../../../services/empresa.service';\nimport { UsuarioService } from './../../../services/usuario.service';\nimport { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { __await } from 'tslib';\nimport { FooterComponent } from '../../template/footer/footer.component';\nimport { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { UsuarioCreateComponent } from '../usuario-create/usuario-create.component';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { UsuarioUpdateComponent } from '../usuario-update/usuario-update.component';\nimport { UsuarioDeleteComponent } from '../usuario-delete/usuario-delete.component';\n\n\n@Component({\n  selector: 'app-usuario-read',\n  templateUrl: './usuario-read.component.html',\n  styleUrls: ['./usuario-read.component.css']\n})\n\n\nexport class UsuarioReadComponent implements OnInit {\n\n  usuario : Usuario[];\n  userAutenticado : boolean = false; \n  \n  displayedColumns = ['id','nome','login','empresaid','grupoUsuarioid','bloqueado','action']  \n \n  constructor(\n              public dialog : MatDialog,\n              public overlay : Overlay,\n              private serviceEmpresa: ServiceAllService<Empresa>,\n              private serviceUsuario : ServiceAllService<Usuario>,\n              private _utilService : UtilService, \n              private router : Router,\n\n             ) \n             { }\n\n\n  ngOnInit(): void {\n     this.getUser();\n  }\n  \n\n\n  addUsuario(): void{\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioCreateComponent, {\n          width : '700px',\n          height : '820px',\n          scrollStrategy\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de usuários\",true);\n    }\n  }\n\n\n  editarUsuario(id : string): void{\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioUpdateComponent, {\n          width : '700px',\n          height : '670px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de usuários\",true);\n    }\n  }\n\n\n  deletarUsuario(id : string): void{\n    \n    if(this._utilService.Sessao().GrupoUsuario == TipoUsuario.Master || this._utilService.Sessao().GrupoUsuario == TipoUsuario.Administrador)\n    {\n        const scrollStrategy = this.overlay.scrollStrategies.reposition();\n        const dialogRef = this.dialog.open(UsuarioDeleteComponent, {\n          width : '500px',\n          height : '260px',\n          scrollStrategy,\n          id\n\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          console.log(`Dialog result: ${result}`);\n        });\n    }else{\n      this._utilService.showMessage(\"Você não possui permissão para criação de usuários\",true);\n    }\n  }\n\n\n  async getUser() {\n      \n      let filtroUsuario = (<HTMLSelectElement>document.getElementById('busca')).value;\n\n      let empId = this._utilService.Sessao().IdEmpresa;\n      let grpId = Number(this._utilService.Sessao().GrupoUsuario);\n      let logado =  Number(this._utilService.Sessao().UsuarioId);\n      this.userAutenticado = grpId == TipoUsuario.Usuario ? false : true;\n  \n      this.serviceUsuario.read(Endpoint.Usuario).subscribe(u =>{\n        u = u;\n        let responseUsuarios = u;\n\n        let usuarioFIltrados = new Array();\n         \n        if (filtroUsuario){\n           \n          for (let index = 0; index < responseUsuarios.length; index++) {\n            const element = responseUsuarios[index];\n              if (element.nome.toLowerCase().includes(filtroUsuario.toLowerCase()))\n                usuarioFIltrados.push(element);\n          }\n          responseUsuarios = new Array();\n          responseUsuarios = usuarioFIltrados;    \n        }\n\n        this.serviceEmpresa.read(Endpoint.Empresa).subscribe(e => {\n          e = e;     \n          let responseEmpresa = e;\n\n          this.usuario = new Array();\n          let empresaID = null;\n          let idEmpresa = null;\n          let IdEmpresaPai = null;\n\n          for (let index = 0; index < responseUsuarios.length; index++) {\n            const usr = responseUsuarios[index];\n            \n                  for (let index = 0; index <  responseEmpresa.length; index++) {\n                    const emp =  responseEmpresa[index];\n                    \n                    if(usr.empresaid == emp.id.toString().trim())\n                    {\n                      empresaID = emp.id;\n                      usr.empresaid = emp.razaoSocial;\n                      usr.grupoUsuarioid = usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpAdm\") ? \"Administrador\"\n                                         : usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpsis\") ? \"Sistema\" \n                                         : usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpUs\") ? \"Usuario\" \n                                         : usr.grupoUsuarioid == localStorage.getItem(\"grpUsGrpMs\") ? \"Master\" \n                                         : usr.grupoUsuarioid;\n\n                      idEmpresa = emp.id;\n                      IdEmpresaPai = emp.empresaPai;\n                      \n                        if(grpId == TipoUsuario.Administrador)\n                        {\n                          this.usuario.push(usr);\n                            break;  \n                          }\n                          else if(grpId == TipoUsuario.Master)\n                          { \n                            if(idEmpresa == empId || IdEmpresaPai == empId && usr.grupoUsuarioid != \"Administrador\")\n                            {\n                              this.usuario.push(usr);\n                              empresaID = null;\n                              idEmpresa = null;\n                              break;\n                            }\n                          }\n                          else if(grpId == TipoUsuario.Usuario)\n                          { \n                            \n                            if(idEmpresa == empId && usr.id == logado)\n                            {\n                              this.usuario.push(usr);\n                              empresaID = null;\n                              idEmpresa = null;\n                              break;\n                            }\n                            \n                          }\n\n                        }\n                  }\n          }\n      })\n  })\n   \n  \n }\n  \n\n}\n\n\n\n","import { TipoUsuario, TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Usuario } from '../../../models/usuarios/modelLogin';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { UsuarioReadComponent } from '../usuario-read/usuario-read.component';\n\n\n\n@Component({\n  selector: 'app-usuario-update',\n  templateUrl: './usuario-update.component.html',\n  styleUrls: ['./usuario-update.component.css']\n})\nexport class UsuarioUpdateComponent implements OnInit {\n\n  empresa : Empresa[];\n  dadosEmpresa : Empresa;\n  usuario : Usuario ;\n  userAutenticado : boolean = false; \n  \n  comboTipousuario = [];\n  UsuarioReadComponent: any;\n\n\n  constructor(private usarioService : ServiceAllService<Usuario>,\n             private empresaService : ServiceAllService<Empresa>,\n             private utilService: UtilService,\n             private router : Router,\n             public dialogRef : MatDialogRef<UsuarioUpdateComponent>,\n             ) { }\n\n  ngOnInit(): void {\n    this.buscarUsuario();\n    this.buscarEmpresa();\n\n  }\n\n  updateUsuario() : void {\n  \n        let grpId = Number(localStorage.getItem(\"grpUs\"));\n        this.usuario.grupoUsuarioid = this.usuario.grupoUsuarioid == \"Administrador\" ? TipoUsuario.Administrador.toString() \n                                        :this.usuario.grupoUsuarioid == \"Sistema\" ? TipoUsuario.Sistema.toString()\n                                        : this.usuario.grupoUsuarioid == \"Usuario\" ? TipoUsuario.Usuario.toString()\n                                        : this.usuario.grupoUsuarioid == \"Master\" ? TipoUsuario.Master.toString()\n                                        : null \n          \n            this.usarioService.read(Endpoint.Usuario).subscribe(user => {\n              user = user;\n                                    \n              let ativo = user.filter(x => x.login.toLowerCase() == this.usuario.login.toLowerCase() && x.empresaid == this.usuario.empresaid && x.id == this.usuario.id);\n          \n                if (ativo.length > 0 )\n                {\n                    this.usarioService.update(this.usuario, Endpoint.Usuario).subscribe(() => {\n                      this.utilService.showMessage(\"Usuário Atualizado com Sucesso!\")\n                      this.fecharPopup();\n                      this.utilService.atualizaRota();\n                    })\n                    user =  new Array();\n                  }else if(grpId == TipoUsuario.Administrador){\n                      \n                    this.usarioService.update(this.usuario, Endpoint.Usuario).subscribe(() => {\n                        this.utilService.showMessage(\"Usuário Atualizado com Sucesso!\")\n                        this.fecharPopup();\n                        this.utilService.atualizaRota();\n                        \n                      })\n                      user =  new Array();\n                  }else{\n\n                    this.utilService.showMessage('A empresa do Usuário não pode ser Alterada', false);\n                    this.usuario.login =  null; \n                    user =  new Array();\n                }\n            })\n\n  }\n\n  buscarEmpresa() {\n    \n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    this.empresaService.read(Endpoint.Empresa).subscribe(emp => {\n      emp = emp;\n\n      this.empresa =  new Array()\n\n       grpId==TipoUsuario.Administrador ? this.empresa = emp : \n                      grpId == TipoUsuario.Master && emp.filter(x => x.id == Number(empId))\n                      || grpId == TipoUsuario.Usuario && emp.filter(x => x.id == Number(empId))\n                      || emp.filter(x => x.empresaPai == Number(empId));\n                   \n    \n      \n    /*  emp.forEach(empresasCarregadas => {\n        \n        if(grpId == TipoUsuario.Administrador)\n          this.empresa.push(empresasCarregadas)\n        else if (grpId == TipoUsuario.Master && empId == empresasCarregadas.id.toString() || grpId == TipoUsuario.Usuario && empId == empresasCarregadas.id.toString() || empId == empresasCarregadas.empresaPai.toString())\n            this.empresa.push(empresasCarregadas)\n        });\n      */  \n\n    });\n  }\n\n  buscarUsuario(){\n\n      this.usarioService.readById(this.dialogRef.id, Endpoint.Usuario).subscribe(usuario => {\n      this.usuario = usuario;\n\n      let tipousuario = usuario.grupoUsuarioid;\n      this.usuario.grupoUsuarioid = this.usuario.grupoUsuarioid == TipoUsuario.Administrador.toString() ? \"Administrador\"\n                                   :this.usuario.grupoUsuarioid == TipoUsuario.Sistema.toString()  ? \"Sistema\"\n                                   : this.usuario.grupoUsuarioid == TipoUsuario.Usuario.toString()  ? \"Usuario\" \n                                   : this.usuario.grupoUsuarioid == TipoUsuario.Master.toString()  ? \"Master\" \n                                   : null \n     \n     this.carregarComboTipoUsuario(this.usuario.grupoUsuarioid, tipousuario); \n    });\n  }\n\n  carregarComboTipoUsuario(usuario : string, tipousuario : string) : void  {\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    \n      for (var tipo in TipoUsuario) {\n      \n           if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Administrador ) {\n    \n              this.comboTipousuario.push(tipo)\n              \n            }\n            else if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Master ){\n    \n            if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Master || TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n                this.comboTipousuario.push(tipo);\n          \n            }\n            else if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Usuario ){\n      \n              if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n                  this.comboTipousuario.push(tipo);\n            \n            }\n      }\n  }\n\n  fecharPopup(): void{\n    this.dialogRef.close();\n  }\n\n\n\n}\n","<mat-card>\n    <mat-card-title>Alterar Usuário</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"usuario.nome\" name=\"nome\">\n            </mat-form-field>\n            \n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Senha\" type=\"password\"\n                [(ngModel)]=\"usuario.senha\" name=\"senha\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Tipo de Usuário\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.grupoUsuarioid\" placeholder=\"GrupoUsuarioID\">\n                         <mat-option *ngFor=\"let tipo of comboTipousuario\" [value]=\"tipo\">\n                        {{tipo}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.empresaid\" placeholder=\"EmpresaID\">\n                    <mat-option *ngFor=\"let dadosEmpresa of empresa\" [value]=\"dadosEmpresa.id\">\n                       {{dadosEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Bloqueado\">\n                    <input name=\"status\" [(ngModel)]=\"usuario.bloqueado\" [checked]=\"usuario.bloqueado\" type=\"checkbox\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Profissional\">\n                    <input name=\"profissional\" [(ngModel)]=\"usuario.profissional\" [checked]=\"usuario.profissional\" type=\"checkbox\">\n            </mat-form-field>\n\n      \n        </form>\n\n        <button *ngIf=\"usuario.nome && usuario.login && usuario.grupoUsuarioid && usuario.empresaid\" mat-raised-button (click)=\"updateUsuario()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-usuario',\n  templateUrl: './usuario.component.html',\n  styleUrls: ['./usuario.component.css']\n})\nexport class UsuarioComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>usuario works!</p>\n","import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appRed]'\n})\nexport class RedDirective {\n\n  constructor(private el: ElementRef) { \n    el.nativeElement.style.color = '#e35e6b';\n  }\n\n}\n","export class Unidade {\r\n    id? : number\r\n    dtCriacao : Date\r\n    nomeUnidade : string\r\n    empresaid : number\r\n    criadoPor : number\r\n    bloqueado : boolean\r\n}","export class Acesso{\r\n    login : string\r\n    senha : string\r\n    nome : string\r\n}","export class GrupoUsuario{\r\n    id? : number\r\n    dtCriacao : Date\r\n    nome : string\r\n    usuarioApp : boolean\r\n    empresaId : number\r\n    criadoPor : number\r\n    bloqueado : boolean\r\n\r\n}","import { convertActionBinding, ConvertActionBindingResult } from '@angular/compiler/src/compiler_util/expression_converter';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport enum TipoUsuario {\r\n    \r\n    Administrador =  Number(localStorage.getItem(\"grpUsGrpAdm\")),\r\n    Sistema = Number(localStorage.getItem(\"grpUsGrpsis\")),\r\n    Usuario = Number(localStorage.getItem(\"grpUsGrpUs\")),\r\n    Master = Number(localStorage.getItem(\"grpUsGrpMs\")),\r\n}\r\n\r\nexport const TipoUsuarioSistema = new Map<string, number>([\r\n['Administrador', Number(localStorage.getItem(\"grpUsGrpAdm\"))],\r\n['Sistema', Number(localStorage.getItem(\"grpUsGrpsis\"))],\r\n['Usuario', Number(localStorage.getItem(\"grpUsGrpUs\"))],\r\n['Master', Number(localStorage.getItem(\"grpUsGrpMs\"))]\r\n])\r\n","export class Usuario {\r\nid ? : number\r\ndtCriacao : Date\r\nnome : string\r\nlogin : string\r\nsenha : string\r\ncracha : string\r\nbolSistema: boolean\r\nbolResetaSenha : boolean\r\ndataTrocaSenha : Date\r\ncriadoPor : number\r\nbloqueado : boolean\r\nempresaid : string\r\ngrupoUsuarioid : string\r\nprofissional : boolean\r\n}\r\n","import { GrupoUsuario } from './../models/usuarios/GrupoUsuarios';\nimport { ServiceAllService } from './service-all.service';\nimport { Endpoint } from './../Negocio/Endpoint';\nimport { TipoUsuario, TipoUsuarioSistema } from './../models/usuarios/enumUsuarios';\nimport { ObjetoToken } from './../models/Token/ObjetoToken';\nimport { Empresa } from './../models/empresa/ModelEmpresa';\nimport { Acesso } from '../models/acessoModel';\nimport { UtilService } from './util.service';\n\nimport { environment } from './../../environments/environment';\n\nimport { map, catchError, take, retry } from 'rxjs/operators';\nimport { Observable, EMPTY, from, empty, pipe } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Router } from '@angular/router';\nimport { Injectable, EventEmitter  } from '@angular/core';\nimport { stringify } from 'querystring';\nimport { Token } from '@angular/compiler/src/ml_parser/lexer';\nimport { STRING_TYPE } from '@angular/compiler';\n\nconst httpOptions = {\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  title = 'multiple-env-demo';\n  environmentName = '';\n  environmentUrl = 'Debug api';\n  acesso : Acesso = new Acesso();\n  objetoToken : ObjetoToken []\n\n  private tipoUsuarios = [];\n\n  private usuarioAutenticado: boolean = false; \n\n  mostrarMenuEmitter = new EventEmitter<boolean>();\n  mostrarLoginEmitter = new EventEmitter<boolean>();\n  \n\n  constructor(private router: Router,\n              private snackbar : MatSnackBar,\n              private http: HttpClient,\n              private utilService : UtilService,\n               \n              ) { \n                this.environmentName = environment.environmentName;\n              this.environmentUrl =  environment.BASE_URL;\n              }\n\n  async logarSistema(acesso: Acesso) {\n    \n    try {\n      let response = await this.http.post<ObjetoToken>(this.environmentUrl + Endpoint.Token, acesso).toPromise()\n     \n\n       if (response != null && !response.bloqueado && !response.statusEmpresa && !response.erroLogin )\n          {\n\n            this.mostrarMenuEmitter.emit(true);\n            this.mostrarLoginEmitter.emit(false)\n            this.usuarioAutenticado = true;\n            this.router.navigate(['/']);\n\n            localStorage.setItem(\"tId\", response.token )\n            localStorage.setItem(\"usId\", response.id)\n            localStorage.setItem(\"grpUs\", response.grupoUsuarioid)\n           \n            localStorage.setItem(\"stUs\", response.bloqueado);\n            localStorage.setItem(\"empId\", response.empresaid);\n            this.utilService.showMessage(\"Seja Bem Vindo!  \" + acesso.login , false);\n\n            response.gruposUsuarios.forEach(element => {\n\n              if (element.nome == \"Administrador\")\n                  localStorage.setItem(\"grpUsGrpAdm\", element.id.toString())\n              else if (element.nome == \"Sistema\")\n                  localStorage.setItem(\"grpUsGrpsis\", element.id.toString())\n              else if (element.nome == \"Usuario\")\n                  localStorage.setItem(\"grpUsGrpUs\", element.id.toString())\n              else if (element.nome == \"Master\")\n                  localStorage.setItem(\"grpUsGrpMs\", element.id.toString())\n            });\n            \n          }\n          else\n          {\n            this.usuarioAutenticado = false;\n            this.mostrarMenuEmitter.emit(false);\n            this.mostrarLoginEmitter.emit(true);\n            \n            if (response.bloqueado)\n              this.utilService.showMessage(\"Usuário bloqueado!\", true);\n            else if (response.statusEmpresa)\n              this.utilService.showMessage(\"Empresa bloqueada!\", true);\n            else \n              this.utilService.showMessage(\"Usuário ou senha Inválido!\", true);\n        }\n      \n      } catch (e) {\n     \n          this.utilService.showMessage(\"Erro de acesso a API\" + e.message, true);\n      }\n    \n  }\n  sairSistema(){\n    this.mostrarMenuEmitter.emit(false);\n    this.mostrarLoginEmitter.emit(true)\n    localStorage.removeItem(\"tId\");\n    localStorage.removeItem(\"usId\");\n    localStorage.removeItem(\"grpUs\");\n    localStorage.removeItem(\"stUs\");\n    localStorage.removeItem(\"empId\");\n    this.utilService.showMessage(\"Até logo! \", false);\n    this.router.navigate(['/login']);\n  }\n\n  header(){\n    var reqHeader = new HttpHeaders({ \n        'Content-Type' : 'application/json; charset=utf-8',\n        'Accept'       : 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('tId')\n    })\n    return { headers: reqHeader };\n  }\n\n  TipoUsuarioSistema(){\n    \n    TipoUsuarioSistema.forEach(element => {\n      this.tipoUsuarios.push(element)\n    });\n   return this.tipoUsuarios;\n  }\n  \n}\n\n\n\n\n\n","import { LoginService } from 'src/app/services/login.service';\n\nimport { UtilService } from './util.service';\nimport { environment } from '../../environments/environment';\nimport { Component } from '@angular/core';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Product } from '../models/produtos/product.model';\nimport { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  title = '';\n  environmentName = '';\n  environmentUrl = '';\n   \nconstructor(private snackbar : MatSnackBar,\n              private http : HttpClient,\n              private utilService: UtilService,\n              private loginservice : LoginService\n              \n             ) { \n              this.environmentName = environment.environmentName;\n              this.environmentUrl =  environment.BASE_URL + '/Produto';\n             }\n\n    //Criar um produto\n    create(product : Product): Observable<Product>{\n      return this.http.post<Product>(this.environmentUrl, product, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n    \n    // Buscar todos Get All\n    read(): Observable<Product[]>{\n      return this.http.get<Product[]>(this.environmentUrl, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      ); \n    }\n\n   //Buscar um produto por id\n   readById(id: string): Observable<Product>{\n    const url = `${this.environmentUrl}/${id}`\n\n      return this.http.get<Product>(url, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n   }\n\n   // Atualizar Produto \n   update(product: Product): Observable<Product> {    \n    return this.http.put<Product>(this.environmentUrl, product, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n    );\n   }\n\n   delete(id: number) : Observable<Product>{\n    const url = `${this.environmentUrl}/${id}`      \n    return this.http.delete<Product>(url, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n    );\n\n   }\n\n}\n","import { map, catchError, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { LoginService } from 'src/app/services/login.service';\nimport { UtilService } from './util.service';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceAllService <T>{\n\n  title = '';\n  environmentName = '';\n  environmentUrl = '';\n\n  constructor(\n    private snackbar : MatSnackBar,\n              private http : HttpClient,\n              private utilService: UtilService,\n              private loginservice : LoginService\n              ) {\n                this.environmentName = environment.environmentName;\n                this.environmentUrl =  environment.BASE_URL;\n              }\n\n\n    //Criar Cadastro\n    create(T : T, tipo: string) : Observable <T>{\n      return this.http.post<T>(this.environmentUrl + tipo , T, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    // Buscar todos Get All\n    read(tipo: string): Observable<T[]>{\n      return this.http.get<T[]>(this.environmentUrl + tipo, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      ); \n    }\n\n    //Buscar um cadastro por id\n    readById(id: string, tipo: string): Observable<T>{\n    const url = `${this.environmentUrl + tipo}/${id}`\n\n      return this.http.get<T>(url, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    // Atualizar Produto \n    update(T: T, tipo: string): Observable<T> {    \n    return this.http.put<T>(this.environmentUrl + tipo, T, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    delete(id: number, tipo : string) : Observable<T>{\n      const url = `${this.environmentUrl + tipo}/${id}`      \n      return this.http.delete<T>(url, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n      );\n\n    }\n\n}\n","import { HeaderService } from './../components/template/header/header.service';\nimport { ObjetoToken } from './../models/Token/ObjetoToken';\n\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, EMPTY } from 'rxjs';\nimport { Component, Injectable } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TipoUsuario } from '../models/usuarios/enumUsuarios';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { isNull } from '@angular/compiler/src/output/output_ast';\nimport { isNullOrUndefined } from 'util';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilService {\n\n  constructor(private snackbar : MatSnackBar,\n             private http : HttpClient,\n             private headerService : HeaderService,\n             private router : Router,\n             public overlay : Overlay,\n             public dialog : MatDialog\n\n             ) { }\n\n\n  showMessage(msg : string, isErro: boolean = false) : void { \n    this.snackbar.open(msg, 'X' , { \n      duration : 3000,\n      horizontalPosition: \"right\",\n      verticalPosition : \"top\",\n      panelClass : isErro ? ['msg-error'] : ['msg-sucess']\n    })\n\n}\n\n  erroHandler(e: any) : Observable<any>{\n    this.showMessage(\"Erro ao Acessar a API!\", true )\n    return EMPTY \n  }\n\n  convertToBase64(txt : string){\n    return btoa(txt);\n  }\n\n  convertBase64toText(txt: string){\n    return atob(txt);\n\n  }\n\n  AtualizarMenu(titulo : string, icone : string, urlIcone : string ) {\n      this.headerService.headerData.title = titulo ;\n      this.headerService.headerData.icon = icone\n      this.headerService.headerData.routeUrl = urlIcone\n  \n  }\n\n  Sessao(){\n    \n    let chaveEntrada = this.convertBase64toText(\"123\");\n    \n    var dados =  {\n        IdEmpresa : localStorage.getItem(\"empId\"),\n        GrupoUsuario : Number(localStorage.getItem(\"grpUs\")),\n        UsuarioId : Number(localStorage.getItem(\"usId\")),\n        StatusUsuario : localStorage.getItem(\"stUs\"),\n        TokenSessao : chaveEntrada \n\n    }\n    return dados\n  }\n\n\n  atualizaRota() {\n    this.router.routeReuseStrategy.shouldReuseRoute = function(){return false;};\n  \n    let currentUrl = this.router.url + '?';\n  \n    this.router.navigateByUrl(currentUrl)\n      .then(() => {\n        this.router.navigated = false;\n        this.router.navigate([this.router.url]);\n      });\n  }\n\n  Popup(id : string, T : any, largura : string, altura: string ): void {\n   \n    const scrollStrategy = this.overlay.scrollStrategies.reposition();\n    const dialogRef = this.dialog.open(T, {\n        width : largura,\n        height : altura,\n        scrollStrategy,\n        id\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        console.log(`Dialog result: ${result}`);\n      });\n\n  }\n\n}","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-crud',\n  templateUrl: './chamado-crud.component.html',\n  styleUrls: ['./chamado-crud.component.css']\n})\nexport class ChamadoCrudComponent implements OnInit {\n\n  constructor(private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  navigateToChamadoCreate():void{\n    this.router.navigate(['chamados/read'])\n  }\n\n}\n","<button mat-raised-button (click)=\"navigateToChamadoCreate()\"\n        color=\"primary\" > \n        Novo\n</button>\n\n\n<app-chamado-read></app-chamado-read>\n\n","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-empresa',\n  templateUrl: './empresa.component.html',\n  styleUrls: ['./empresa.component.css']\n})\nexport class EmpresaComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  navigateToEmpresaCreate() : void {\n    this.router.navigate(['empresa/create'])\n  }\n\n\n}\n","<app-empresa-read></app-empresa-read>\n\n","import { UtilService } from './../../services/util.service';\nimport { TipoUsuario } from './../../models/usuarios/enumUsuarios';\nimport { Endpoint } from './../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { HeaderService } from './../../components/template/header/header.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ok } from 'assert';\nimport { Product } from 'src/app/models/produtos/product.model';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\nprodutos : Product[];\n\n\n  constructor(private serviceProdutos : ServiceAllService<Product>,\n              private headerService : HeaderService,\n              private utilService : UtilService\n              ) \n              {\n               // this.headerService.headerData = {\n               //  title : 'Início',\n              //    icon : 'home',\n              //    routeUrl : ''\n               // }\n              }\n\n  ngOnInit(): void {\n    this.ObterComponentes();\n    this.utilService.AtualizarMenu(\"Início\",\"home\",'');\n  }\n  \n  \n  ObterComponentes(){\n     \n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    this.serviceProdutos.read(Endpoint.Produto).subscribe(prod => {\n      prod = prod;\n\n      this.produtos = new Array();\n        prod.forEach(element => {\n          if (empId == element.empresaid)\n              this.produtos.push(element)\n        });\n    });\n  }\n}\n","<mat-card class=\"home mat-elevation-z3\">\n    <mat-card-title class=\"title\">\n        Bem Vindo\n    </mat-card-title>\n</mat-card>\n\n<div class=\"content\">\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\n      <div fxFlex=\"10%\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let prod of produtos\">\n        <mat-card  class=\" mat-elevation-z3\">\n            <mat-card-header>\n                <mat-card-title>{{prod.nome}}</mat-card-title>\n            </mat-card-header>\n            <a *ngIf=\"!prod.bloqueado\" mat-list-item routerLink=\"{{prod.nome}}\" >\n                <i class=\"material-icons\" >\n                   schedule\n                </i>\n            </a>\n            <mat-card-footer>\n                <div *ngIf=\"prod.bloqueado\">\n                    <i class=\"material-icons\" >\n                        block\n                     </i>\n                </div>\n            </mat-card-footer>\n\n        </mat-card>\n      </div>\n    </div>\n  </div>","import { HeaderService } from './../../components/template/header/header.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router} from '@angular/router';\n\n\n@Component({\n  selector: 'app-product-crud',\n  templateUrl: './product-crud.component.html',\n  styleUrls: ['./product-crud.component.css']\n})\nexport class ProductCrudComponent implements OnInit {\n\n  constructor(private router : Router,\n             private headerService : HeaderService\n             ) { \n\n    this.headerService.headerData = {\n      title : 'Cadastro de Produtos',\n      icon : 'storefront',\n      routeUrl : '/products'\n    }\n\n\n  }\n\n  ngOnInit(): void {\n  }\n\nnavigateToProductsCreate() : void {\n  this.router.navigate(['products/create'])\n}\n\n}\n","<app-product-read></app-product-read>\n\n","import { stringify } from 'querystring';\nimport { query } from '@angular/animations';\nimport { UsuarioReadComponent } from './../../components/usuario/usuario-read/usuario-read.component';\nimport { Empresa } from './../../models/empresa/ModelEmpresa';\nimport { Endpoint } from './../../Negocio/Endpoint';\nimport { UsuarioService } from './../../services/usuario.service';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\n\n@Component({\n  selector: 'app-usuario-crud',\n  templateUrl: './usuario-crud.component.html',\n  styleUrls: ['./usuario-crud.component.css']\n})\nexport class UsuarioCrudComponent implements OnInit {\n\n  constructor(\n              private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  \n}\n","<app-usuario-read></app-usuario-read>\n\n\n\n\n\n","export const environment = {\n  production: false,\n  environmentName: \"QA\",\n  apiUrl:  'http://localhost:5000',\n  BASE_URL : '/api'\n\n\n};\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}