{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Aplicacoes/agenda/agenda-create/agenda-create.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-create/agenda-create.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-delete/agenda-delete.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-delete/agenda-delete.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-read/agenda-read.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-read/agenda-read.component.html","webpack:///src/app/Aplicacoes/agenda/agenda-update/agenda-update.component.ts","webpack:///src/app/Aplicacoes/agenda/agenda-update/agenda-update.component.html","webpack:///src/app/Aplicacoes/agenda/home-agenda/home-agenda.component.ts","webpack:///src/app/Aplicacoes/agenda/home-agenda/home-agenda.component.html","webpack:///src/app/Negocio/Aplicacao.ts","webpack:///src/app/Negocio/Endpoint.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.conponent.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/chamados/chamado-create/chamado-create.component.ts","webpack:///src/app/components/chamados/chamado-create/chamado-create.component.html","webpack:///src/app/components/chamados/chamado-delete/chamado-delete.component.ts","webpack:///src/app/components/chamados/chamado-delete/chamado-delete.component.html","webpack:///src/app/components/chamados/chamado-read/chamado-read.component.ts","webpack:///src/app/components/chamados/chamado-read/chamado-read.component.html","webpack:///src/app/components/chamados/chamado-update/chamado-update.component.ts","webpack:///src/app/components/chamados/chamado-update/chamado-update.component.html","webpack:///src/app/components/empresa/empresa-create/empresa-create.component.ts","webpack:///src/app/components/empresa/empresa-create/empresa-create.component.html","webpack:///src/app/components/empresa/empresa-delete/empresa-delete.component.ts","webpack:///src/app/components/empresa/empresa-delete/empresa-delete.component.html","webpack:///src/app/components/empresa/empresa-read/empresa-read.component.ts","webpack:///src/app/components/empresa/empresa-read/empresa-read.component.html","webpack:///src/app/components/empresa/empresa-update/empresa-update.component.ts","webpack:///src/app/components/empresa/empresa-update/empresa-update.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/product/product-create/product-create.component.ts","webpack:///src/app/components/product/product-create/product-create.component.html","webpack:///src/app/components/product/product-delete/product-delete.component.ts","webpack:///src/app/components/product/product-delete/product-delete.component.html","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos-datasource.ts","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos.component.ts","webpack:///src/app/components/product/product-read-tableprodutos/product-read-tableprodutos.component.html","webpack:///src/app/components/product/product-read/product-read.component.ts","webpack:///src/app/components/product/product-read/product-read.component.html","webpack:///src/app/components/product/product-update/product-update.component.ts","webpack:///src/app/components/product/product-update/product-update.component.html","webpack:///src/app/components/template/footer/footer.component.ts","webpack:///src/app/components/template/footer/footer.component.html","webpack:///src/app/components/template/header/header.component.ts","webpack:///src/app/components/template/header/header.component.html","webpack:///src/app/components/template/header/header.service.ts","webpack:///src/app/components/template/nav/nav.component.ts","webpack:///src/app/components/template/nav/nav.component.html","webpack:///src/app/components/usuario/usuario-create/usuario-create.component.ts","webpack:///src/app/components/usuario/usuario-create/usuario-create.component.html","webpack:///src/app/components/usuario/usuario-delete/usuario-delete.component.ts","webpack:///src/app/components/usuario/usuario-delete/usuario-delete.component.html","webpack:///src/app/components/usuario/usuario-read/usuario-read.component.html","webpack:///src/app/components/usuario/usuario-read/usuario-read.component.ts","webpack:///src/app/components/usuario/usuario-update/usuario-update.component.ts","webpack:///src/app/components/usuario/usuario-update/usuario-update.component.html","webpack:///src/app/components/usuario/usuario.component.ts","webpack:///src/app/components/usuario/usuario.component.html","webpack:///src/app/diretivas/red.directive.ts","webpack:///src/app/models/acessoModel.ts","webpack:///src/app/models/usuarios/GrupoUsuarios.ts","webpack:///src/app/models/usuarios/enumUsuarios.ts","webpack:///src/app/models/usuarios/modelLogin.ts","webpack:///src/app/services/login.service.ts","webpack:///src/app/services/product.service.ts","webpack:///src/app/services/service-all.service.ts","webpack:///src/app/services/util.service.ts","webpack:///src/app/views/chamado-crud/chamado-crud.component.ts","webpack:///src/app/views/chamado-crud/chamado-crud.component.html","webpack:///src/app/views/empresa/empresa.component.ts","webpack:///src/app/views/empresa/empresa.component.html","webpack:///src/app/views/home/home.component.ts","webpack:///src/app/views/home/home.component.html","webpack:///src/app/views/product-crud/product-crud.component.ts","webpack:///src/app/views/product-crud/product-crud.component.html","webpack:///src/app/views/usuario-crud/usuario-crud.component.ts","webpack:///src/app/views/usuario-crud/usuario-crud.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AgendaCreateComponent","route","dialogRef","_serviceEmpresa","_serviceAgenda","_serviceUnidade","_serviceSala","_serviceGrupoAgenda","_serviceUsuario","_utilService","agenda","DtCriacao","Date","nomeAgenda","Profissionalid","Empresaid","Unidadeid","Salaid","substituicao","GrupoAgendaid","vigenciaInicio","vigenciaFim","considerarFeriado","bloqueado","carregaCombos","empId","localStorage","getItem","Number","create","Agenda","subscribe","ag","showMessage","navigate","grpId","carregaComboEmpresa","carregaComboUnidade","carregaComboSala","carregaComboGrupoAgenda","read","Empresa","emp","empresa","Usuario","pro","filter","x","profissional","Administrador","comboProfissional","Master","empresaid","toString","Unidade","un","comboUnidade","Sala","sl","comboSala","GrupoAgenda","ga","comboTipoGrupoAgenda","close","fecharPopup","selector","templateUrl","styleUrls","AgendaDeleteComponent","AgendaReadComponent","dialog","overlay","UtilService","_repAgenda","Colunas","AtualizarMenu","buscarAgenda","filtroAgenda","document","getElementById","value","toLowerCase","includes","Array","scrollStrategy","scrollStrategies","reposition","open","width","height","afterClosed","result","console","log","addNovaAgenda","AgendaUpdateComponent","router","utilService","agendaService","serviceUnidade","serviceSala","serviceGrupoAGenda","serviceEmpresa","serviceUsuario","buscarAgendaPorId","update","snapshot","paramMap","get","readById","agId","pr","cancel","HomeAgendaComponent","Aplicacao","TipoAplicacao","Map","Endpoint","routes","path","component","children","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","authService","nome","mostrarMenu","mostrarlogin","mostrarMenuEmitter","mostrar","mostrarLoginEmitter","mostrarLogin","AppModule","provide","useValue","declarations","providers","bootstrap","ChamadoCreateComponent","ChamadoDeleteComponent","ChamadoReadComponent","ChamadoUpdateComponent","EmpresaCreateComponent","servicoEmpresa","dtCriacao","cnpj","razaoSocial","nomeFantasia","inscricaoEstadual","inscricaoMunicipal","cnes","codPIS","observacao","codCnae","empresaPai","criadoPor","empPai","isValid","bemp","retornoEmp","retornomaster","length","EmpresaDeleteComponent","mensagem","BuscarEmpresa","existeUsuario","usr","excluirEmpresa","EmpresaReadComponent","displayedColumns","buscarEmpresa","filtroEmpresa","forEach","element","push","master","empresaFIltrada","index","navigateToEmpresaCreate","EmpresaUpdateComponent","empresaService","usuariologado","ObterEmpresa","error","LoginComponent","authservice","acesso","keyEvent","which","logarSistema","ProductCreateComponent","ProdutoEmpresa","ServiceEmpresa","comboProduto","product","valor","buscarProduto","Produto","p","ativo","associarProdutoEmpresa","ProductDeleteComponent","productService","deleteProduto","deleteProduct","EXAMPLE_DATA","name","ProductReadTableprodutosDataSource","data","dataMutations","paginator","page","sort","sortChange","pipe","getPagedData","getSortedData","startIndex","pageIndex","pageSize","splice","active","direction","a","b","isAsc","compare","ProductReadTableprodutosComponent","dataSource","table","ProductReadComponent","serviceProduto","products","navigateToProdutoCreate","ProductUpdateComponent","ProdutoService","updateProduct","FooterComponent","HeaderComponent","headerService","headerData","title","icon","routeUrl","HeaderService","_headerData","next","providedIn","NavComponent","auth","opened","lock","validarAcesso","sairSistema","UsuarioCreateComponent","serviceGrupoUsuario","serviceLogin","usuario","criargrupousuario","comboTipousuario","alimentarCombo","grupoUsuarioId","trim","Sistema","user","login","empresasCarregadas","tipo","hasOwnProperty","isNaN","parseInt","empresaId","GrupoUsuario","UsuarioDeleteComponent","usuarioService","carregaUsuario","deleteUsuario","UsuarioReadComponent","userAutenticado","getUser","filtroUsuario","logado","u","responseUsuarios","usuarioFIltrados","responseEmpresa","empresaID","idEmpresa","IdEmpresaPai","navigateToUsuarioCreate","UsuarioUpdateComponent","usarioService","buscarUsuario","tipousuario","carregarComboTipoUsuario","UsuarioComponent","RedDirective","el","nativeElement","style","color","Acesso","TipoUsuario","TipoUsuarioSistema","httpOptions","headers","LoginService","snackbar","http","environmentName","environmentUrl","tipoUsuarios","usuarioAutenticado","BASE_URL","post","Token","toPromise","response","statusEmpresa","emit","setItem","token","grupoUsuarioid","gruposUsuarios","removeItem","reqHeader","ProductService","loginservice","header","obj","erroHandler","url","put","ServiceAllService","T","msg","isErro","duration","horizontalPosition","verticalPosition","panelClass","txt","btoa","atob","titulo","icone","urlIcone","ChamadoCrudComponent","navigateToChamadoCreate","EmpresaComponent","HomeComponent","serviceProdutos","ObterComponentes","prod","produtos","ProductCrudComponent","UsuarioCrudComponent","environment","production","apiUrl","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACcgC;;AACI;;AACJ;;;;;;AAFwD;;AACpD;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFsD;;AAClD;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFgD;;AAC5C;;AAAA;;;;;;AAeJ;;AACI;;AACJ;;;;;;AAF4D;;AACxD;;AAAA;;;;;;;;AA8BhB;;AAAoG;AAAA;;AAAA;;AAAA;AAAA;;AAChG;;AACJ;;;;QD5DPC,qB;AAuBX,qCAAoBC,KAApB,EACSC,SADT,EAEUC,eAFV,EAGoBC,cAHpB,EAIoBC,eAJpB,EAKoBC,YALpB,EAMoBC,mBANpB,EAOoBC,eAPpB,EAQoBC,YARpB,EAQ8C;AAAA;;AAR1B,aAAAR,KAAA,GAAAA,KAAA;AACX,aAAAC,SAAA,GAAAA,SAAA;AACC,aAAAC,eAAA,GAAAA,eAAA;AACU,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,mBAAA,GAAAA,mBAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AA7BpB,aAAAC,MAAA,GAAkB;AAChBC,mBAAS,EAAE,IAAIC,IAAJ,EADK;AAEhBC,oBAAU,EAAE,IAFI;AAGhBC,wBAAc,EAAE,IAHA;AAIhBC,mBAAS,EAAE,IAJK;AAKhBC,mBAAS,EAAE,IALK;AAMhBC,gBAAM,EAAE,IANQ;AAOhBC,sBAAY,EAAE,KAPE;AAQhBC,uBAAa,EAAE,IARC;AAShBC,wBAAc,EAAE,IATA;AAUhBC,qBAAW,EAAE,IAVG;AAWhBC,2BAAiB,EAAE,KAXH;AAYhBC,mBAAS,EAAE;AAZK,SAAlB;AA8BO;;;;mCAGC;AACL,eAAKC,aAAL;AACF;;;uCAEW;AAAA;;AACX,cAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,eAAKjB,MAAL,CAAYK,SAAZ,GAAwBa,MAAM,CAACH,KAAD,CAA9B;;AAGC,eAAKrB,cAAL,CAAoByB,MAApB,CAA2B,KAAKnB,MAAhC,EAAwC,2DAASoB,MAAjD,EAAyDC,SAAzD,CAAmE,UAAAC,EAAE,EAAI;AACzE,iBAAI,CAACvB,YAAL,CAAkBwB,WAAlB,CAA8B,gCAA9B,EAA+D,KAA/D;;AACA,iBAAI,CAAChC,KAAL,CAAWiC,QAAX,CAAoB,CAAC,gBAAD,CAApB;AACA,WAHA;;AAID,eAAKjC,KAAL,CAAWiC,QAAX,CAAoB,CAAC,gBAAD,CAApB;AACA;;;iCAEK;AACJ,eAAKjC,KAAL,CAAWiC,QAAX,CAAoB,CAAC,gBAAD,CAApB;AACD;;;wCAEY;AACX;AACA,cAAIT,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIQ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEE,eAAKS,mBAAL,CAAyBD,KAAzB,EAAgCV,KAAhC;AACA,eAAKY,mBAAL,CAAyBF,KAAzB,EAAgCV,KAAhC;AACA,eAAKa,gBAAL,CAAsBH,KAAtB,EAA6BV,KAA7B;AACA,eAAKc,uBAAL,CAA6BJ,KAA7B,EAAoCV,KAApC;AACH;;;4CAEmBU,K,EAAgBV,K,EAAa;AAAA;;AAE/C,eAAKtB,eAAL,CAAqBqC,IAArB,CAA0B,2DAASC,OAAnC,EAA4CV,SAA5C,CAAsD,UAAAW,GAAG,EAAI;AAC3D,kBAAI,CAACC,OAAL,GAAeD,GAAf;AACD,WAFD;;AAIA,eAAKlC,eAAL,CAAqBgC,IAArB,CAA0B,2DAASI,OAAnC,EAA4Cb,SAA5C,CAAsD,UAAAc,GAAG,EAAI;AAC3DA,eAAG,GAAGA,GAAG,CAACC,MAAJ,CAAW,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,YAAN;AAAA,aAAZ,CAAN;AAEF,gBAAIb,KAAK,IAAI,iFAAYc,aAAzB,EACI,MAAI,CAACC,iBAAL,GAAyBL,GAAzB,CADJ,KAEK,IAAIV,KAAK,IAAI,iFAAYgB,MAAzB,EACD,MAAI,CAACD,iBAAL,GAAyBL,GAAG,CAACC,MAAJ,CAAW,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,CAAYC,QAAZ,MAA0B5B,KAA9B;AAAA,aAAZ,CAAzB;AACH,WAPD;AASD;;;4CAEmBU,K,EAAgBV,K,EAAa;AAAA;;AAC/C,eAAKpB,eAAL,CAAqBmC,IAArB,CAA0B,2DAASc,OAAnC,EAA4CvB,SAA5C,CAAsD,UAAAwB,EAAE,EAAI;AAC1DA,cAAE,GAAGA,EAAL;AACF,gBAAIpB,KAAK,IAAI,iFAAYc,aAAzB,EACE,MAAI,CAACO,YAAL,GAAoBD,EAApB,CADF,KAEK,IAAIpB,KAAK,IAAI,iFAAYgB,MAAzB,EACH,MAAI,CAACK,YAAL,GAAoBD,EAAE,CAACT,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,CAAYC,QAAZ,MAA0B5B,KAA9B;AAAA,aAAX,CAApB;AACD,WAND;AAOD;;;yCAEgBU,K,EAAgBV,K,EAAa;AAAA;;AAC5C,eAAKnB,YAAL,CAAkBkC,IAAlB,CAAuB,2DAASiB,IAAhC,EAAsC1B,SAAtC,CAAgD,UAAA2B,EAAE,EAAI;AACpDA,cAAE,GAAGA,EAAL;AACF,gBAAIvB,KAAK,IAAI,iFAAYc,aAAzB,EACE,MAAI,CAACU,SAAL,GAAiBD,EAAjB,CADF,KAEK,IAAIvB,KAAK,IAAI,iFAAYgB,MAAzB,EACH,MAAI,CAACQ,SAAL,GAAiBD,EAAE,CAACZ,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,CAAaC,QAAb,MAA2B5B,KAA/B;AAAA,aAAX,CAAjB;AACD,WAND;AAOD;;;gDAEuBU,K,EAAgBV,K,EAAa;AAAA;;AACnD,eAAKlB,mBAAL,CAAyBiC,IAAzB,CAA8B,2DAASoB,WAAvC,EAAoD7B,SAApD,CAA8D,UAAA8B,EAAE,EAAI;AAClEA,cAAE,GAAGA,EAAL;AAEF,gBAAI1B,KAAK,IAAI,iFAAYc,aAAzB,EACE,MAAI,CAACa,oBAAL,GAA4BD,EAA5B,CADF,KAEK,IAAI1B,KAAK,IAAI,iFAAYgB,MAAzB,EACH,MAAI,CAACW,oBAAL,GAA4BD,EAAE,CAACf,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,CAAaC,QAAb,MAA2B5B,KAA/B;AAAA,aAAX,CAA5B;AAED,WARD;AASD;;;sCAEU;AACT,eAAKvB,SAAL,CAAe6D,KAAf;AACD;;;;;;;uBArHU/D,qB,EAAqB,uH,EAAA,sI,EAAA,gJ,EAAA,gJ,EAAA,gJ,EAAA,gJ,EAAA,gJ,EAAA,gJ,EAAA,0I;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,e;AAAA,c;AAAA,69C;AAAA;AAAA;ACvB1B;;AAEI;;AACI;;AAAgB;;AAAW;;AACvB;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AAAmD;;AAA0B;;AAAS;;AACtF;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAGA;;AACI;;AACI;;AAA2B;AAAA;AAAA;;AAA3B;;AACR;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAGA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACI;;AAAgC;AAAA;AAAA;;AAAhC;;AACR;;AAGA;;AACI;;AACI;;AAAwB;AAAA;AAAA;;AAAxB;;AACR;;AAGJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAgE,WAAA,EAAT;AAAsB,WAAtB;;AACtB;;AACJ;;AACR;;AAEJ;;;;AAnFqB;;AAAA;;AAMW;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AASe;;AAAA,uGAAiC,SAAjC,EAAiC,uBAAjC;;AAMnB;;AAAA;;AACI;;AAAA;;AAQf;;AAAA;;AAMA;;AAAA;;AAKmC;;AAAA,4GAAsC,SAAtC,EAAsC,4BAAtC;;AAMR;;AAAA,oGAA8B,SAA9B,EAA8B,oBAA9B;;AAM5B;;AAAA;;;;;;;;;sED1DfhE,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTiE,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEvBlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,qB;AAEX,uCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,qB;AAAqB,K;;;YAArBA,qB;AAAqB,wC;AAAA,c;AAAA,a;AAAA;AAAA;ACPlC;;AAAG;;AAAkB;;;;;;;;sEDORA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTH,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;AELlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACqBc;;AAAsC;;AAAE;;;;;;AACxC;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsC;;AAAS;;;;;;AAC/C;;AAAmC;;;;AAA+C;;;;;;AAA/C;;AAAA;;;;;;AAKnC;;AAAsC;;AAAW;;;;;;AACjD;;AAAmC;;AAAkB;;;;;;AAAlB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAW;;;;;;AACjD;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAKnC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAIjC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAgB;;;;;;AAAhB;;AAAA;;;;;;AAInC;;AAAsC;;AAAY;;;;;;AAClD;;AAAmC;;AAAuB;;;;;;AAAvB;;AAAA;;;;;;AAInC;;AAAsC;;AAAgB;;;;;;AACtD;;AAAmC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;;;AAAqD;;;;;;AAArD;;AAAA;;;;;;AAKnC;;AAAsC;;AAAU;;;;;;AAChD;;AAAmC;;;;AAAiD;;;;;;AAAjD;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;AAAyB;;;;;;AAAzB;;AAAA;;;;;;AAKrC;;AAAsC;;AAAK;;;;;;AAEvC;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAWT;;AAAsC;;AAAK;;;;;;;;;;;;AAC3C;;AACI;;AAAoC;AAAA;;AAAA;;AAAA;AAAA;;AAClC;;AACE;;AACF;;AACF;;AACA;;AAAmF;AAAA;;AAAA;;AAAA;AAAA;;AAC/E;;AACI;;AACJ;;AACJ;;AACA;;AAAmF;AAAA;;AAAA;;AAAA;AAAA;;AAC/E;;AACI;;AACJ;;AACJ;;AAEJ;;;;;;AAhBO;;AAAA;;AAKwC;;AAAA;;AAKA;;AAAA;;;;;;AAUjD;;;;;;AACA;;;;QDlHCE,mB;AAMX,mCACmBC,MADnB,EAEmBC,OAFnB,EAGoBC,WAHpB,EAIoBvE,KAJpB,EAKoBwE,UALpB,EAK6D;AAAA;;AAJ1C,aAAAH,MAAA,GAAAA,MAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AACC,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAvE,KAAA,GAAAA,KAAA;AACA,aAAAwE,UAAA,GAAAA,UAAA;AATpB,aAAAC,OAAA,GAAU,CAAC,IAAD,EAAM,WAAN,EAAmB,YAAnB,EAAgC,aAAhC,EAA8C,aAA9C,EAA4D,aAA5D,EAA0E,UAA1E,EACU,cADV,EACyB,aADzB,EACuC,gBADvC,EACwD,aADxD,EACsE,mBADtE,EAC0F,WAD1F,EACsG,QADtG,CAAV;AAUgB;;;;mCAER;AACN,eAAKF,WAAL,CAAiBG,aAAjB,CAA+B,6DAAU7C,MAAzC,EAAgD,kBAAhD,EAAmE,EAAnE;AACA,eAAK8C,YAAL;AACD;;;uCAGW;AAAA;;AACV,cAAIC,YAAY,GAAuBC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAkCC,KAAzE;;AAEA,eAAKP,UAAL,CAAgBjC,IAAhB,CAAqB,kEAASV,MAA9B,EAAsCC,SAAtC,CAAgD,UAAAC,EAAE,EAAI;AACpD,kBAAI,CAACtB,MAAL,GAAcmE,YAAY,IAAI,IAAhB,GAAuB7C,EAAvB,GAA6BA,EAAE,CAACc,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAAClC,UAAF,CAAaoE,WAAb,GAA2BC,QAA3B,CAAoCL,YAAY,CAACI,WAAb,EAApC,CAAJ;AAAA,aAAX,CAA3C;AAED,WAHD;AAKD;;;uCAEW;AACV,eAAKvE,MAAL,GAAc,IAAIyE,KAAJ,EAAd;AACD;;;wCAIY;AACZ,cAAMC,cAAc,GAAG,KAAKb,OAAL,CAAac,gBAAb,CAA8BC,UAA9B,EAAvB;AACA,cAAMpF,SAAS,GAAG,KAAKoE,MAAL,CAAYiB,IAAZ,CAAiB,4FAAjB,EAAwC;AACxDC,iBAAK,EAAG,OADgD;AAExDC,kBAAM,EAAG,OAF+C;AAGxDL,0BAAc,EAAdA;AAHwD,WAAxC,CAAlB;AAQAlF,mBAAS,CAACwF,WAAV,GAAwB3D,SAAxB,CAAkC,UAAA4D,MAAM,EAAI;AAC1CC,mBAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,WAFD;AAIA;;;;;;;uBAlDUtB,mB,EAAmB,mI,EAAA,6H,EAAA,mI,EAAA,uH,EAAA,uJ;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,e;AAAA,a;AAAA,g0C;AAAA;AAAA;ACnBhC;;AACI;;AAGI;;AAA8C;;AAAM;;AACpD;;AAEA;;AAA2C;AAAA,mBAAS,IAAAyB,aAAA,EAAT;AAAwB,WAAxB;;AAAwC;;AAAW;;AAE9F;;AAAiB;;AAAe;;AAChC;;AAAiB;;AAAI;;AACrB;;AAEI;;AAAyB;AAAA,mBAAS,IAAAlB,YAAA,EAAT;AAAuB,WAAvB;;AACvB;;AAA0B;;AAAM;;AAClC;;AAEA;;AAEF;;AAGE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACI;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGF;;AACE;;AACE;;AAYF;;AAIF;;AACE;;AACA;;AAkBF;;AAGA;;AACA;;AACF;;AAEJ;;AAEA;;AACE;;AACF;;AACN;;;;;;AAzI2B;;AAAA;;AAeqB;;AAAA;;AAiHjB;;AAAA;;AACP;;AAAA;;;;;;;;;;sEDlHXP,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTJ,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEnBhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACcwB;;AACI;;AACJ;;;;;;AAFwD;;AACpD;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFsD;;AAClD;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFgD;;AAC5C;;AAAA;;;;;;AAeJ;;AACI;;AACJ;;;;;;AAF4D;;AACxD;;AAAA;;;;;;;;AA8BhB;;AAAoG;AAAA;;AAAA;;AAAA;AAAA;;AAChG;;AACJ;;;;QDjEC4B,qB;AAEX,qCACkBC,MADlB,EAEkBC,WAFlB,EAGkBhG,KAHlB,EAIkBiG,aAJlB,EAKkBC,cALlB,EAMkBC,WANlB,EAOkBC,kBAPlB,EAQkBC,cARlB,EASkBC,cATlB,EAS6D;AAAA;;AAR3C,aAAAP,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAhG,KAAA,GAAAA,KAAA;AACA,aAAAiG,aAAA,GAAAA,aAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAC,kBAAA,GAAAA,kBAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AAYlB,aAAA7F,MAAA,GAAkB;AAChBC,mBAAS,EAAE,IAAIC,IAAJ,EADK;AAEhBC,oBAAU,EAAE,IAFI;AAGhBC,wBAAc,EAAE,IAHA;AAIhBC,mBAAS,EAAE,IAJK;AAKhBC,mBAAS,EAAE,IALK;AAMhBC,gBAAM,EAAE,IANQ;AAOhBC,sBAAY,EAAE,KAPE;AAQhBC,uBAAa,EAAE,IARC;AAShBC,wBAAc,EAAE,IATA;AAUhBC,qBAAW,EAAE,IAVG;AAWhBC,2BAAiB,EAAE,KAXH;AAYhBC,mBAAS,EAAE;AAZK,SAAlB;AAVe;;;;mCA2BP;AACN,eAAKiF,iBAAL;AAED;;;uCAEe;AAAA;;AACV,eAAKN,aAAL,CAAmBO,MAAnB,CAA0B,KAAK/F,MAA/B,EAAuC,kEAASoB,MAAhD,EAAwDC,SAAxD,CAAkE,YAAM;AACtE,kBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,gCAA7B,EAA+D,KAA/D;;AACA,kBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,mBAAD,CAArB;AACD,WAHD;AAKD;;;iCACK;AACJ,eAAK8D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,mBAAD,CAArB;AACD;;;4CAIgB;AAAA;;AAEf,cAAMnC,EAAE,GAAG,KAAKE,KAAL,CAAWyG,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAX;AACI,eAAKV,aAAL,CAAmBW,QAAnB,CAA4B9G,EAA5B,EAAgC,kEAAS+B,MAAzC,EAAiDC,SAAjD,CAA2D,UAAA+E,IAAI,EAAI;AACjE,kBAAI,CAACpG,MAAL,GAAcoG,IAAd;;AACA,kBAAI,CAACtF,aAAL;AACD,WAHD;AAIL;;;wCAEY;AAAA;;AAEX,cAAIC,KAAK,GAAGG,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAK4E,cAAL,CAAoB/D,IAApB,CAAyB,kEAASI,OAAlC,EAA2Cb,SAA3C,CAAqD,UAAAgF,EAAE,EAAI;AACzD,kBAAI,CAAC7D,iBAAL,GAAyB6D,EAAE,CAACjE,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,YAAF,IAAkBpB,MAAM,CAACmB,CAAC,CAACK,SAAH,CAAN,IAAuB3B,KAA7C;AAAA,aAAX,CAAzB;AACD,WAFD;AAIA,eAAK0E,cAAL,CAAoB3D,IAApB,CAAyB,kEAASc,OAAlC,EAA2CvB,SAA3C,CAAqD,UAAAwB,EAAE,EAAI;AACzD,kBAAI,CAACC,YAAL,GAAoBD,EAAE,CAACT,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,IAAe3B,KAAnB;AAAA,aAAX,CAApB;AACD,WAFD;AAIA,eAAK2E,WAAL,CAAiB5D,IAAjB,CAAsB,kEAASiB,IAA/B,EAAqC1B,SAArC,CAA+C,UAAA2B,EAAE,EAAG;AAClD,kBAAI,CAACC,SAAL,GAAiBD,EAAE,CAACZ,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,IAAe3B,KAAnB;AAAA,aAAX,CAAjB;AACD,WAFD;AAIA,eAAK4E,kBAAL,CAAwB7D,IAAxB,CAA6B,kEAASoB,WAAtC,EAAmD7B,SAAnD,CAA6D,UAAA8B,EAAE,EAAI;AACjE,kBAAI,CAACC,oBAAL,GAA4BD,EAAE,CAACf,MAAH,CAAU,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,IAAe3B,KAAnB;AAAA,aAAX,CAA5B;AACD,WAFD;AAIA,eAAK6E,cAAL,CAAoB9D,IAApB,CAAyB,kEAASC,OAAlC,EAA2CV,SAA3C,CAAqD,UAAAW,GAAG,EAAI;AAC1D,kBAAI,CAACC,OAAL,GAAeD,GAAG,CAACI,MAAJ,CAAW,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAAChD,EAAF,IAAQ0B,KAAZ;AAAA,aAAZ,CAAf;AACD,WAFD;AAGD;;;;;;;uBA1FMsE,qB,EAAqB,uH,EAAA,0I,EAAA,+H,EAAA,uJ,EAAA,uJ,EAAA,uJ,EAAA,uJ,EAAA,uJ,EAAA,uJ;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,e;AAAA,c;AAAA,s8C;AAAA;AAAA;AClBlC;;AAEI;;AACI;;AAAgB;;AAAgB;;AAC5B;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAGA;;AACI;;AACI;;AAA2B;AAAA;AAAA;;AAA3B;;AACR;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAGA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACI;;AAAgC;AAAA;AAAA;;AAAhC;;AACR;;AAGA;;AACI;;AACI;;AAAwB;AAAA;AAAA;;AAAxB;;AACR;;AAGJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAiB,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;AAEJ;;;;AAnFqB;;AAAA;;AAMW;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AASe;;AAAA,uGAAiC,SAAjC,EAAiC,uBAAjC;;AAMnB;;AAAA;;AACI;;AAAA;;AAQf;;AAAA;;AAMA;;AAAA;;AAKmC;;AAAA,4GAAsC,SAAtC,EAAsC,4BAAtC;;AAMR;;AAAA,oGAA8B,SAA9B,EAA8B,oBAA9B;;AAM5B;;AAAA;;;;;;;;;sED/DPjB,qB,EAAqB;cALjC,uDAKiC;eALvB;AACT9B,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEjBlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa8C,mB;AAEX,mCAAoBhH,KAApB,EAAoC;AAAA;;AAAhB,aAAAA,KAAA,GAAAA,KAAA;AAAmB;;;;mCAE/B;AACN,eAAKA,KAAL,CAAWiC,QAAX,CAAoB,CAAC,QAAD,CAApB;AACD;;;;;;;uBANU+E,mB,EAAmB,uH;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,c;AAAA,a;AAAA;AAAA;ACRhC;;;;;;;;;sEDQaA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACThD,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;AERhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAY+C,SAAZ;;AAAA,eAAYA,SAAZ,EAAqB;AACnB;AACA;AACA;AACA;AAED,KAND,EAAYA,SAAS,KAATA,SAAS,MAArB;;AAQO,QAAMC,aAAa,GAAG,IAAIC,GAAJ,CAAwB,CACnD,CAAC,QAAD,EAAW,QAAX,CADmD,EAEnD,CAAC,SAAD,EAAY,SAAZ,CAFmD,EAGnD,CAAC,aAAD,EAAgB,aAAhB,CAHmD,EAInD,CAAC,UAAD,EAAa,UAAb,CAJmD,CAAxB,CAAtB;;;;;;;;;;;;;;;;ACRP;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAYC,QAAZ;;AAAA,eAAYA,QAAZ,EAAoB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,KAXD,EAAYA,QAAQ,KAARA,QAAQ,MAApgF,CAkCA;;;AAEA,QAAMC,MAAM,GAAW,CACrB;AAACC,UAAI,EAAG,EAAR;AAAYC,eAAS,EAAC;AAAtB,KADqB,EAErB;AAACD,UAAI,EAAE,OAAP;AAAgBC,eAAS,EAAE;AAA3B,KAFqB,EAGrB;AACA;AAACD,UAAI,EAAE,UAAP;AAAmBC,eAAS,EAAE;AAA9B,KAJqB,EAKrB;AAACD,UAAI,EAAE,iBAAP;AAA0BC,eAAS,EAAG;AAAtC,KALqB,EAMrB;AAACD,UAAI,EAAE,qBAAP;AAA8BC,eAAS,EAAG;AAA1C,KANqB,EAOrB;AAACD,UAAI,EAAE,qBAAP;AAA8BC,eAAS,EAAG;AAA1C,KAPqB,EASrB;AACA;AAACD,UAAI,EAAE,UAAP;AAAmBC,eAAS,EAAG;AAA/B,KAVqB,EAWrB;AAACD,UAAI,EAAE,iBAAP;AAA0BC,eAAS,EAAG;AAAtC,KAXqB,EAYrB;AAACD,UAAI,EAAE,qBAAP;AAA8BC,eAAS,EAAG;AAA1C,KAZqB,EAarB;AAACD,UAAI,EAAE,qBAAP;AAA8BC,eAAS,EAAG;AAA1C,KAbqB,EAerB;AACA;AAACD,UAAI,EAAE,UAAP;AAAmBC,eAAS,EAAG;AAA/B,KAhBqB,EAiBrB;AAACD,UAAI,EAAE,iBAAP;AAA0BC,eAAS,EAAG;AAAtC,KAjBqB,EAkBrB;AAACD,UAAI,EAAE,qBAAP;AAA8BC,eAAS,EAAG;AAA1C,KAlBqB,EAmBrB;AAACD,UAAI,EAAE,qBAAP;AAA8BC,eAAS,EAAG;AAA1C,KAnBqB,EAqBrB;AACA;AAACD,UAAI,EAAE,SAAP;AAAkBC,eAAS,EAAG;AAA9B,KAtBqB,EAuBrB;AAACD,UAAI,EAAE,gBAAP;AAAyBC,eAAS,EAAG;AAArC,KAvBqB,EAwBrB;AAACD,UAAI,EAAE,oBAAP;AAA6BC,eAAS,EAAG;AAAzC,KAxBqB,EAyBrB;AAACD,UAAI,EAAE,oBAAP;AAA6BC,eAAS,EAAG;AAAzC,KAzBqB,EA2BrB;AACA;AACA;AAACD,UAAI,EAAE,gBAAP;AAA0BC,eAAS,EAAG;AAAtC,KA7BqB,EA8BrB;AAACD,UAAI,EAAE,6DAAUzF,MAAjB;AAA0B0F,eAAS,EAAG,wGAAtC;AACEC,cAAQ,EAAC,CACP;AAACF,YAAI,EAAE,mBAAP;AAA4BG,kBAAU,EAAE,6DAAU5F,MAAlD;AAA0D6F,iBAAS,EAAE;AAArE,OADO,EAEP;AAACJ,YAAI,EAAE,aAAP;AAAsBC,iBAAS,EAAG;AAAlC,OAFO,EAGP;AAACD,YAAI,EAAE,eAAP;AAAwBC,iBAAS,EAAG;AAApC,OAHO,EAIP;AAACD,YAAI,EAAE,mBAAP;AAA4BC,iBAAS,EAAG;AAAxC,OAJO,EAKP;AAACD,YAAI,EAAE,mBAAP;AAA4BC,iBAAS,EAAG;AAAxC,OALO;AADX,KA9BqB,CAAvB;;QA+CaI,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,8DAAaC,OAAb,CAAqBP,MAArB,CAAD,CAGkB,EAFjB,6DAEiB;;;;2HAAhBM,gB,EAAgB;AAAA;AAAA,kBAFjB,6DAEiB;AAAA,O;AAFL,K;;;;;uEAEXA,gB,EAAgB;cAJ5B,uDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,8DAAaD,OAAb,CAAqBP,MAArB,CAAD,CADD;AAERxH,iBAAO,EAAE,CAAC,6DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACnF7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,gE,CAAA;;;;;ACAA;;;;;;AACA;;;;;;AACA;;;;;;AACA;;;;QDOaiI,Y;AAMb,4BAAoBC,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AALlB,aAAAC,IAAA,GAAO,MAAP;AAEF,aAAAC,WAAA,GAAwB,KAAxB;AACA,aAAAC,YAAA,GAAyB,IAAzB;AAIC;;;;mCAEO;AAAA;;AACJ,eAAKH,WAAL,CAAiBI,kBAAjB,CAAoCrG,SAApC,CACI,UAAAsG,OAAO;AAAA,mBAAI,OAAI,CAACH,WAAL,GAAmBG,OAAvB;AAAA,WADX;AAIA,eAAKL,WAAL,CAAiBM,mBAAjB,CAAqCvG,SAArC,CACI,UAAAwG,YAAY;AAAA,mBAAI,OAAI,CAACJ,YAAL,GAAoBI,YAAxB;AAAA,WADhB;AAGH;;;;;;;uBAlBYR,Y,EAAY,qI;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,2B;AAAA;AAAA;ACVzB;;AACA;;AACA;;AACA;;;;AAHW;;AACC;;AAAA;;AACH;;AAAA;;AACG;;AAAA;;;;;;;;;sEDOCA,Y,EAAY;cAJxB,uDAIwB;eAJd;AACT9D,kBAAQ,EAAE,UADD;AAEXC,qBAAW,EAAE;AAFF,S;AAIc,Q;;;;;;;;;;;;;;;;;;;;;;AEVzwE,CA2BA;;;AAFA,gFAAmB,kEAAnB;;QAgIasE,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAVpB,CACE;AACAC,eAAO,EAAG,uDADV;AAEAC,gBAAQ,EAAG;AAFX,OADF,EAKA,CAAC,oEAAD,CALA,C;AAMA,gBAlCS,CACP,uEADO,EAEP,2DAFO,EAGP,oEAHO,EAIP,4FAJO,EAKP,2EALO,EAMP,2EANO,EAOP,qEAPO,EAQP,qEARO,EASP,yEATO,EAUP,8EAVO,EAWP,sEAXO,EAYP,gFAZO,EAaP,uEAbO,EAcP,uEAdO,EAeP,+EAfO,EAgBP,qEAhBO,EAiBP,qEAjBO,EAkBP,yEAlBO,EAmBP,mEAnBO,EAoBP,qEApBO,EAqBP,6EArBO,EAsBP,yEAtBO,EAuBP,sEAvBO,EAwBP,qEAxBO,EAyBP,2EAzBO,CAkCT;;;;0HAIWF,S,EAAS;AAAA,uBA3ElB,2DA2EkB,EA1ElB,4FA0EkB,EAzElB,4FAyEkB,EAxElB,mFAwEkB,EAvElB,wEAuEkB,EAtElB,gGAsEkB,EArElB,mHAqEkB,EApElB,6GAoEkB,EAnElB,sJAmEkB,EAlElB,mHAkEkB,EAjElB,mHAiEkB,EAhElB,iFAgEkB,EA/DlB,sEA+DkB,EA9DlB,gGA8DkB,EA7DlB,uFA6DkB,EA5DlB,6GA4DkB,EA3DlB,mHA2DkB,EA1DlB,mHA0DkB,EAzDlB,mHAyDkB,EAxDlB,gGAwDkB,EAvDlB,oHAuDkB,EAtDlB,oHAsDkB,EArDlB,oHAqDkB,EApDlB,8GAoDkB,EAnDlB,kFAmDkB,EAlDlB,mHAkDkB,EAjDlB,mHAiDkB,EAhDlB,mHAgDkB,EA/ClB,6GA+CkB,EA9ClB,+GA8CkB,EA7ClB,+GA6CkB,EA5ClB,+GA4CkB,EA3ClB,yGA2CkB,EA1ClB,yGA0CkB;AA1CC,kBAKnB,uEALmB,EAMnB,2DANmB,EAOnB,oEAPmB,EAQnB,4FARmB,EASnB,2EATmB,EAUnB,2EAVmB,EAWnB,qEAXmB,EAYnB,qEAZmB,EAanB,yEAbmB,EAcnB,8EAdmB,EAenB,sEAfmB,EAgBnB,gFAhBmB,EAiBnB,uEAjBmB,EAkBnB,uEAlBmB,EAmBnB,+EAnBmB,EAoBnB,qEApBmB,EAqBnB,qEArBmB,EAsBnB,yEAtBmB,EAuBnB,mEAvBmB,EAwBnB,qEAxBmB,EAyBnB,6EAzBmB,EA0BnB,yEA1BmB,EA2BnB,sEA3BmB,EA4BnB,qEA5BmB,EA6BnB,2EA7BmB;AA0CD,O;AAbF,K;;;;;sEAaPA,S,EAAS;cA7ErB,sDA6EqB;eA7EZ;AACRG,sBAAY,EAAE,CACZ,2DADY,EAEZ,4FAFY,EAGZ,4FAHY,EAIZ,mFAJY,EAKZ,wEALY,EAMZ,gGANY,EAOZ,mHAPY,EAQZ,6GARY,EASZ,sJATY,EAUZ,mHAVY,EAWZ,mHAXY,EAYZ,iFAZY,EAaZ,sEAbY,EAcZ,gGAdY,EAeZ,uFAfY,EAgBZ,6GAhBY,EAiBZ,mHAjBY,EAkBZ,mHAlBY,EAmBZ,mHAnBY,EAoBZ,gGApBY,EAqBZ,oHArBY,EAsBZ,oHAtBY,EAuBZ,oHAvBY,EAwBZ,8GAxBY,EAyBZ,kFAzBY,EA0BZ,mHA1BY,EA2BZ,mHA3BY,EA4BZ,mHA5BY,EA6BZ,6GA7BY,EA8BZ,+GA9BY,EA+BZ,+GA/BY,EAgCZ,+GAhCY,EAiCZ,yGAjCY,EAkCZ,yGAlCY,CADN;AAuCRb,iBAAO,EAAE,CACP,uEADO,EAEP,2DAFO,EAGP,oEAHO,EAIP,4FAJO,EAKP,2EALO,EAMP,2EANO,EAOP,qEAPO,EAQP,qEARO,EASP,yEATO,EAUP,8EAVO,EAWP,sEAXO,EAYP,gFAZO,EAaP,uEAbO,EAcP,uEAdO,EAeP,+EAfO,EAgBP,qEAhBO,EAiBP,qEAjBO,EAkBP,yEAlBO,EAmBP,mEAnBO,EAoBP,qEApBO,EAqBP,6EArBO,EAsBP,yEAtBO,EAuBP,sEAvBO,EAwBP,qEAxBO,EAyBP,2EAzBO,CAvCD;AAkERc,mBAAS,EACT,CACE;AACAH,mBAAO,EAAG,uDADV;AAEAC,oBAAQ,EAAG;AAFX,WADF,EAKA,CAAC,oEAAD,CALA,CAnEQ;AA2ERG,mBAAS,EAAE,CAAC,2DAAD;AA3EH,S;AA6EY,Q;;;;;;;;;;;;;;;;;;ACzJtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,sB;AAEX,wCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,sB;AAAsB,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA;AAAA;ACPnC;;AAAG;;AAAqB;;;;;;;;sEDOXA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT7E,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;AEPnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa4E,sB;AAEX,wCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,sB;AAAsB,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA;AAAA;ACPnC;;AAAG;;AAAqB;;;;;;;;sEDOXA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT9E,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;AEPnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa6E,oB;AAEX,sCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,oB;AAAoB,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA;AAAA;ACPjC;;AAAG;;AAAmB;;;;;;;;sEDOTA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT/E,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;AEPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa8E,sB;AAEX,wCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,sB;AAAsB,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA;AAAA;ACPnC;;AAAG;;AAAqB;;;;;;;;sEDOXA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACThF,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;AEPnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACgDoB;;AAA+F;AAAA;;AAAA;;AAAA;AAAA;;AAC3F;;AACJ;;;;QDjCP+E,sB;AAsBX,sCAAoBjD,WAApB,EACoBD,MADpB,EAEoBmD,cAFpB,EAE+D;AAAA;;AAF3C,aAAAlD,WAAA,GAAAA,WAAA;AACA,aAAAD,MAAA,GAAAA,MAAA;AACA,aAAAmD,cAAA,GAAAA,cAAA;AArBtB,aAAAxG,OAAA,GAAoB;AAChByG,mBAAS,EAAG,IADI;AAEhBC,cAAI,EAAE,IAFU;AAGhBC,qBAAW,EAAE,IAHG;AAIhBC,sBAAY,EAAE,IAJE;AAKhBC,2BAAiB,EAAE,IALH;AAMhBC,4BAAkB,EAAE,IANJ;AAOhBC,cAAI,EAAG,IAPS;AAQhBC,gBAAM,EAAG,IARO;AAShBC,oBAAU,EAAG,IATG;AAUhBC,iBAAO,EAAG,IAVM;AAWhBC,oBAAU,EAAG,IAXG;AAYhBC,mBAAS,EAAG,IAZI;AAahBxI,mBAAS,EAAG;AAbI,SAApB;AAyBgB;;;;mCAEN,CAEP;;;2CAEe;AAAA;;AAEd,cAAIY,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AACA,cAAIqI,MAAM,GAAGpI,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAnB;AACA,eAAKgB,OAAL,CAAaoH,SAAb,GAA0BnI,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAhC;AACA,eAAKgB,OAAL,CAAayG,SAAb,GAAyB,IAAIxI,IAAJ,EAAzB;AACA,eAAK+B,OAAL,CAAamH,UAAb,GAA0BE,MAA1B;AAEA,eAAKrH,OAAL,CAAapB,SAAb,GAAyB,KAAzB;;AAEA,cAAGY,KAAK,IAAI,0EAAYS,OAAxB,EACA;AACE,iBAAKqD,WAAL,CAAiBhE,WAAjB,CAA6B,qDAA7B,EAAoF,KAApF;AAED,WAJD,MAKA;AACC,gBAAG,wDAAKgI,OAAL,CAAa,KAAKtH,OAAL,CAAa0G,IAA1B,CAAH,EAAmC;AACjC,mBAAKF,cAAL,CAAoB3G,IAApB,CAAyB,2DAASC,OAAlC,EAA2CV,SAA3C,CAAqD,UAAAmI,IAAI,EAAI;AAC1DA,oBAAI,GAAGA,IAAP;AACD,oBAAIC,UAAU,GAAGD,IAAI,CAACpH,MAAL,CAAY,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAACsG,IAAF,IAAU,OAAI,CAAC1G,OAAL,CAAa0G,IAA3B;AAAA,iBAAb,CAAjB;AACA,oBAAIe,aAAa,GAAGF,IAAI,CAACpH,MAAL,CAAY,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAChD,EAAF,IAAQiK,MAAZ;AAAA,iBAAb,CAApB;;AAEC,oBAAIG,UAAU,CAACE,MAAX,IAAqB,CAAzB,EAA4B;AAE1B,sBAAGlI,KAAK,IAAI,0EAAYc,aAAxB,EAAsC;AAElC,2BAAI,CAACkG,cAAL,CAAoBtH,MAApB,CAA2B,OAAI,CAACc,OAAhC,EAAyC,2DAASF,OAAlD,EAA2DV,SAA3D,CAAqE,UAAAW,GAAG,EAAI;AAC1EA,yBAAG,GAAGA,GAAN;AAEA,0BAAIoH,UAAU,GAAGpH,GAAG,CAAC3C,EAArB;AAEY2C,yBAAG,CAACoH,UAAJ,GAAiBA,UAAjB;;AACA,6BAAI,CAACX,cAAL,CAAoB1C,MAApB,CAA2B/D,GAA3B,EAA+B,2DAASD,OAAxC,EAAiDV,SAAjD,CAA2D,YAAM,CAAE,CAAnE;;AAEJ,6BAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,iCAA7B,EAA+D,KAA/D;;AACA,6BAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,SAAD,CAArB;AACD,qBAVT;AAWC,mBAbL,MAaU,IAAIC,KAAK,IAAI,0EAAYgB,MAArB,IAA+BiH,aAAa,CAACtH,MAAd,CAAqB,UAAAC,CAAC;AAAA,2BAAIA,CAAC,CAAC+G,UAAF,IAAgBE,MAApB;AAAA,mBAAtB,EAAkDK,MAAlD,GAA2D,CAA9F,EACN;AAEE,2BAAI,CAAClB,cAAL,CAAoBtH,MAApB,CAA2B,OAAI,CAACc,OAAhC,EAAyC,2DAASF,OAAlD,EAA2DV,SAA3D,CAAqE,UAAAW,GAAG,EAAI;AAC1EA,yBAAG,GAAGA,GAAN;AAEA,0BAAIoH,UAAU,GAAGpH,GAAG,CAAC3C,EAArB;AAEU2C,yBAAG,CAACnB,SAAJ,GAAgB,IAAhB;AACAmB,yBAAG,CAACoH,UAAJ,GAAiBlI,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAvB;;AACA,6BAAI,CAACwH,cAAL,CAAoB1C,MAApB,CAA2B/D,GAA3B,EAA+B,2DAASD,OAAxC,EAAiDV,SAAjD,CAA2D,YAAM,CAAE,CAAnE;;AAEF,6BAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,iCAA7B,EAA+D,KAA/D;;AACA,6BAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,SAAD,CAArB;AACD,qBAXT;AAYD,mBAfK,MAeD;AACH,2BAAI,CAAC+D,WAAL,CAAiBhE,WAAjB,CAA6B,gEAA7B,EAA8F,KAA9F;AACD;AACN,iBAjCD,MAmCC,OAAI,CAACgE,WAAL,CAAiBhE,WAAjB,CAA6B,qBAA7B,EAAmD,KAAnD;AACF,eAzCF;AA0CA,aA3CF,MA4CK;AACF,mBAAKgE,WAAL,CAAiBhE,WAAjB,CAA6B,eAA7B,EAA6C,KAA7C;AACD;AACF;AACF;;;iCAEK;AACJ,eAAK+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,SAAD,CAArB;AACD;;;;;;;uBAtGUgH,sB,EAAsB,mI,EAAA,uH,EAAA,gJ;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,8nC;AAAA;AAAA;ACjBnC;;AACI;;AACI;;AAEA;;AAEI;;AACI;;AAAgB;;AAAY;;AACxB;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAlC,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;AAEJ;;AAEA;;AACR;;AACA;;AAA0B;;AAAQ;;AAClC;;AAA2B;;AAAU;;AACrC;;;;AApD6B;;AAAA;;AAID;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAKA;;AAAA;;;;;;;;;sED/BfkC,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTjF,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEjBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAcamG,sB;AAIX,sCAAoBhE,cAApB,EACoBC,cADpB,EAEoBP,MAFpB,EAGoB/F,KAHpB,EAIoBsK,QAJpB,EAI0C;AAAA;;AAJtB,aAAAjE,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAP,MAAA,GAAAA,MAAA;AACA,aAAA/F,KAAA,GAAAA,KAAA;AACA,aAAAsK,QAAA,GAAAA,QAAA;AAEL;;;;mCAEP;AACN,eAAKC,aAAL;AACD;;;yCAGa;AAAA;;AAEZ,cAAIC,aAAa,GAAG,IAApB;AAEA,eAAKlE,cAAL,CAAoB/D,IAApB,CAAyB,2DAASI,OAAlC,EAA2Cb,SAA3C,CAAqD,UAAA2I,GAAG,EAAI;AACxDA,eAAG,GAAGA,GAAN;AACAD,yBAAa,GAAGC,GAAG,CAAC5H,MAAJ,CAAW,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACK,SAAF,IAAe,OAAI,CAACT,OAAL,CAAa5C,EAAb,CAAgBsD,QAAhB,EAAnB;AAAA,aAAZ,CAAhB;;AAEA,gBAAIoH,aAAa,CAACJ,MAAd,GAAuB,CAA3B,EACA;AACE,qBAAI,CAACE,QAAL,CAActI,WAAd,CAA0B,uEAA1B,EAAmG,KAAnG;AACD,aAHD,MAII;AACA,kBAAIE,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;;AAEA,kBAAIQ,KAAK,IAAI,iFAAYc,aAAzB,EAAuC;AAErC,uBAAI,CAACqD,cAAL,WAA2B,OAAI,CAAC3D,OAAL,CAAa5C,EAAxC,EAA4C,2DAAS0C,OAArD,EAA8DV,SAA9D,CAAwE,YAAI;AAC1E,yBAAI,CAACwI,QAAL,CAActI,WAAd,CAA0B,gCAA1B,EAA4D,KAA5D;;AACA,yBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD,iBAHD;AAID,eAND,MAOM;AACF,uBAAI,CAACqI,QAAL,CAActI,WAAd,CAA0B,gCAA1B,EAA4D,KAA5D;;AACA,uBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;AACN;AACJ,WAvBD;AAwBD;;;iCAEK;AACJ,eAAK8D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;;;wCAEa;AAAA;;AACZ,cAAMnC,EAAE,GAAG,KAAKE,KAAL,CAAWyG,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAX;AAEA,eAAKN,cAAL,CAAoBO,QAApB,CAA6B9G,EAA7B,EAAiC,2DAAS0C,OAA1C,EAAmDV,SAAnD,CAA6D,UAAAW,GAAG,EAAI;AAClE,mBAAI,CAACC,OAAL,GAAeD,GAAf;AAED,WAHD;AAKA;;;;;;;uBA3DS4H,sB,EAAsB,gJ,EAAA,gJ,EAAA,uH,EAAA,+H,EAAA,mI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,4W;AAAA;AAAA;ACdnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AAEI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAGA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAK,cAAA,EAAT;AAAyB,WAAzB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAA3D,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;;;AAxBgB;;AAAA;;AAKA;;AAAA;;AAMC;;AAAA;;;;;;;;;sEDHJsD,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTrG,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEdnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACaQ;;AAAsC;;AAAE;;;;;;AACxC;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAKnC;;AAAsC;;AAAY;;;;;;AAClD;;AAAmC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAa;;;;;;AACnD;;AAAmC;;AAAyB;;;;;;AAAzB;;AAAA;;;;;;AAKnC;;AAAsC;;AAAc;;;;;;AACpD;;AAAmC;;AAA0B;;;;;;AAA1B;;AAAA;;;;;;AAKnC;;AAAsC;;AAAS;;;;;;AAE3C;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAWT;;AAAsC;;AAAK;;;;;;AAC3C;;AAEI;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AAGJ;;;;;;AAZO;;AAAA;;AAKA;;AAAA;;;;;;AAWT;;;;;;AACA;;;;QDvEOyG,oB;AASX,oCAAoB5E,MAApB,EACoBM,cADpB,EAC+D;AAAA;;AAD3C,aAAAN,MAAA,GAAAA,MAAA;AACA,aAAAM,cAAA,GAAAA,cAAA;AAHpB,aAAAuE,gBAAA,GAAmB,CAAC,IAAD,EAAM,MAAN,EAAc,aAAd,EAA4B,cAA5B,EAA2C,mBAA3C,EAA+D,oBAA/D,EAAoF,WAApF,EAAgG,QAAhG,CAAnB;AAIgB;;;;mCAER;AAEN,eAAKC,aAAL;AAED;;;wCAEY;AAAA;;AAEX,cAAIC,aAAa,GAAuBjG,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAkCC,KAA1E;AACA,cAAIvD,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIQ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAK2E,cAAL,CAAoB9D,IAApB,CAAyB,2DAASC,OAAlC,EAA2CV,SAA3C,CAAqD,UAAAW,GAAG,EAAI;AAC1DA,eAAG,GAAGA,GAAN;AAGA,mBAAI,CAACC,OAAL,GAAgB,IAAIwC,KAAJ,EAAhB;;AAEI,gBAAGhD,KAAK,IAAI,0EAAYc,aAAxB,EACA;AACEP,iBAAG,CAACsI,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACvB,uBAAI,CAACtI,OAAL,CAAauI,IAAb,CAAkBD,OAAlB;AACE,eAFF;AAGD,aALD,MAMK,IAAG9I,KAAK,IAAI,0EAAYgB,MAAxB,EACL;AACET,iBAAG,CAACsI,OAAJ,CAAY,UAAAG,MAAM,EAAI;AACpB,oBAAGA,MAAM,CAACrB,UAAP,CAAkBzG,QAAlB,MAA+B5B,KAAlC,EACA,OAAI,CAACkB,OAAL,CAAauI,IAAb,CAAkBC,MAAlB;AACD,eAHD;AAKD;;AAEL,gBAAIC,eAAe,GAAG,IAAIjG,KAAJ,EAAtB;;AACA,gBAAI4F,aAAJ,EAAkB;AAEhB,mBAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,OAAI,CAAC1I,OAAL,CAAa0H,MAAzC,EAAiDgB,KAAK,EAAtD,EAA0D;AACxD,oBAAMJ,OAAO,GAAG,OAAI,CAACtI,OAAL,CAAa0I,KAAb,CAAhB;AACE,oBAAIJ,OAAO,CAAC1B,YAAR,CAAqBtE,WAArB,GAAmCC,QAAnC,CAA4C6F,aAAa,CAAC9F,WAAd,EAA5C,CAAJ,EACAmG,eAAe,CAACF,IAAhB,CAAqBD,OAArB;AACH;;AACD,qBAAI,CAACtI,OAAL,GAAe,IAAIwC,KAAJ,EAAf;AACA,qBAAI,CAACxC,OAAL,GAAeyI,eAAf;AACD,aATD,MASK;AACH,qBAAI,CAACzI,OAAL,GAAe,OAAI,CAACA,OAApB;AACD;AAGF,WApCD;AAqCD;;;kDAEyB;AACxB,eAAKqD,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,gBAAD,CAArB;AACD;;;;;;;uBAlEU0I,oB,EAAoB,uH,EAAA,gJ;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,e;AAAA,a;AAAA,+xB;AAAA;AAAA;AChBjC;;AACE;;AAEC;;AAAM;AAAA,mBAAS,IAAAE,aAAA,EAAT;AAAwB,WAAxB;;AACJ;;AAA0B;;AAAM;;AAClC;;AACH;;AAEA;;AACI;;AAGE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGC;;AACC;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGC;;AACC;;AACA;;AACF;;AAGA;;AACE;;AACE;;AAYF;;AAIF;;AACE;;AACA;;AAeF;;AAGA;;AACA;;AACF;;AACJ;;AAEA;;AACE;;AAAM;AAAA,mBAAS,IAAAQ,uBAAA,EAAT;AAAkC,WAAlC;;AACJ;;AAA0B;;AAAU;;AACtC;;AACF;;;;AAtFqB;;AAAA;;AA6EI;;AAAA;;AACP;;AAAA;;;;;;;;;sEDvELV,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT3G,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEhBjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACoCY;;AACI;;AACY;;AACY;;AAAqB;AAAA;;AAAA;;AAAA;AAAA;;AAArB;;AACxB;;AACJ;;;;;;AAFiD;;AAAA,uGAA+B,SAA/B,EAA+B,yBAA/B;;;;;;;;AAYrD;;AAA+F;AAAA;;AAAA;;AAAA;AAAA;;AAC3F;;AACJ;;;;QDtCKoH,sB;AAIX,sCAAoBvF,MAApB,EACoB/F,KADpB,EAEoBuL,cAFpB,EAGoBjB,QAHpB,EAG0C;AAAA;;AAHtB,aAAAvE,MAAA,GAAAA,MAAA;AACA,aAAA/F,KAAA,GAAAA,KAAA;AACA,aAAAuL,cAAA,GAAAA,cAAA;AACA,aAAAjB,QAAA,GAAAA,QAAA;AACH;;;;mCAET;AAER,cAAI3I,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAN,IAAyC,0EAAYsB,aAAzD,EACG,KAAKwI,aAAL,GAAqB,IAArB;AAEH,eAAKC,YAAL;AAEC;;;2CAGkB;AAAA;;AAEjB,cAAIvJ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;;AACA,cAAGQ,KAAK,IAAI,0EAAYS,OAAxB,EACA;AACE,iBAAK2H,QAAL,CAActI,WAAd,CAA0B,8DAA1B,EAA0F,KAA1F;AAED,WAJD,MAKA;AACC,gBAAI,wDAAKgI,OAAL,CAAa,KAAKtH,OAAL,CAAa0G,IAA1B,CAAJ,EAAoC;AAC1B,kBAAI;AACK,qBAAKmC,cAAL,CAAoB/E,MAApB,CAA2B,KAAK9D,OAAhC,EAAyC,2DAASF,OAAlD,EAA2DV,SAA3D,CAAqE,YAAI;AACzE,yBAAI,CAACwI,QAAL,CAActI,WAAd,CAA0B,gCAA1B,EAA4D,KAA5D;;AACA,yBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD,iBAHC;AAKH,eANN,CAMO,OAAOyJ,KAAP,EAAc;AACd,qBAAKpB,QAAL,CAActI,WAAd,CAA0B,mCAAmC0J,KAA7D,EAAoE,IAApE;AACD;AAEd,aAXF,MAWM;AACH,mBAAKpB,QAAL,CAActI,WAAd,CAA0B,gBAA1B,EAA6C,KAA7C;AACD;AACA;AACJ;;;iCAEK;AACJ,eAAK+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;;;uCAGc;AAAA;;AACb,cAAMnC,EAAE,GAAG,KAAKE,KAAL,CAAWyG,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAX;AACA,eAAK4E,cAAL,CAAoB3E,QAApB,CAA6B9G,EAA7B,EAAiC,2DAAS0C,OAA1C,EAAmDV,SAAnD,CAA6D,UAAAW,GAAG,EAAI;AAClE,mBAAI,CAACC,OAAL,GAAeD,GAAf;AACD,WAFD;AAID;;;;;;;uBAzDU6I,sB,EAAsB,uH,EAAA,+H,EAAA,gJ,EAAA,mI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,ssC;AAAA;AAAA;ACfnC;;AACI;;AAAgB;;AAA0B;;AACtC;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AAOA;;AAEI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAvE,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;;;AArDiB;;AAAA;;AAID;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAGC;;AAAA;;AAUD;;AAAA;;AAKA;;AAAA;;;;;;;;;sEDpCHuE,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTtH,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACmBY;;AACI;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACtB;;AACJ;;AACJ;;;;QDXCyH,c;AAMb,8BAAoB5F,MAApB,EACqB6F,WADrB,EAC+C;AAAA;;AAD3B,aAAA7F,MAAA,GAAAA,MAAA;AACC,aAAA6F,WAAA,GAAAA,WAAA;AALrB,aAAAC,MAAA,GAAkB,IAAI,0DAAJ,EAAlB;AAMkB;;;;mCAER,CAEP;;;qCAEYC,Q,EAAc;AAEzB,cAAIA,QAAQ,CAACC,KAAT,KAAmB,EAAnB,IAAyBD,QAAQ,CAACC,KAAT,IAAkB,CAA/C,EACE,KAAKH,WAAL,CAAiBI,YAAjB,CAA8B,KAAKH,MAAnC;AAEH;;;;;;;uBAnBUF,c,EAAc,uH,EAAA,qI;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,md;AAAA;AAAA;ACf3B;;AACI;;AAAgB;;AAA0B;;AAAW;;AAAI;;AACrD;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAEA;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAEA;;AACI;;AACA;AAAA;AAAA,aAA0B,UAA1B,EAA0B;AAAA,mBAA0C,IAAAK,YAAA,QAA1C;AAA8D,WAAxF;;AADA;;AAGJ;;AACJ;;AAEI;;AAUZ;;;;AA3BiB;;AAAA;;AAMA;;AAAA;;AAMD;;AAAA;;AAKC;;AAAA;;;;;;;;;sEDPJL,c,EAAc;cAL1B,uDAK0B;eALhB;AACT3H,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEd3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMoB;;AACK;;AACL;;;;;;AAFkD;;AAC7C;;AAAA;;;;;;AAUL;;AACQ;;AACR;;;;;;AAFiD;;AACzC;;AAAA;;;;QDDf+H,sB;AAeX,sCACoBjG,WADpB,EAEoBD,MAFpB,EAGoBmG,cAHpB,EAIoBC,cAJpB,EAI+D;AAAA;;AAH3C,aAAAnG,WAAA,GAAAA,WAAA;AACA,aAAAD,MAAA,GAAAA,MAAA;AACA,aAAAmG,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AAjBpB,aAAAC,YAAA,GAAgB,EAAhB;AAIE,aAAAC,OAAA,GAAoB;AACpBlD,mBAAS,EAAG,IADQ;AAEpBW,mBAAS,EAAG,IAFQ;AAGpB9B,cAAI,EAAG,IAHa;AAIpBsE,eAAK,EAAG,CAJY;AAKpBnJ,mBAAS,EAAG,IALQ;AAMpB7B,mBAAS,EAAG;AANQ,SAApB;AAcgB;;;;mCAEV;AACN,eAAKiL,aAAL;AACA,eAAK1B,aAAL;AACD;;;iDAEwB;AAAA;;AAEvB,eAAKwB,OAAL,CAAavC,SAAb,GAA0BnI,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAhC;AACA,eAAK2K,OAAL,CAAalD,SAAb,GAAyB,IAAIxI,IAAJ,EAAzB;AACA,eAAK0L,OAAL,CAAa/K,SAAb,GAAyB,KAAzB;AAEA,eAAK4K,cAAL,CAAoB3J,IAApB,CAAyB,2DAASiK,OAAlC,EAA2C1K,SAA3C,CAAqD,UAAA2K,CAAC,EAAI;AACxDA,aAAC,GAAGA,CAAJ;AAEA,gBAAIC,KAAK,GAAGD,CAAC,CAAC5J,MAAF,CAAS,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACkF,IAAF,IAAU,OAAI,CAACqE,OAAL,CAAarE,IAAvB,IAA+BlF,CAAC,CAACK,SAAF,IAAe,OAAI,CAACkJ,OAAL,CAAalJ,SAA/D;AAAA,aAAV,CAAZ;;AAEA,gBAAIuJ,KAAK,CAACtC,MAAN,IAAgB,CAApB,EACA;AACE,qBAAI,CAAC8B,cAAL,CAAoBtK,MAApB,CAA2B,OAAI,CAACyK,OAAhC,EAAyC,2DAASG,OAAlD,EAA2D1K,SAA3D,CAAqE,YAAM;AACzE,uBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,iBAA7B;;AACA,uBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACC,eAHH;AAKD,aAPD,MAOK;AACH,qBAAI,CAAC+D,WAAL,CAAiBhE,WAAjB,CAA6B,mDAA7B;AACD;AAEF,WAhBD;AAkBD;;;iCAEQ;AAEP,eAAK+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;;;wCAEY;AAAA;;AAET,2EAAc8I,OAAd,CAAsB,UAAAC,OAAO,EAAI;AAC/B,mBAAI,CAACoB,YAAL,CAAkBnB,IAAlB,CAAuBD,OAAvB;AACD,WAFD;;AAGD,iBAAO,KAAKoB,YAAZ;AACF;;;wCACY;AAAA;;AACX,eAAKD,cAAL,CAAoB5J,IAApB,CAAyB,2DAASC,OAAlC,EAA2CV,SAA3C,CAAqD,UAAAW,GAAG,EAAI;AAC1D,mBAAI,CAACC,OAAL,GAAeD,GAAf;AACD,WAFD;AAGD;;;;;;;uBArEUwJ,sB,EAAsB,mI,EAAA,uH,EAAA,gJ,EAAA,gJ;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,sa;AAAA;AAAA;AClBnC;;AACI;;AAAgB;;AAA2B;;AACvC;;AACI;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAGA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAU,sBAAA,EAAT;AAAiC,WAAjC;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAA5F,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;;;AAjC4B;;AAAA;;AACI;;AAAA;;AAUJ;;AAAA;;AACI;;AAAA;;AAQhB;;AAAA;;;;;;;;;sEDRHkF,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTjI,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AElBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAaa0I,sB;AAYX,sCAAoBC,cAApB,EACoB9G,MADpB,EAEoBC,WAFpB,EAGoBhG,KAHpB,EAIoB8M,aAJpB,EAI8D;AAAA;;AAJ1C,aAAAD,cAAA,GAAAA,cAAA;AACA,aAAA9G,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAhG,KAAA,GAAAA,KAAA;AACA,aAAA8M,aAAA,GAAAA,aAAA;AAdpB,aAAAT,OAAA,GAAoB;AAClBvM,YAAE,EAAE,IADc;AAElBqJ,mBAAS,EAAG,IAFM;AAGlBW,mBAAS,EAAG,IAHM;AAIlB9B,cAAI,EAAE,IAJY;AAKlBsE,eAAK,EAAG,CALU;AAMlBnJ,mBAAS,EAAG,IANM;AAOlB7B,mBAAS,EAAG;AAPM,SAApB;AAcoE;;;;mCAE5D;AAAA;;AAEN,cAAMxB,EAAE,GAAG,KAAKE,KAAL,CAAWyG,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAX;AACA,eAAKkG,cAAL,CAAoBjG,QAApB,CAA6B9G,EAA7B,EAAiCgC,SAAjC,CAA2C,UAAAuK,OAAO,EAAI;AACpD,mBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,WAFD;AAID;;;wCACY;AAAA;;AACT,eAAKS,aAAL,WAA0B,KAAKT,OAAL,CAAavM,EAAvC,EAA2C,2DAAS0M,OAApD,EAA6D1K,SAA7D,CAAuE,YAAM;AAC3E,mBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,+BAA7B;;AACA,mBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD,WAHD;AAKH;;;iCAEK;AACJ,eAAK8D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD;;;;;;;uBApCU2K,sB,EAAsB,yI,EAAA,uH,EAAA,mI,EAAA,+H,EAAA,gJ;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,iL;AAAA;AAAA;ACbnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAG,aAAA,EAAT;AAAwB,WAAxB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAhG,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;;;AAbgB;;AAAA;;;;;;;;;sEDQH6F,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT5I,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEbnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,6C,CAYA;;;AACA,QAAM8I,YAAY,GAAmC,CACnD;AAAClN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KADmD,EAEnD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KAFmD,EAGnD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KAHmD,EAInD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KAJmD,EAKnD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KALmD,EAMnD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KANmD,EAOnD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KAPmD,EAQnD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KARmD,EASnD;AAACnN,QAAE,EAAE,CAAL;AAAQmN,UAAI,EAAE;AAAd,KATmD,EAUnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAVmD,EAWnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAXmD,EAYnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAZmD,EAanD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAbmD,EAcnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAdmD,EAenD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAfmD,EAgBnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAhBmD,EAiBnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAjBmD,EAkBnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAlBmD,EAmBnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KAnBmD,EAoBnD;AAACnN,QAAE,EAAE,EAAL;AAASmN,UAAI,EAAE;AAAf,KApBmD,CAArD;AAuBA;;;;;;QAKaC,kC;;;;;AAKX,oDAAc;AAAA;;AAAA;;AACZ;AALF,gBAAAC,IAAA,GAAuCH,YAAvC;AAIc;AAEb;AAED;;;;;;;;;kCAKO;AAAA;;AACL;AACA;AACA,cAAMI,aAAa,GAAG,CACpB,gDAAa,KAAKD,IAAlB,CADoB,EAEpB,KAAKE,SAAL,CAAeC,IAFK,EAGpB,KAAKC,IAAL,CAAUC,UAHU,CAAtB;AAMA,iBAAO,iEAASJ,aAAT,EAAwBK,IAAxB,CAA6B,2DAAI,YAAM;AAC5C,mBAAO,OAAI,CAACC,YAAL,CAAkB,OAAI,CAACC,aAAL,oBAAuB,OAAI,CAACR,IAA5B,EAAlB,CAAP;AACD,WAFmC,CAA7B,CAAP;AAGD;AAED;;;;;;;qCAIa,CAAE;AAEf;;;;;;;qCAIqBA,I,EAAsC;AACzD,cAAMS,UAAU,GAAG,KAAKP,SAAL,CAAeQ,SAAf,GAA2B,KAAKR,SAAL,CAAeS,QAA7D;AACA,iBAAOX,IAAI,CAACY,MAAL,CAAYH,UAAZ,EAAwB,KAAKP,SAAL,CAAeS,QAAvC,CAAP;AACD;AAED;;;;;;;sCAIsBX,I,EAAsC;AAAA;;AAC1D,cAAI,CAAC,KAAKI,IAAL,CAAUS,MAAX,IAAqB,KAAKT,IAAL,CAAUU,SAAV,KAAwB,EAAjD,EAAqD;AACnD,mBAAOd,IAAP;AACD;;AAED,iBAAOA,IAAI,CAACI,IAAL,CAAU,UAACW,CAAD,EAAIC,CAAJ,EAAU;AACzB,gBAAMC,KAAK,GAAG,OAAI,CAACb,IAAL,CAAUU,SAAV,KAAwB,KAAtC;;AACA,oBAAQ,OAAI,CAACV,IAAL,CAAUS,MAAlB;AACE,mBAAK,MAAL;AAAa,uBAAOK,OAAO,CAACH,CAAC,CAACjB,IAAH,EAASkB,CAAC,CAAClB,IAAX,EAAiBmB,KAAjB,CAAd;;AACb,mBAAK,IAAL;AAAW,uBAAOC,OAAO,CAAC,CAACH,CAAC,CAACpO,EAAJ,EAAQ,CAACqO,CAAC,CAACrO,EAAX,EAAesO,KAAf,CAAd;;AACX;AAAS,uBAAO,CAAP;AAHX;AAKD,WAPM,CAAP;AAQD;;;;MA5DqD,mE;AA+DxD;;;AACA,aAASC,OAAT,CAAiBH,CAAjB,EAAqCC,CAArC,EAAyDC,KAAzD,EAAyE;AACvE,aAAO,CAACF,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAd,KAAoBC,KAAK,GAAG,CAAH,GAAO,CAAC,CAAjC,CAAP;AACD;;;;;;;;;;;;;;;;;AC3GD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACIM;;AAAsD;;AAAE;;;;;;AACxD;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsD;;AAAI;;;;;;AAC1D;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAGrC;;;;;;AACA;;;;;;;;QDJSE,iC;AALb;AAAA;;AAWE;AACA,aAAA1D,gBAAA,GAAmB,CAAC,IAAD,EAAO,MAAP,CAAnB;AAWD;;;;mCATY;AACT,eAAK2D,UAAL,GAAkB,IAAI,yGAAJ,EAAlB;AACD;;;0CAEiB;AAChB,eAAKA,UAAL,CAAgBhB,IAAhB,GAAuB,KAAKA,IAA5B;AACA,eAAKgB,UAAL,CAAgBlB,SAAhB,GAA4B,KAAKA,SAAjC;AACA,eAAKmB,KAAL,CAAWD,UAAX,GAAwB,KAAKA,UAA7B;AACD;;;;;;;uBAjBUD,iC;AAAiC,K;;;YAAjCA,iC;AAAiC,qD;AAAA;AAAA;oEACjC,wE,EAAY,I;;oEACZ,8D,EAAO,I;;oEACP,gE,EAAQ,I;;;;;;;;;;;;;;;;ACdrB;;AACE;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACA;;AACF;;AAEA;;AAMF;;;;AAVuB;;AAAA;;AACP;;AAAA;;AAIV;;AAAA,yIAAkC,WAAlC,EAAkC,CAAlC,EAAkC,UAAlC,EAAkC,EAAlC,EAAkC,iBAAlC,EAAkC,qEAAlC;;;;;;;;;sEDROA,iC,EAAiC;cAL7C,uDAK6C;eALnC;AACTtK,kBAAQ,EAAE,gCADD;AAETC,qBAAW,EAAE,6CAFJ;AAGTC,mBAAS,EAAE,CAAC,4CAAD;AAHF,S;AAKmC,Q;;gBAC3C,uD;iBAAU,wE;;;gBACV,uD;iBAAU,8D;;;gBACV,uD;iBAAU,gE;;;;;;;;;;;;;;;;;;;;AEXb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCQ;;AAAsC;;AAAE;;;;;;AACxC;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAKnC;;AAAsC;;AAAK;;;;;;AAC3C;;AAAmC;;;;AAA+B;;;;;;AAA/B;;AAAA;;;;;;AAInC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAInC;;AAAsC;;AAAM;;;;;;AAExC;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVJ;;AACI;;AAKA;;AAKJ;;;;;;AAVS;;AAAA;;AAKA;;AAAA;;;;;;AAqBT;;AAAsC;;AAAK;;;;;;AAC3C;;AAEI;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AACJ;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAST;;;;;;AACA;;;;QDxDOuK,oB;AAQX,oCAAoB1I,MAApB,EACoB2I,cADpB,EAEoBrI,cAFpB,EAE+D;AAAA;;AAF3C,aAAAN,MAAA,GAAAA,MAAA;AACA,aAAA2I,cAAA,GAAAA,cAAA;AACA,aAAArI,cAAA,GAAAA,cAAA;AAJtB,aAAAuE,gBAAA,GAAmB,CAAC,IAAD,EAAM,MAAN,EAAc,OAAd,EAAsB,WAAtB,EAAkC,WAAlC,EAA8C,QAA9C,CAAnB;AAKkB;;;;mCAER;AACJ,eAAK2B,aAAL;AACH;;;kDAEyB;AACxB,eAAKxG,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,iBAAD,CAArB;AACD;;;wCAEe;AAAA;;AAEd,eAAKyM,cAAL,CAAoBnM,IAApB,CAAyB,2DAASiK,OAAlC,EAA2C1K,SAA3C,CAAqD,UAAAuK,OAAO,EAAI;AAC5DA,mBAAO,GAAGA,OAAV;AAEA,mBAAI,CAACsC,QAAL,GAAgB,IAAIzJ,KAAJ,EAAhB;AAEAmH,mBAAO,CAACtB,OAAR,CAAgB,UAAAC,OAAO,EAAI;AAEvB,qBAAI,CAAC3E,cAAL,CAAoBO,QAApB,CAA6BoE,OAAO,CAAC7H,SAAR,CAAkBC,QAAlB,EAA7B,EAA2D,2DAASZ,OAApE,EAA6EV,SAA7E,CAAuF,UAAAtC,CAAC,EAAI;AAC1FA,iBAAC,GAAGA,CAAJ;AACA,oBAAIA,CAAJ,EACEwL,OAAO,CAAC7H,SAAR,GAAoB3D,CAAC,CAAC6J,WAAtB;AACH,eAJD;;AAKA,qBAAI,CAACsF,QAAL,CAAc1D,IAAd,CAAmBD,OAAnB;AACH,aARD;AASH,WAdD;AAeD;;;;;;;uBAtCUyD,oB,EAAoB,uH,EAAA,gJ,EAAA,gJ;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,e;AAAA,a;AAAA,2nB;AAAA;AAAA;AChBjC;;AACI;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGC;;AACC;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AAYF;;AAcA;;AACE;;AACA;;AAaF;;AAGA;;AACA;;AACF;;AAEF;;AAEA;;AACE;;AAAM;AAAA,mBAAS,IAAAG,uBAAA,EAAT;AAAkC,WAAlC;;AACJ;;AAA0B;;AAAU;;AACtC;;AACF;;;;AAhFmB;;AAAA;;AAsEI;;AAAA;;AACP;;AAAA;;;;;;;;;;sEDxDLH,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTzK,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEhBjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAea2K,sB;AAaX,sCACoB9I,MADpB,EAEoBC,WAFpB,EAGoBhG,KAHpB,EAIoB8O,cAJpB,EAI+D;AAAA;;AAH3C,aAAA/I,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAhG,KAAA,GAAAA,KAAA;AACA,aAAA8O,cAAA,GAAAA,cAAA;AAftB,aAAAzC,OAAA,GAAmB;AACfvM,YAAE,EAAG,IADU;AAEfqJ,mBAAS,EAAG,IAFG;AAGfW,mBAAS,EAAG,IAHG;AAIf9B,cAAI,EAAE,IAJS;AAKfsE,eAAK,EAAE,CALQ;AAMfnJ,mBAAS,EAAE,IANI;AAOf7B,mBAAS,EAAG;AAPG,SAAnB;AAgBmB;;;;mCAGT;AAEN,eAAKiL,aAAL;AAED;;;wCAEY;AAAA;;AACX,eAAKF,OAAL,CAAavC,SAAb,GAA0BnI,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAhC;AACE,eAAKoN,cAAL,CAAoBtI,MAApB,CAA2B,KAAK6F,OAAhC,EAAyC,2DAASG,OAAlD,EAA2D1K,SAA3D,CAAqE,YAAM;AAC3E,mBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,iCAA7B;;AACA,mBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD,WAHC;AAKH;;;iCAEK;AACJ,eAAK8D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AAED;;;wCACe;AAAA;;AAEd,cAAMnC,EAAE,GAAG,KAAKE,KAAL,CAAWyG,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAX;AACE,eAAKmI,cAAL,CAAoBlI,QAApB,CAA6B9G,EAA7B,EAAiC,2DAAS0M,OAA1C,EAAmD1K,SAAnD,CAA6D,UAAAuK,OAAO,EAAI;AACpE,mBAAI,CAACA,OAAL,GAAeA,OAAf;AACH,WAFD;AAGH;;;;;;;uBA9CUwC,sB,EAAsB,uH,EAAA,mI,EAAA,+H,EAAA,gJ;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,yY;AAAA;AAAA;ACfnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AACA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEA;;AACI;;AACI;;AAA6B;AAAA;AAAA;;AAA7B;;AACR;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAE,aAAA,EAAT;AAAwB,WAAxB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAhI,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AAER;;;;AAxBiB;;AAAA;;AAKD;;AAAA;;AAMiC;;AAAA,qGAA+B,SAA/B,EAA+B,qBAA/B;;;;;;;;;sEDDpC8H,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT7K,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEfnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa8K,e;AAEX,iCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,e;AAAe,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,qF;AAAA;AAAA;ACP5B;;AACI;;AACA;;AACI;;AACI;;AACJ;;AACA;;AAAI;;AAAQ;;AAAM;;AAAO;;AAAO;;AACpC;;AACJ;;;;;;;;;sEDDaA,e,EAAe;cAL3B,uDAK2B;eALjB;AACThL,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;AEN5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa+K,e;AAEX,+BAAoBC,aAApB,EAAmD;AAAA;;AAA/B,aAAAA,aAAA,GAAAA,aAAA;AAAkC;;;;mCAE9C,CACP;;;4BAEM;AACP,iBAAO,KAAKA,aAAL,CAAmBC,UAAnB,CAA8BC,KAArC;AACD;;;4BAEO;AACN,iBAAO,KAAKF,aAAL,CAAmBC,UAAnB,CAA8BE,IAArC;AACD;;;4BAEW;AACV,iBAAO,KAAKH,aAAL,CAAmBC,UAAnB,CAA8BG,QAArC;AACD;;;;;;;uBAjBYL,e,EAAe,8H;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,8L;AAAA;AAAA;ACR5B;;AACI;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACJ;;AAEA;;AACJ;;AACJ;;AACJ;;;;AARW;;AAAA;;AAEK;;AAAA;;AAGJ;;AAAA;;;;;;;;;sEDJCA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTjL,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;AEP5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaqL,a;AASX,+BAAc;AAAA;;AAPN,aAAAC,WAAA,GAAc,IAAI,oDAAJ,CAAgC;AACpDJ,eAAK,EAAG,QAD4C;AAEpDC,cAAI,EAAG,MAF6C;AAGpDC,kBAAQ,EAAG;AAHyC,SAAhC,CAAd;AAOS;;;;4BAEF;AACf,iBAAO,KAAKE,WAAL,CAAiBzK,KAAxB;AACD,S;0BAEcoK,U,EAAyB;AACrC,eAAKK,WAAL,CAAiBC,IAAjB,CAAsBN,UAAtB;AACF;;;;;;;uBAjBYI,a;AAAa,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFZ;;;;;sEAEDA,a,EAAa;cAHzB,wDAGyB;eAHd;AACVG,oBAAU,EAAE;AADF,S;AAGc,Q;;;;;;;;;;;;;;;;;;;;ACP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACsBwB;;AACI;;AACI;;AACJ;;AACA;;AACJ;;;;;;;;AA8BhB;;AACI;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACtB;;AACJ;;AACJ;;;;;;;;AAEA;;AACQ;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AACtB;;AACJ;;AACR;;;;QDzDKC,Y;AAGX,4BAAoBC,IAApB,EAAwC;AAAA;;AAApB,aAAAA,IAAA,GAAAA,IAAA;AAFtB,aAAAC,MAAA,GAAS,KAAT;AACA,aAAAC,IAAA,GAAO,KAAP;AAC6C;;;;mCAEnC;AACR,eAAKC,aAAL;AACC;;;sCAEU;AAET,eAAKH,IAAL,CAAUI,WAAV;AAED;;;wCACU;AACX,eAAKF,IAAL,GAAYnO,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAN,IAAyC,0EAAYsB,aAArD,GAAqE,IAArE,GAA4E,KAAxF;AACD;;;;;;;uBAhBY2M,Y,EAAY,4I;AAAA,K;;;YAAZA,Y;AAAY,8B;AAAA,e;AAAA,a;AAAA,0qB;AAAA;AAAA;ACVzB;;AACI;;AACoE;AAAA;AAAA;;AAC5D;;AAEI;;AACA;;AACI;;AACJ;;AACA;;AACJ;;AAEA;;AACI;;AAA0B;;AAAU;;AAEpC;;AACQ;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AACA;;AAMA;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACA;;AACJ;;AAGR;;AACJ;;AAEA;;AAAiB;AAAA,mBAAS,IAAAK,WAAA,EAAT;AAAsB,WAAtB;;AACb;;AACI;;AACJ;;AACA;;AACJ;;AACJ;;AACJ;;AAIA;;AACI;;AAMA;;AAKA;;AACJ;;AAEJ;;;;;;AArEwE;;AAAA;;AAUzC;;AAAA;;AAUJ;;AAAA;;AAmCd;;AAAA;;AAMA;;AAAA;;;;;;;;;sEDrDAL,Y,EAAY;cALxB,uDAKwB;eALd;AACT3L,kBAAQ,EAAE,SADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACoCoB;;AACI;;AACJ;;;;;;AAFmD;;AAC/C;;AAAA;;;;;;AASJ;;AACA;;AACA;;;;;;AAFiD;;AACjD;;AAAA;;;;;;;;AAWR;;AAAgI;AAAA;;AAAA;;AAAA;AAAA;;AAC5H;;AACJ;;;;QD3CC+L,sB;AAab,sCAAsB3J,cAAtB,EACsBD,cADtB,EAEsB6J,mBAFtB,EAGsBlK,WAHtB,EAIsBmK,YAJtB,EAMsBpK,MANtB,EAMuC;AAAA;;AANjB,aAAAO,cAAA,GAAAA,cAAA;AACA,aAAAD,cAAA,GAAAA,cAAA;AACA,aAAA6J,mBAAA,GAAAA,mBAAA;AACA,aAAAlK,WAAA,GAAAA,WAAA;AACA,aAAAmK,YAAA,GAAAA,YAAA;AAEA,aAAApK,MAAA,GAAAA,MAAA;AAdtB,aAAAqK,OAAA,GAAoB,IAAI,mEAAJ,EAApB;AAIA,aAAAC,iBAAA,GAAmC,IAAI,2EAAJ,EAAnC;AAEA,aAAAC,gBAAA,GAAmB,EAAnB;AAQ0C;;;;mCAEhC;AACJ,cAAIpO,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AACA,eAAK6O,cAAL;AACA,eAAK1F,aAAL;AACH;;;wCAEe;AAAA;;AAEd,eAAKuF,OAAL,CAAatG,SAAb,GAA0BnI,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAhC;AACA,eAAK0O,OAAL,CAAajH,SAAb,GAAyB,IAAIxI,IAAJ,EAAzB;AAEA,eAAKyP,OAAL,CAAaI,cAAb,GAA8B,KAAKJ,OAAL,CAAaI,cAAb,CAA4BpN,QAA5B,GAAuCqN,IAAvC,MAAiD,eAAjD,GAAmE,0EAAYzN,aAAZ,CAA0BI,QAA1B,EAAnE,GACA,KAAKgN,OAAL,CAAaI,cAAb,CAA4BpN,QAA5B,GAAuCqN,IAAvC,MAAiD,SAAjD,GAA6D,0EAAYC,OAAZ,CAAoBtN,QAApB,EAA7D,GACA,KAAKgN,OAAL,CAAaI,cAAb,CAA4BpN,QAA5B,GAAuCqN,IAAvC,MAAiD,QAAjD,GAA4D,0EAAYvN,MAAZ,CAAmBE,QAAnB,EAA5D,GACA,KAAKgN,OAAL,CAAaI,cAAb,CAA4BpN,QAA5B,MAA0C,SAA1C,GAAsD,0EAAYT,OAAZ,CAAoBS,QAApB,EAAtD,GAAuF,IAHrH;AAOA,eAAKkD,cAAL,CAAoB/D,IAApB,CAAyB,2DAASI,OAAlC,EAA2Cb,SAA3C,CAAqD,UAAA6O,IAAI,EAAI;AAC3DA,gBAAI,GAAGA,IAAP;AAEA,gBAAIjE,KAAK,GAAGiE,IAAI,CAAC9N,MAAL,CAAY,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAAC8N,KAAF,CAAQ5L,WAAR,MAAyB,OAAI,CAACoL,OAAL,CAAaQ,KAAb,CAAmB5L,WAAnB,EAAzB,IAA6DlC,CAAC,CAACK,SAAF,IAAe,OAAI,CAACiN,OAAL,CAAajN,SAA7F;AAAA,aAAb,CAAZ;;AAEM,gBAAIuJ,KAAK,CAACtC,MAAN,GAAe,CAAnB,EACA;AACE,qBAAI,CAACpE,WAAL,CAAiBhE,WAAjB,CAA6B,0CAA7B;;AACA,qBAAI,CAACoO,OAAL,CAAaQ,KAAb,GAAsB,IAAtB;AACAD,kBAAI,GAAI,IAAIzL,KAAJ,EAAR;AACD,aALD,MAKK;AAEH,qBAAI,CAACmB,cAAL,CAAoBO,QAApB,CAA6B,OAAI,CAACwJ,OAAL,CAAajN,SAA1C,EAAqD,2DAASX,OAA9D,EAAuEV,SAAvE,CAAiF,UAAAW,GAAG,EAAI;AACtFA,mBAAG,GAAGA,GAAN;;AACA,oBAAI,CAACA,GAAG,CAACnB,SAAT,EAAmB;AACjB,yBAAI,CAACgF,cAAL,CAAoB1E,MAApB,CAA2B,OAAI,CAACwO,OAAhC,EAAyC,2DAASzN,OAAlD,EAA2Db,SAA3D,CAAqE,YAAM;AACzE,2BAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,iBAA7B;;AACA,2BAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD,mBAHD;AAID,iBALD,MAOA;AACE,yBAAI,CAAC+D,WAAL,CAAiBhE,WAAjB,0DAAyES,GAAG,CAAC4G,WAA7E,8CAAgI,KAAhI;AACD;AACF,eAZD;;AAcAsH,kBAAI,GAAI,IAAIzL,KAAJ,EAAR;AACD;AAER,WA7BD;AA8BD;;;iCAEK;AACJ,eAAKa,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD;;;wCAEe;AAAA;;AAEd,cAAIT,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIQ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAK2E,cAAL,CAAoB9D,IAApB,CAAyB,2DAASC,OAAlC,EAA2CV,SAA3C,CAAqD,UAAAW,GAAG,EAAI;AACxDA,eAAG,GAAGA,GAAN;AAEA,mBAAI,CAACC,OAAL,GAAgB,IAAIwC,KAAJ,EAAhB;AAEEzC,eAAG,CAACsI,OAAJ,CAAY,UAAA8F,kBAAkB,EAAI;AAEhC,kBAAG3O,KAAK,IAAI,0EAAYc,aAAxB,EACE,OAAI,CAACN,OAAL,CAAauI,IAAb,CAAkB4F,kBAAlB,EADF,KAEK,IAAI3O,KAAK,IAAI,0EAAYgB,MAArB,IAA+B1B,KAAK,IAAIqP,kBAAkB,CAAChH,UAAnB,CAA8BzG,QAA9B,EAA5C,EACD,OAAI,CAACV,OAAL,CAAauI,IAAb,CAAkB4F,kBAAlB;AACH,aANH;AAOL,WAZD;AAaD;;;yCAEgB;AAEf,cAAI3O,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;;AAEA,eAAK,IAAIoP,IAAT,IAAiB,yEAAjB,EAA8B;AAC5B,gBAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACDE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADJ,IACyB5O,KAAK,IAAI,0EAAYc,aADlD,EACkE;AAE9D,mBAAKsN,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAEH,aALD,MAMK,IAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACRE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADG,IACkB5O,KAAK,IAAI,0EAAYgB,MAD3C,EACmD;AAEtD,kBAAG,iFAAmByD,GAAnB,CAAuBmK,IAAvB,KAAgC,0EAAY5N,MAA5C,IAAsD,iFAAmByD,GAAnB,CAAuBmK,IAAvB,KAAgC,0EAAYnO,OAArG,EACI,KAAK2N,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AACH;AACJ;AACF;;;6CAEiB;AAAA;;AAChB,eAAKT,iBAAL,CAAuBvG,SAAvB,GAAoCnI,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAA1C;AACA,eAAK2O,iBAAL,CAAuBlH,SAAvB,GAAmC,IAAIxI,IAAJ,EAAnC;AACA,eAAK0P,iBAAL,CAAuBa,SAAvB,GAAmCvP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAzC;AAEE,eAAKwO,mBAAL,CAAyBtO,MAAzB,CAAgC,KAAKyO,iBAArC,EAAwD,2DAASc,YAAjE,EAA+ErP,SAA/E,CAAyF,YAAM;AAC7F,mBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,0BAA7B;AACD,WAFD;AAGH;;;;;;;uBA3HUiO,sB,EAAsB,gJ,EAAA,gJ,EAAA,gJ,EAAA,mI,EAAA,4I,EAAA,uH;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,usC;AAAA;AAAA;ACnBnC;;AACI;;AACQ;;AACI;;AACA;AAAA;AAAA;;AADA;;AAGJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACI;;AAA6B;AAAA;AAAA;;AAA7B;;AACR;;AAEA;;AACI;;AACI;;AAAgC;AAAA;AAAA;;AAAhC;;AACR;;AAGA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACI;;AAAkC;AAAA;AAAA;;AAAlC;;AACR;;AAER;;AACQ;;AAIA;;AAA0B;AAAA,mBAAS,IAAAlJ,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AAGZ;;;;AAjEgB;;AAAA;;AAMA;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;AAKiC;;AAAA,sGAAgC,SAAhC,EAAgC,sBAAhC;;AAKG;;AAAA,0GAAoC,SAApC,EAAoC,0BAApC;;AAOxB;;AAAA;;AACI;;AAAA;;AASJ;;AAAA;;AACI;;AAAA;;AAQsB;;AAAA,wGAAkC,SAAlC,EAAkC,wBAAlC;;AAIlC;;AAAA;;;;;;;;;sEDzCPkJ,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTjM,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEnBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAeakN,sB;AAIX,sCAAoBC,cAApB,EACoB9F,cADpB,EAEoBxF,MAFpB,EAGoBC,WAHpB,EAIoBhG,KAJpB,EAI0C;AAAA;;AAJtB,aAAAqR,cAAA,GAAAA,cAAA;AACA,aAAA9F,cAAA,GAAAA,cAAA;AACA,aAAAxF,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAhG,KAAA,GAAAA,KAAA;AACJ;;;;mCAER;AACN,eAAKsR,cAAL;AACD;;;yCAEW;AAAA;;AAEZ,cAAMxR,EAAE,GAAG,KAAKE,KAAL,CAAWyG,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAX;AACA,eAAK0K,cAAL,CAAoBzK,QAApB,CAA6B9G,EAA7B,EAAiC,2DAAS6C,OAA1C,EAAmDb,SAAnD,CAA6D,UAAAsO,OAAO,EAAI;AACtE,mBAAI,CAACA,OAAL,GAAeA,OAAf;;AAEA,mBAAI,CAACvF,aAAL,GAAqB/I,SAArB,CAA+B,UAAAY,OAAO,EAAG;AACvC,qBAAI,CAACA,OAAL,GAAeA,OAAf;AACA,qBAAI,CAAC0N,OAAL,CAAajN,SAAb,GAAyB,OAAI,CAACT,OAAL,CAAa4G,YAAtC;AAED,aAJD;AAKD,WARD;AAUD;;;wCAEc;AAAA;;AACT,eAAK+H,cAAL,WAA2B,KAAKjB,OAAL,CAAatQ,EAAxC,EAA6C,2DAAS6C,OAAtD,EAA+Db,SAA/D,CAAyE,YAAM;AAC/E,mBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,+BAA7B;;AACA,mBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD,WAHC;AAIH;;;iCACK;AACJ,eAAK8D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD;;;wCAEY;AACX,iBAAO,KAAKsJ,cAAL,CAAoB3E,QAApB,CAA6B,KAAKwJ,OAAL,CAAajN,SAA1C,EAAqD,2DAASX,OAA9D,CAAP;AACD;;;;;;;uBA1CU4O,sB,EAAsB,gJ,EAAA,gJ,EAAA,uH,EAAA,mI,EAAA,+H;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,2V;AAAA;AAAA;ACfnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAGJ;;AAGA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAG,aAAA,EAAT;AAAwB,WAAxB;;AACtB;;AACJ;;AAEA;;AAA0B;AAAA,mBAAS,IAAAxK,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;;;AAxBiB;;AAAA;;AAOD;;AAAA;;AAKA;;AAAA;;;;;;;;;sEDFHqK,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTpN,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEH3B;;AAAsC;;AAAE;;;;;;AACxC;;AAAmC;;AAAU;;;;;;AAAV;;AAAA;;;;;;AAKnC;;AAAsC;;AAAI;;;;;;AAC1C;;AAAmC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAM/B;;AAAsC;;AAAK;;;;;;AAC3C;;AAAmC;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAMrC;;AAAsC;;AAAO;;;;;;AAC7C;;AAAmC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAIrC;;AAAsC;;AAAe;;;;;;AACrD;;AAAmC;;AAAsB;;;;;;AAAtB;;AAAA;;;;;;AAMzC;;AAAsC;;AAAS;;;;;;AAE3C;;AACE;;AACE;;AACF;;AACF;;;;;;AACA;;AACE;;AACE;;AACF;;AACF;;;;;;AAVF;;AACE;;AAKA;;AAKF;;;;;;AAVO;;AAAA;;AAKA;;AAAA;;;;;;AAYH;;AAAsC;;AAAK;;;;;;AAUvC;;AAEI;;AACI;;AAEJ;;AAEJ;;;;;;AAP2B;;;;;;AAT/B;;AAGE;;AACM;;AACI;;AACJ;;AACJ;;AAEA;;AASJ;;;;;;;;AAfK;;AAAA;;AAME;;AAAA;;;;;;AAYT;;AAAuD;;AAAK;;;;;;AAC5D;;;;QCrDOsN,oB;AAOX,oCACoBnL,cADpB,EAEoBC,cAFpB,EAGoBgE,QAHpB,EAIoBvE,MAJpB,EAImC;AAAA;;AAHf,aAAAM,cAAA,GAAAA,cAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAgE,QAAA,GAAAA,QAAA;AACA,aAAAvE,MAAA,GAAAA,MAAA;AARpB,aAAA0L,eAAA,GAA4B,KAA5B;AAEA,aAAA7G,gBAAA,GAAmB,CAAC,IAAD,EAAM,MAAN,EAAa,OAAb,EAAqB,WAArB,EAAiC,gBAAjC,EAAkD,WAAlD,EAA8D,QAA9D,CAAnB;AAQc;;;;mCAGN;AACL,eAAK8G,OAAL;AAEA,cAAIxP,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEF;;;kDAIsB;AACrB,cAAIQ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,cAAIQ,KAAK,IAAI,iFAAYS,OAAzB,EACE,KAAK2H,QAAL,CAActI,WAAd,CAA0B,oDAA1B,EAAgF,IAAhF,EADF,KAGE,KAAK+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,iBAAD,CAArB;AACH;;;kCAEe;;;;;;;;;AAER0P,iC,GAAoC9M,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAkCC,K;AACtEvD,yB,GAAQC,YAAY,CAACC,OAAb,CAAqB,OAArB,C;AACRQ,yB,GAAQP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,C;AACdkQ,0B,GAASjQ,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,C;AACnB,yBAAK+P,eAAL,GAAuBvP,KAAK,IAAI,iFAAYS,OAArB,GAA+B,KAA/B,GAAuC,IAA9D;AAEA,yBAAK2D,cAAL,CAAoB/D,IAApB,CAAyB,2DAASI,OAAlC,EAA2Cb,SAA3C,CAAqD,UAAA+P,CAAC,EAAG;AACvDA,uBAAC,GAAGA,CAAJ;AACA,0BAAIC,gBAAgB,GAAGD,CAAvB;AAEA,0BAAIE,gBAAgB,GAAG,IAAI7M,KAAJ,EAAvB;;AAEA,0BAAIyM,aAAJ,EAAkB;AAEhB,6BAAK,IAAIvG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG0G,gBAAgB,CAAC1H,MAA7C,EAAqDgB,KAAK,EAA1D,EAA8D;AAC5D,8BAAMJ,OAAO,GAAG8G,gBAAgB,CAAC1G,KAAD,CAAhC;AACE,8BAAIJ,OAAO,CAAChD,IAAR,CAAahD,WAAb,GAA2BC,QAA3B,CAAoC0M,aAAa,CAAC3M,WAAd,EAApC,CAAJ,EACE+M,gBAAgB,CAAC9G,IAAjB,CAAsBD,OAAtB;AACL;;AACD8G,wCAAgB,GAAG,IAAI5M,KAAJ,EAAnB;AACA4M,wCAAgB,GAAGC,gBAAnB;AACD;;AAED,6BAAI,CAAC1L,cAAL,CAAoB9D,IAApB,CAAyB,2DAASC,OAAlC,EAA2CV,SAA3C,CAAqD,UAAAtC,CAAC,EAAI;AACxDA,yBAAC,GAAGA,CAAJ;AACA,4BAAIwS,eAAe,GAAGxS,CAAtB;AAEA,+BAAI,CAAC4Q,OAAL,GAAe,IAAIlL,KAAJ,EAAf;AACA,4BAAI+M,SAAS,GAAG,IAAhB;AACA,4BAAIC,SAAS,GAAG,IAAhB;AACA,4BAAIC,YAAY,GAAG,IAAnB;;AAEA,6BAAK,IAAI/G,MAAK,GAAG,CAAjB,EAAoBA,MAAK,GAAG0G,gBAAgB,CAAC1H,MAA7C,EAAqDgB,MAAK,EAA1D,EAA8D;AAC5D,8BAAMX,GAAG,GAAGqH,gBAAgB,CAAC1G,MAAD,CAA5B;;AAEM,+BAAK,IAAIA,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAI4G,eAAe,CAAC5H,MAA7C,EAAqDgB,OAAK,EAA1D,EAA8D;AAC5D,gCAAM3I,GAAG,GAAIuP,eAAe,CAAC5G,OAAD,CAA5B;;AAEA,gCAAGX,GAAG,CAACtH,SAAJ,IAAiBV,GAAG,CAAC3C,EAAJ,CAAOsD,QAAP,GAAkBqN,IAAlB,EAApB,EACA;AACEwB,uCAAS,GAAGxP,GAAG,CAAC3C,EAAhB;AACA2K,iCAAG,CAACtH,SAAJ,GAAgBV,GAAG,CAAC4G,WAApB;AACAoB,iCAAG,CAAC+F,cAAJ,GAAqB/F,GAAG,CAAC+F,cAAJ,IAAsB/O,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAtB,GAA4D,eAA5D,GACA+I,GAAG,CAAC+F,cAAJ,IAAsB/O,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAtB,GAA4D,SAA5D,GACA+I,GAAG,CAAC+F,cAAJ,IAAsB/O,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtB,GAA2D,SAA3D,GACA+I,GAAG,CAAC+F,cAAJ,IAAsB/O,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtB,GAA2D,QAA3D,GACA+I,GAAG,CAAC+F,cAJzB;AAMA0B,uCAAS,GAAGzP,GAAG,CAAC3C,EAAhB;AACAqS,0CAAY,GAAG1P,GAAG,CAACoH,UAAnB;;AAEE,kCAAG3H,KAAK,IAAI,iFAAYc,aAAxB,EACA;AACE,uCAAI,CAACoN,OAAL,CAAanF,IAAb,CAAkBR,GAAlB;;AACE;AACD,+BAJH,MAKO,IAAGvI,KAAK,IAAI,iFAAYgB,MAAxB,EACL;AACE,oCAAGgP,SAAS,IAAI1Q,KAAb,IAAsB2Q,YAAY,IAAI3Q,KAAhB,IAAyBiJ,GAAG,CAAC+F,cAAJ,IAAsB,eAAxE,EACA;AACE,yCAAI,CAACJ,OAAL,CAAanF,IAAb,CAAkBR,GAAlB;;AACAwH,2CAAS,GAAG,IAAZ;AACAC,2CAAS,GAAG,IAAZ;AACA;AACD;AACF,+BATI,MAUA,IAAGhQ,KAAK,IAAI,iFAAYS,OAAxB,EACL;AAEE,oCAAGuP,SAAS,IAAI1Q,KAAb,IAAsBiJ,GAAG,CAAC3K,EAAJ,IAAU8R,MAAnC,EACA;AACE,yCAAI,CAACxB,OAAL,CAAanF,IAAb,CAAkBR,GAAlB;;AACAwH,2CAAS,GAAG,IAAZ;AACAC,2CAAS,GAAG,IAAZ;AACA;AACD;AAEF;AAEF;AACN;AACR;AACJ,uBA3DC;AA4DL,qBA7EG;;;;;;;;;AAgFJ;;;;;;;uBA1HWV,oB,EAAoB,gJ,EAAA,gJ,EAAA,mI,EAAA,uH;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,e;AAAA,a;AAAA,4xB;AAAA;AAAA;ADhCjC;;AACG;;AAEC;;AAAM;AAAA,mBAAS,IAAAE,OAAA,EAAT;AAAkB,WAAlB;;AACJ;;AAA0B;;AAAM;;AAClC;;AACJ;;AACA;;AACI;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAIE;;AACI;;AACA;;AACJ;;AAIA;;AACE;;AACA;;AACJ;;AAEA;;AACE;;AACA;;AACJ;;AAIH;;AACC;;AACE;;AAYF;;AAKI;;AACE;;AACA;;AAmBF;;AAEA;;AACA;;AAIF;;AAEJ;;AACA;;AACE;;AAAM;AAAA,mBAAS,IAAAU,uBAAA,EAAT;AAAkC,WAAlC;;AACJ;;AAA0B;;AAAU;;AACtC;;AACF;;;;AAxFqB;;AAAA;;AA4EI;;AAAA;;AACP;;AAAA;;;;;;;;;sECrDLZ,oB,EAAoB;cAPhC,uDAOgC;eAPtB;AACTxN,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAOsB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACsByB;;AACD;;AACJ;;;;;;AAFuD;;AACnD;;AAAA;;;;;;AASJ;;AACG;;AACH;;;;;;AAFiD;;AAC9C;;AAAA;;;;;;;;AAkBf;;AAA+G;AAAA;;AAAA;;AAAA;AAAA;;AAC3G;;AACJ;;;;QDlCKmO,sB;AAUX,sCAAoBC,aAApB,EACmB/G,cADnB,EAEmBvF,WAFnB,EAGmBD,MAHnB,EAImB/F,KAJnB,EAIwC;AAAA;;AAJpB,aAAAsS,aAAA,GAAAA,aAAA;AACD,aAAA/G,cAAA,GAAAA,cAAA;AACA,aAAAvF,WAAA,GAAAA,WAAA;AACA,aAAAD,MAAA,GAAAA,MAAA;AACA,aAAA/F,KAAA,GAAAA,KAAA;AATnB,aAAAyR,eAAA,GAA4B,KAA5B;AAEA,aAAAnB,gBAAA,GAAmB,EAAnB;AAQgB;;;;mCAER;AACN,eAAKiC,aAAL;AACA,eAAK1H,aAAL;AACD;;;wCAEe;AAAA;;AAChB,cAAI3I,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AACA,eAAK0O,OAAL,CAAaI,cAAb,GAA8B,KAAKJ,OAAL,CAAaI,cAAb,IAA+B,eAA/B,GAAiD,0EAAYxN,aAAZ,CAA0BI,QAA1B,EAAjD,GACI,KAAKgN,OAAL,CAAaI,cAAb,IAA+B,SAA/B,GAA2C,0EAAYE,OAAZ,CAAoBtN,QAApB,EAA3C,GACC,KAAKgN,OAAL,CAAaI,cAAb,IAA+B,SAA/B,GAA2C,0EAAY7N,OAAZ,CAAoBS,QAApB,EAA3C,GACA,KAAKgN,OAAL,CAAaI,cAAb,IAA+B,QAA/B,GAA0C,0EAAYtN,MAAZ,CAAmBE,QAAnB,EAA1C,GACA,IAJnC;AAMI,eAAKkP,aAAL,CAAmB/P,IAAnB,CAAwB,2DAASI,OAAjC,EAA0Cb,SAA1C,CAAoD,UAAA6O,IAAI,EAAI;AAC1DA,gBAAI,GAAGA,IAAP;AAEA,gBAAIjE,KAAK,GAAGiE,IAAI,CAAC9N,MAAL,CAAY,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAAC8N,KAAF,CAAQ5L,WAAR,MAAyB,OAAI,CAACoL,OAAL,CAAaQ,KAAb,CAAmB5L,WAAnB,EAAzB,IAA6DlC,CAAC,CAACK,SAAF,IAAe,OAAI,CAACiN,OAAL,CAAajN,SAAzF,IAAsGL,CAAC,CAAChD,EAAF,IAAQ,OAAI,CAACsQ,OAAL,CAAatQ,EAA/H;AAAA,aAAb,CAAZ;;AAEE,gBAAI4M,KAAK,CAACtC,MAAN,GAAe,CAAnB,EACA;AACI,qBAAI,CAACkI,aAAL,CAAmB9L,MAAnB,CAA0B,OAAI,CAAC4J,OAA/B,EAAwC,2DAASzN,OAAjD,EAA0Db,SAA1D,CAAoE,YAAM;AACxE,uBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,iCAA7B;;AACA,uBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD,eAHD;;AAIA0O,kBAAI,GAAI,IAAIzL,KAAJ,EAAR;AACD,aAPH,MAOQ,IAAGhD,KAAK,IAAI,0EAAYc,aAAxB,EAAsC;AAE1C,qBAAI,CAACsP,aAAL,CAAmB9L,MAAnB,CAA0B,OAAI,CAAC4J,OAA/B,EAAwC,2DAASzN,OAAjD,EAA0Db,SAA1D,CAAoE,YAAM;AACtE,uBAAI,CAACkE,WAAL,CAAiBhE,WAAjB,CAA6B,iCAA7B;;AACA,uBAAI,CAAC+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD,eAHH;;AAIE0O,kBAAI,GAAI,IAAIzL,KAAJ,EAAR;AACH,aAPK,MAOD;AAEH,qBAAI,CAACc,WAAL,CAAiBhE,WAAjB,CAA6B,4CAA7B,EAA2E,KAA3E;;AACA,qBAAI,CAACoO,OAAL,CAAaQ,KAAb,GAAsB,IAAtB;AACAD,kBAAI,GAAI,IAAIzL,KAAJ,EAAR;AACH;AACJ,WAzBD;AA0BH;;;iCAEK;AACJ,eAAKa,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD;;;wCAEe;AAAA;;AAEd,cAAIT,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIQ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAK6J,cAAL,CAAoBhJ,IAApB,CAAyB,2DAASC,OAAlC,EAA2CV,SAA3C,CAAqD,UAAAW,GAAG,EAAI;AAC1DA,eAAG,GAAGA,GAAN;AAEA,mBAAI,CAACC,OAAL,GAAgB,IAAIwC,KAAJ,EAAhB;AAEAzC,eAAG,CAACsI,OAAJ,CAAY,UAAA8F,kBAAkB,EAAI;AAEhC,kBAAG3O,KAAK,IAAI,0EAAYc,aAAxB,EACE,OAAI,CAACN,OAAL,CAAauI,IAAb,CAAkB4F,kBAAlB,EADF,KAEK,IAAI3O,KAAK,IAAI,0EAAYgB,MAArB,IAA+B1B,KAAK,IAAIqP,kBAAkB,CAAC/Q,EAAnB,CAAsBsD,QAAtB,EAAxC,IAA4ElB,KAAK,IAAI,0EAAYS,OAArB,IAAgCnB,KAAK,IAAIqP,kBAAkB,CAAC/Q,EAAnB,CAAsBsD,QAAtB,EAArH,IAAyJ5B,KAAK,IAAIqP,kBAAkB,CAAChH,UAAnB,CAA8BzG,QAA9B,EAAtK,EACD,OAAI,CAACV,OAAL,CAAauI,IAAb,CAAkB4F,kBAAlB;AACH,aANH;AAQD,WAbD;AAcD;;;wCAEY;AAAA;;AACX,cAAM/Q,EAAE,GAAG,KAAKE,KAAL,CAAWyG,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAX;AACA,eAAK2L,aAAL,CAAmB1L,QAAnB,CAA4B9G,EAA5B,EAAgC,2DAAS6C,OAAzC,EAAkDb,SAAlD,CAA4D,UAAAsO,OAAO,EAAI;AACrE,mBAAI,CAACA,OAAL,GAAeA,OAAf;AAEA,gBAAIoC,WAAW,GAAGpC,OAAO,CAACI,cAA1B;AACA,mBAAI,CAACJ,OAAL,CAAaI,cAAb,GAA8B,OAAI,CAACJ,OAAL,CAAaI,cAAb,IAA+B,0EAAYxN,aAAZ,CAA0BI,QAA1B,EAA/B,GAAsE,eAAtE,GACA,OAAI,CAACgN,OAAL,CAAaI,cAAb,IAA+B,0EAAYE,OAAZ,CAAoBtN,QAApB,EAA/B,GAAiE,SAAjE,GACC,OAAI,CAACgN,OAAL,CAAaI,cAAb,IAA+B,0EAAY7N,OAAZ,CAAoBS,QAApB,EAA/B,GAAiE,SAAjE,GACA,OAAI,CAACgN,OAAL,CAAaI,cAAb,IAA+B,0EAAYtN,MAAZ,CAAmBE,QAAnB,EAA/B,GAAgE,QAAhE,GACA,IAJ/B;;AAMD,mBAAI,CAACqP,wBAAL,CAA8B,OAAI,CAACrC,OAAL,CAAaI,cAA3C,EAA2DgC,WAA3D;AACA,WAXD;AAYD;;;iDAEwBpC,O,EAAkBoC,W,EAAsB;AAC/D,cAAItQ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;;AAGE,eAAK,IAAIoP,IAAT,IAAiB,yEAAjB,EAA8B;AAEzB,gBAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACFE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADH,IACwB5O,KAAK,IAAI,0EAAYc,aADjD,EACiE;AAE9D,mBAAKsN,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAED,aALF,MAMM,IAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACRE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADG,IACkB5O,KAAK,IAAI,0EAAYgB,MAD3C,EACmD;AAExD,kBAAG,iFAAmByD,GAAnB,CAAuBmK,IAAvB,KAAgC,0EAAY5N,MAA5C,IAAsD,iFAAmByD,GAAnB,CAAuBmK,IAAvB,KAAgC,0EAAYnO,OAArG,EACI,KAAK2N,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAEH,aANI,MAOA,IAAI,0EAAYC,cAAZ,CAA2BD,IAA3B,KACRE,KAAK,CAACC,QAAQ,CAACH,IAAD,CAAT,CADG,IACkB5O,KAAK,IAAI,0EAAYS,OAD3C,EACoD;AAEvD,kBAAG,iFAAmBgE,GAAnB,CAAuBmK,IAAvB,KAAgC,0EAAYnO,OAA/C,EACI,KAAK2N,gBAAL,CAAsBrF,IAAtB,CAA2B6F,IAA3B;AAEL;AACN;AACJ;;;;;;;uBA9HUuB,sB,EAAsB,gJ,EAAA,gJ,EAAA,mI,EAAA,uH,EAAA,+H;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,q8B;AAAA;AAAA;ACnBnC;;AACI;;AAAgB;;AAAe;;AAC3B;;AACI;;AACI;;AACC;AAAA;AAAA;;AADD;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;AAAA;AAAA;;AADA;;AAEJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACH;;AAGT;;AACJ;;AAEA;;AACI;;AACA;;AACA;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AACI;;AAAqB;AAAA;AAAA;;AAArB;;AACR;;AAEA;;AACI;;AACI;;AAA2B;AAAA;AAAA;;AAA3B;;AACR;;AAGJ;;AAEA;;AAIA;;AAA0B;AAAA,mBAAS,IAAAtL,MAAA,EAAT;AAAiB,WAAjB;;AACtB;;AACJ;;AACR;;;;AArDiB;;AAAA;;AAKD;;AAAA;;AAKA;;AAAA;;AAMY;;AAAA;;AACS;;AAAA;;AAST;;AAAA;;AACI;;AAAA;;AAQS;;AAAA,qGAA+B,SAA/B,EAA+B,qBAA/B;;AAKM;;AAAA,wGAAkC,SAAlC,EAAkC,wBAAlC;;AAM/B;;AAAA;;;;;;;;;sEDhCHsL,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTrO,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEnBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOawO,gB;AAEX,kCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,gB;AAAgB,K;;;YAAhBA,gB;AAAgB,kC;AAAA,c;AAAA,a;AAAA;AAAA;ACP7B;;AAAG;;AAAc;;;;;;;;sEDOJA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACT1O,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;AEP7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAKayO,Y,GAEX,sBAAoBC,EAApB,EAAoC;AAAA;;AAAhB,WAAAA,EAAA,GAAAA,EAAA;AAClBA,QAAE,CAACC,aAAH,CAAiBC,KAAjB,CAAuBC,KAAvB,GAA+B,SAA/B;AACD,K;;;uBAJUJ,Y,EAAY,yH;AAAA,K;;;YAAZA,Y;AAAY;;;;;sEAAZA,Y,EAAY;cAHxB,uDAGwB;eAHd;AACT3O,kBAAQ,EAAE;AADD,S;AAGc,Q;;;;;;;;;;;;;;;;;;;;;;ACLzB;AAAA;;;AAAA;AAAA;AAAA;;QAAagP,M;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;QAAa7B,Y;;;;;;;;;;;;;;;;;;;ACGb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAY8B,WAAZ;;AAAA,eAAYA,WAAZ,EAAuB;AAEnB,iDAAiBtR,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAvB,IAA4D,eAA5D;AACA,2CAAUC,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAhB,IAAqD,SAArD;AACA,2CAAUC,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAhB,IAAoD,SAApD;AACA,0CAASC,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAf,IAAmD,QAAnD;AACH,KAND,EAAYuR,WAAW,KAAXA,WAAW,MAAvB;;AAQO,QAAMC,kBAAkB,GAAG,IAAI/L,GAAJ,CAAwB,CAC1D,CAAC,eAAD,EAAkBxF,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAxB,CAD0D,EAE1D,CAAC,SAAD,EAAYC,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAlB,CAF0D,EAG1D,CAAC,SAAD,EAAYC,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAlB,CAH0D,EAI1D,CAAC,QAAD,EAAWC,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAjB,CAJ0D,CAAxB,CAA3B;;;;;;;;;;;;;;;;ACXP;AAAA;;;AAAA;AAAA;AAAA;;QAAaiB,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBb,QAAMwQ,WAAW,GAAG;AAClBC,aAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAC,wBAAgB;AAAjB,OAAhB;AADS,KAApB;;QASaC,Y;AAgBX,4BAAoBtN,MAApB,EACoBuN,QADpB,EAEoBC,IAFpB,EAGoBvN,WAHpB,EAG6C;AAAA;;AAHzB,aAAAD,MAAA,GAAAA,MAAA;AACA,aAAAuN,QAAA,GAAAA,QAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAvN,WAAA,GAAAA,WAAA;AAjBpB,aAAAoJ,KAAA,GAAQ,mBAAR;AACA,aAAAoE,eAAA,GAAkB,EAAlB;AACA,aAAAC,cAAA,GAAiB,WAAjB;AACA,aAAA5H,MAAA,GAAkB,IAAI,0DAAJ,EAAlB;AAGQ,aAAA6H,YAAA,GAAe,EAAf;AAEA,aAAAC,kBAAA,GAA8B,KAA9B;AAER,aAAAxL,kBAAA,GAAqB,IAAI,0DAAJ,EAArB;AACA,aAAAE,mBAAA,GAAsB,IAAI,0DAAJ,EAAtB;AASc,aAAKmL,eAAL,GAAuB,sEAAYA,eAAnC;AACF,aAAKC,cAAL,GAAuB,sEAAYG,QAAnC;AACC;;;;qCAEM/H,M,EAAgB;;;;;;;;;AAGhB,2BAAM,KAAK0H,IAAL,CAAUM,IAAV,CAA4B,KAAKJ,cAAL,GAAsB,2DAASK,KAA3D,EAAkEjI,MAAlE,EAA0EkI,SAA1E,EAAN;;;AAAXC,4B;;AAGH,wBAAIA,QAAQ,IAAI,IAAZ,IAAoB,CAACA,QAAQ,CAAC1S,SAA9B,IAA2C,CAAC0S,QAAQ,CAACC,aAAzD,EACG;AAEE,2BAAK9L,kBAAL,CAAwB+L,IAAxB,CAA6B,IAA7B;AACA,2BAAK7L,mBAAL,CAAyB6L,IAAzB,CAA8B,KAA9B;AACA,2BAAKP,kBAAL,GAA0B,IAA1B;AACA,2BAAK5N,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,GAAD,CAArB;AAEAR,kCAAY,CAAC0S,OAAb,CAAqB,KAArB,EAA4BH,QAAQ,CAACI,KAArC;AACA3S,kCAAY,CAAC0S,OAAb,CAAqB,MAArB,EAA6BH,QAAQ,CAAClU,EAAtC;AACA2B,kCAAY,CAAC0S,OAAb,CAAqB,OAArB,EAA8BH,QAAQ,CAACK,cAAvC;AAEA5S,kCAAY,CAAC0S,OAAb,CAAqB,MAArB,EAA6BH,QAAQ,CAAC1S,SAAtC;AACAG,kCAAY,CAAC0S,OAAb,CAAqB,OAArB,EAA8BH,QAAQ,CAAC7Q,SAAvC;AACA,2BAAK6C,WAAL,CAAiBhE,WAAjB,CAA6B,sBAAsB6J,MAAM,CAAC+E,KAA1D,EAAkE,KAAlE;AAEAoD,8BAAQ,CAACM,cAAT,CAAwBvJ,OAAxB,CAAgC,UAAAC,OAAO,EAAI;AAEzC,4BAAIA,OAAO,CAAChD,IAAR,IAAgB,eAApB,EACIvG,YAAY,CAAC0S,OAAb,CAAqB,aAArB,EAAoCnJ,OAAO,CAAClL,EAAR,CAAWsD,QAAX,EAApC,EADJ,KAEK,IAAI4H,OAAO,CAAChD,IAAR,IAAgB,SAApB,EACDvG,YAAY,CAAC0S,OAAb,CAAqB,aAArB,EAAoCnJ,OAAO,CAAClL,EAAR,CAAWsD,QAAX,EAApC,EADC,KAEA,IAAI4H,OAAO,CAAChD,IAAR,IAAgB,SAApB,EACDvG,YAAY,CAAC0S,OAAb,CAAqB,YAArB,EAAmCnJ,OAAO,CAAClL,EAAR,CAAWsD,QAAX,EAAnC,EADC,KAEA,IAAI4H,OAAO,CAAChD,IAAR,IAAgB,QAApB,EACDvG,YAAY,CAAC0S,OAAb,CAAqB,YAArB,EAAmCnJ,OAAO,CAAClL,EAAR,CAAWsD,QAAX,EAAnC;AACL,uBAVD;AAYD,qBA5BJ,MA8BG;AACE,2BAAKuQ,kBAAL,GAA0B,KAA1B;AACA,2BAAKxL,kBAAL,CAAwB+L,IAAxB,CAA6B,KAA7B;AACA,2BAAK7L,mBAAL,CAAyB6L,IAAzB,CAA8B,IAA9B;AAEA,0BAAIF,QAAQ,CAAC1S,SAAb,EACE,KAAK0E,WAAL,CAAiBhE,WAAjB,CAA6B,oBAA7B,EAAmD,IAAnD,EADF,KAEK,IAAIgS,QAAQ,CAACC,aAAb,EACH,KAAKjO,WAAL,CAAiBhE,WAAjB,CAA6B,oBAA7B,EAAmD,IAAnD,EADG,KAGH,KAAKgE,WAAL,CAAiBhE,WAAjB,CAA6B,4BAA7B,EAA2D,IAA3D;AACL;;;;;;;;AAGD,yBAAKgE,WAAL,CAAiBhE,WAAjB,CAA6B,sBAA7B,EAAqD,IAArD;;;;;;;;;AAGL;;;sCACU;AACT,eAAKmG,kBAAL,CAAwB+L,IAAxB,CAA6B,KAA7B;AACA,eAAK7L,mBAAL,CAAyB6L,IAAzB,CAA8B,IAA9B;AACAzS,sBAAY,CAAC8S,UAAb,CAAwB,KAAxB;AACA9S,sBAAY,CAAC8S,UAAb,CAAwB,MAAxB;AACA9S,sBAAY,CAAC8S,UAAb,CAAwB,OAAxB;AACA9S,sBAAY,CAAC8S,UAAb,CAAwB,MAAxB;AACA9S,sBAAY,CAAC8S,UAAb,CAAwB,OAAxB;AACA,eAAKvO,WAAL,CAAiBhE,WAAjB,CAA6B,YAA7B,EAA2C,KAA3C;AACA,eAAK+D,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACD;;;iCAEK;AACJ,cAAIuS,SAAS,GAAG,IAAI,gEAAJ,CAAgB;AAC5B,4BAAiB,iCADW;AAE5B,sBAAiB,kBAFW;AAG5B,6BAAiB,YAAY/S,YAAY,CAACC,OAAb,CAAqB,KAArB;AAHD,WAAhB,CAAhB;AAKA,iBAAO;AAAE0R,mBAAO,EAAEoB;AAAX,WAAP;AACD;;;6CAEiB;AAAA;;AAEhB,2FAAmBzJ,OAAnB,CAA2B,UAAAC,OAAO,EAAI;AACpC,mBAAI,CAAC0I,YAAL,CAAkBzI,IAAlB,CAAuBD,OAAvB;AACD,WAFD;;AAGD,iBAAO,KAAK0I,YAAZ;AACA;;;;;;;uBA3GUL,Y,EAAY,8G,EAAA,+H,EAAA,uH,EAAA,iH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACV3D,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAca+E,c;AAMb,8BAAoBnB,QAApB,EACsBC,IADtB,EAEsBvN,WAFtB,EAGsB0O,YAHtB,EAGiD;AAAA;;AAH7B,aAAApB,QAAA,GAAAA,QAAA;AACE,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAvN,WAAA,GAAAA,WAAA;AACA,aAAA0O,YAAA,GAAAA,YAAA;AAPpB,aAAAtF,KAAA,GAAQ,EAAR;AACA,aAAAoE,eAAA,GAAkB,EAAlB;AACA,aAAAC,cAAA,GAAiB,EAAjB;AAQY,aAAKD,eAAL,GAAuB,sEAAYA,eAAnC;AACA,aAAKC,cAAL,GAAuB,sEAAYG,QAAZ,GAAuB,UAA9C;AACA,O,CAEV;;;;;+BACOvH,O,EAAiB;AAAA;;AACtB,iBAAO,KAAKkH,IAAL,CAAUM,IAAV,CAAwB,KAAKJ,cAA7B,EAA6CpH,OAA7C,EAAsD,KAAKqI,YAAL,CAAkBC,MAAlB,EAAtD,EAAkFlH,IAAlF,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;+BACI;AAAA;;AACF,iBAAO,KAAK+T,IAAL,CAAU5M,GAAV,CAAyB,KAAK8M,cAA9B,EAA8C,KAAKiB,YAAL,CAAkBC,MAAlB,EAA9C,EAA0ElH,IAA1E,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAEF;;;;iCACSM,E,EAAU;AAAA;;AAClB,cAAMgV,GAAG,aAAM,KAAKrB,cAAX,cAA6B3T,EAA7B,CAAT;AAEE,iBAAO,KAAKyT,IAAL,CAAU5M,GAAV,CAAuBmO,GAAvB,EAA4B,KAAKJ,YAAL,CAAkBC,MAAlB,EAA5B,EAAwDlH,IAAxD,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAIF,S,CAED;;;;+BACO6M,O,EAAgB;AAAA;;AACtB,iBAAO,KAAKkH,IAAL,CAAUwB,GAAV,CAAuB,KAAKtB,cAA5B,EAA4CpH,OAA5C,EAAqD,KAAKqI,YAAL,CAAkBC,MAAlB,EAArD,EAAiFlH,IAAjF,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAIA;;;gCAEMM,E,EAAY;AAAA;;AAClB,cAAMgV,GAAG,aAAM,KAAKrB,cAAX,cAA6B3T,EAA7B,CAAT;AACA,iBAAO,KAAKyT,IAAL,WAA0BuB,GAA1B,EAA+B,KAAKJ,YAAL,CAAkBC,MAAlB,EAA/B,EAA2DlH,IAA3D,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAKA;;;;;;;uBAzDSiV,c,EAAc,+H,EAAA,uH,EAAA,iH,EAAA,mI;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACV/E,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYasF,iB;AAMX,iCACU1B,QADV,EAEoBC,IAFpB,EAGoBvN,WAHpB,EAIoB0O,YAJpB,EAI+C;AAAA;;AAHrC,aAAApB,QAAA,GAAAA,QAAA;AACU,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAvN,WAAA,GAAAA,WAAA;AACA,aAAA0O,YAAA,GAAAA,YAAA;AARpB,aAAAtF,KAAA,GAAQ,EAAR;AACA,aAAAoE,eAAA,GAAkB,EAAlB;AACA,aAAAC,cAAA,GAAiB,EAAjB;AAQc,aAAKD,eAAL,GAAuB,sEAAYA,eAAnC;AACA,aAAKC,cAAL,GAAuB,sEAAYG,QAAnC;AACD,O,CAGX;;;;;+BACOqB,C,EAAOnE,I,EAAc;AAAA;;AAC1B,iBAAO,KAAKyC,IAAL,CAAUM,IAAV,CAAkB,KAAKJ,cAAL,GAAsB3C,IAAxC,EAA+CmE,CAA/C,EAAkD,KAAKP,YAAL,CAAkBC,MAAlB,EAAlD,EAA8ElH,IAA9E,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;6BACKsR,I,EAAY;AAAA;;AACf,iBAAO,KAAKyC,IAAL,CAAU5M,GAAV,CAAmB,KAAK8M,cAAL,GAAsB3C,IAAzC,EAA+C,KAAK4D,YAAL,CAAkBC,MAAlB,EAA/C,EAA2ElH,IAA3E,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;iCACSM,E,EAAYgR,I,EAAY;AAAA;;AACjC,cAAMgE,GAAG,aAAM,KAAKrB,cAAL,GAAsB3C,IAA5B,cAAoChR,EAApC,CAAT;AAEE,iBAAO,KAAKyT,IAAL,CAAU5M,GAAV,CAAiBmO,GAAjB,EAAsB,KAAKJ,YAAL,CAAkBC,MAAlB,EAAtB,EAAkDlH,IAAlD,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAID,S,CAED;;;;+BACOyV,C,EAAMnE,I,EAAY;AAAA;;AACzB,iBAAO,KAAKyC,IAAL,CAAUwB,GAAV,CAAiB,KAAKtB,cAAL,GAAsB3C,IAAvC,EAA6CmE,CAA7C,EAAgD,KAAKP,YAAL,CAAkBC,MAAlB,EAAhD,EAA4ElH,IAA5E,CACL,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADK,EAEL,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFK,CAAP;AAIC;;;gCAEMM,E,EAAYgR,I,EAAe;AAAA;;AAChC,cAAMgE,GAAG,aAAM,KAAKrB,cAAL,GAAsB3C,IAA5B,cAAoChR,EAApC,CAAT;AACA,iBAAO,KAAKyT,IAAL,WAAoBuB,GAApB,EAAyB,KAAKJ,YAAL,CAAkBC,MAAlB,EAAzB,EAAqDlH,IAArD,CACP,2DAAI,UAAAmH,GAAG;AAAA,mBAAIA,GAAJ;AAAA,WAAP,CADO,EAEP,kEAAW,UAAApV,CAAC;AAAA,mBAAI,OAAI,CAACwG,WAAL,CAAiB6O,WAAjB,CAA6BrV,CAA7B,CAAJ;AAAA,WAAZ,CAFO,CAAP;AAKD;;;;;;;uBA1DQwV,iB,EAAiB,+H,EAAA,uH,EAAA,iH,EAAA,mI;AAAA,K;;;aAAjBA,iB;AAAiB,eAAjBA,iBAAiB,K;AAAA,kBAFhB;;;;;sEAEDA,iB,EAAiB;cAH7B,wDAG6B;eAHlB;AACVtF,oBAAU,EAAE;AADF,S;AAGkB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQanL,W;AAEX,2BAAoB+O,QAApB,EACmBC,IADnB,EAEmBrE,aAFnB,EAEgD;AAAA;;AAF5B,aAAAoE,QAAA,GAAAA,QAAA;AACD,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAArE,aAAA,GAAAA,aAAA;AACH;;;;oCAGJgG,G,EAAuC;AAAA,cAAzBC,MAAyB,uEAAP,KAAO;AACjD,eAAK7B,QAAL,CAAchO,IAAd,CAAmB4P,GAAnB,EAAwB,GAAxB,EAA8B;AAC5BE,oBAAQ,EAAG,IADiB;AAE5BC,8BAAkB,EAAE,OAFQ;AAG5BC,4BAAgB,EAAG,KAHS;AAI5BC,sBAAU,EAAGJ,MAAM,GAAG,CAAC,WAAD,CAAH,GAAmB,CAAC,YAAD;AAJV,WAA9B;AAOH;;;oCAEa3V,C,EAAQ;AAClB,eAAKwC,WAAL,CAAiB,wBAAjB,EAA2C,IAA3C;AACA,iBAAO,0CAAP;AACD;;;wCAEewT,G,EAAY;AAC1B,iBAAOC,IAAI,CAACD,GAAD,CAAX;AACD;;;4CAEmBA,G,EAAW;AAC7B,iBAAOE,IAAI,CAACF,GAAD,CAAX;AAED;;;sCAEaG,M,EAAiBC,K,EAAgBC,Q,EAAiB;AAC5D,eAAK3G,aAAL,CAAmBC,UAAnB,CAA8BC,KAA9B,GAAsCuG,MAAtC;AACA,eAAKzG,aAAL,CAAmBC,UAAnB,CAA8BE,IAA9B,GAAqCuG,KAArC;AACA,eAAK1G,aAAL,CAAmBC,UAAnB,CAA8BG,QAA9B,GAAyCuG,QAAzC;AAEH;;;;;;;uBArCUtR,W,EAAW,+H,EAAA,uH,EAAA,gJ;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVmL,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;;;;;ACZxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaoG,oB;AAEX,oCAAoB/P,MAApB,EAAqC;AAAA;;AAAjB,aAAAA,MAAA,GAAAA,MAAA;AAAoB;;;;mCAEhC,CACP;;;kDAEsB;AACrB,eAAKA,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,eAAD,CAArB;AACD;;;;;;;uBATU6T,oB,EAAoB,uH;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA,yE;AAAA;AAAA;ACRjC;;AAA0B;AAAA,mBAAS,IAAAC,uBAAA,EAAT;AAAkC,WAAlC;;AAElB;;AACR;;AAGA;;;;;;;;;sEDEaD,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT9R,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;AEPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa8R,gB;AAEX,gCAAoBjQ,MAApB,EAAoC;AAAA;;AAAhB,aAAAA,MAAA,GAAAA,MAAA;AAAmB;;;;mCAE/B,CACP;;;kDAEyB;AACxB,eAAKA,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,gBAAD,CAArB;AACD;;;;;;;uBATU+T,gB,EAAgB,uH;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,c;AAAA,a;AAAA;AAAA;ACR7B;;;;;;;;;sEDQaA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACThS,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;AEN7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACWY;;AACI;;AACG;;AACH;;AACJ;;;;;;AAJyC;;;;;;AAMrC;;AACI;;AACI;;AACH;;AACL;;;;;;AAfV;;AACE;;AACI;;AACI;;AAAgB;;AAAa;;AACjC;;AACA;;AAKA;;AACI;;AAKJ;;AAEJ;;AACF;;;;;;AAhB0B;;AAAA;;AAEjB;;AAAA;;AAMM;;AAAA;;;;QDLR+R,a;AAKX,6BAAoBC,eAApB,EACoBhH,aADpB,EAEoBlJ,WAFpB,EAE6C;AAAA;;AAFzB,aAAAkQ,eAAA,GAAAA,eAAA;AACA,aAAAhH,aAAA,GAAAA,aAAA;AACA,aAAAlJ,WAAA,GAAAA,WAAA,CAAyB,CAGhC;AACA;AACD;AACA;AACC;AACA;;;;mCAEL;AACN,eAAKmQ,gBAAL;AACA,eAAKnQ,WAAL,CAAiBtB,aAAjB,CAA+B,QAA/B,EAAwC,MAAxC,EAA+C,EAA/C;AACD;;;2CAGe;AAAA;;AAEd,cAAIlD,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,cAAIQ,KAAK,GAAGP,MAAM,CAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlB;AAEA,eAAKwU,eAAL,CAAqB3T,IAArB,CAA0B,2DAASiK,OAAnC,EAA4C1K,SAA5C,CAAsD,UAAAsU,IAAI,EAAI;AAC5DA,gBAAI,GAAGA,IAAP;AAEA,mBAAI,CAACC,QAAL,GAAgB,IAAInR,KAAJ,EAAhB;AACEkR,gBAAI,CAACrL,OAAL,CAAa,UAAAC,OAAO,EAAI;AACtB,kBAAIxJ,KAAK,IAAIwJ,OAAO,CAAC7H,SAArB,EACI,OAAI,CAACkT,QAAL,CAAcpL,IAAd,CAAmBD,OAAnB;AACL,aAHD;AAIH,WARD;AASD;;;;;;;uBArCUiL,a,EAAa,gJ,EAAA,yJ,EAAA,mI;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,0a;AAAA;AAAA;ACd1B;;AACI;;AACI;;AACJ;;AACJ;;AAEA;;AACI;;AACE;;AAoBF;;AACF;;;;AArBwD;;AAAA;;;;;;;;;sEDM7CA,a,EAAa;cALzB,uDAKyB;eALf;AACTjS,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEb1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaoS,oB;AAEX,oCAAoBvQ,MAApB,EACmBmJ,aADnB,EACgD;AAAA;;AAD5B,aAAAnJ,MAAA,GAAAA,MAAA;AACD,aAAAmJ,aAAA,GAAAA,aAAA;AAGjB,aAAKA,aAAL,CAAmBC,UAAnB,GAAgC;AAC9BC,eAAK,EAAG,sBADsB;AAE9BC,cAAI,EAAG,YAFuB;AAG9BC,kBAAQ,EAAG;AAHmB,SAAhC;AAOD;;;;mCAEO,CACP;;;mDAEwB;AACzB,eAAKvJ,MAAL,CAAY9D,QAAZ,CAAqB,CAAC,iBAAD,CAArB;AACD;;;;;;;uBApBYqU,oB,EAAoB,uH,EAAA,yJ;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA;AAAA;ACVjC;;;;;;;;;sEDUaA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTtS,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEFjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaqS,oB;AAEX,oCACoBxQ,MADpB,EACqC;AAAA;;AAAjB,aAAAA,MAAA,GAAAA,MAAA;AAAoB;;;;mCAEhC,CACP;;;;;;;uBANUwQ,oB,EAAoB,uH;AAAA,K;;;YAApBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA;AAAA;AChBjC;;;;;;;;;sEDgBaA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTvS,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;AEhBjC;AAAA;;;AAAA;AAAA;AAAA;;AAAO,QAAMsS,WAAW,GAAG;AACzBC,gBAAU,EAAE,KADa;AAEzBjD,qBAAe,EAAE,IAFQ;AAGzBkD,YAAM,EAAG,uBAHgB;AAIzB9C,cAAQ,EAAG;AAJc,KAApB;;;;;;;;;;;;;;;;ACAP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAY6C,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBE,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIjR,OAAO,CAAC+F,KAAR,CAAckL,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { Aplicacao } from './../../../Negocio/Aplicacao';\nimport { Router } from '@angular/router';\n\nimport { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { UtilService } from 'src/app/services/util.service';\nimport { TipoUsuario, TipoUsuarioSistema } from 'src/app/models/usuarios/enumUsuarios';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { GrupoAgenda } from 'src/app/models/Agenda/modelGrupoAgenda';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\n\n@Component({\n  selector: 'app-agenda-create',\n  templateUrl: './agenda-create.component.html',\n  styleUrls: ['./agenda-create.component.css']\n})\nexport class AgendaCreateComponent implements OnInit {\n  \n  agenda : Agenda = {\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    Profissionalid: null,\n    Empresaid: null,\n    Unidadeid: null,\n    Salaid: null,\n    substituicao: false,\n    GrupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n  \n  comboProfissional  : Usuario[];\n  comboUnidade : Unidade[];\n  comboSala : Sala[];\n  comboTipoGrupoAgenda : GrupoAgenda[];\n  empresa : Empresa[];\n\n  constructor(private route : Router,\n    public dialogRef: MatDialogRef <AgendaCreateComponent>,          \n    private _serviceEmpresa : ServiceAllService<Empresa>,\n              private _serviceAgenda : ServiceAllService<Agenda>,\n              private _serviceUnidade : ServiceAllService<Unidade>,\n              private _serviceSala : ServiceAllService<Sala>,\n              private _serviceGrupoAgenda : ServiceAllService<GrupoAgenda>,\n              private _serviceUsuario : ServiceAllService<Usuario>,\n              private _utilService : UtilService\n    ) { }\n\n\n  ngOnInit(): void {\n     this.carregaCombos()\n  }\n  \n  createAgenda(){\n   let empId = localStorage.getItem(\"empId\");\n   this.agenda.Empresaid = Number(empId);\n \n\n    this._serviceAgenda.create(this.agenda, Endpoint.Agenda).subscribe(ag => {\n    this._utilService.showMessage(\"Agenda cadastrada com sucesso!\",false);\n    this.route.navigate(['home-component'])\n   });\n   this.route.navigate(['home-component'])\n  }\n\n  cancel(){\n    this.route.navigate(['home-component'])  \n  }\n\n  carregaCombos(){\n    //let filtroUsuario = (<HTMLSelectElement>document.getElementById('busca')).value;\n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n      \n      this.carregaComboEmpresa(grpId, empId );\n      this.carregaComboUnidade(grpId, empId);\n      this.carregaComboSala(grpId, empId);\n      this.carregaComboGrupoAgenda(grpId, empId);\n  }\n\n  carregaComboEmpresa(grpId: number , empId: string ){\n   \n    this._serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n    });\n\n    this._serviceUsuario.read(Endpoint.Usuario).subscribe(pro => {\n      pro = pro.filter(x => x.profissional)\n       \n    if (grpId == TipoUsuario.Administrador)\n        this.comboProfissional = pro; \n    else if (grpId == TipoUsuario.Master)  \n        this.comboProfissional = pro.filter(x => x.empresaid.toString() == empId);\n    });\n\n  }\n\n  carregaComboUnidade(grpId: number , empId: string){\n    this._serviceUnidade.read(Endpoint.Unidade).subscribe(un => {\n      un = un;\n    if (grpId == TipoUsuario.Administrador)\n      this.comboUnidade = un; \n    else if (grpId == TipoUsuario.Master)  \n      this.comboUnidade = un.filter(x => x.empresaid.toString() == empId);\n    });\n  }\n\n  carregaComboSala(grpId: number , empId: string){\n    this._serviceSala.read(Endpoint.Sala).subscribe(sl => {\n      sl = sl; \n    if (grpId == TipoUsuario.Administrador)\n      this.comboSala = sl; \n    else if (grpId == TipoUsuario.Master)  \n      this.comboSala = sl.filter(x => x.empresaid .toString() == empId);\n    });\n  }\n\n  carregaComboGrupoAgenda(grpId: number , empId: string){\n    this._serviceGrupoAgenda.read(Endpoint.GrupoAgenda).subscribe(ga => {\n      ga = ga;\n    \n    if (grpId == TipoUsuario.Administrador)\n      this.comboTipoGrupoAgenda = ga; \n    else if (grpId == TipoUsuario.Master)  \n      this.comboTipoGrupoAgenda = ga.filter(x => x.empresaid .toString() == empId);\n\n    });\n  }\n\n  fecharPopup(): void {\n    this.dialogRef.close();\n  }\n\n\n\n}\n","        <div class=\"container\">\r\n\r\n            <mat-card>\r\n                <mat-card-title>Nova Agenda</mat-card-title>\r\n                    <form>\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Nome Agenda\" \r\n                             [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Profissional\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.Profissionalid\" placeholder=\"Profissional\" >\r\n                                <mat-option *ngFor=\"let tipoProf of comboProfissional \" [value]=\"tipoProf.id\">\r\n                                    {{tipoProf.nome}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Unidade Atendimento\"> <i class=\"material-icons\">lock_open</i>\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.Unidadeid\" placeholder=\"Unidade Atendimento\" >\r\n                                <mat-option *ngFor=\"let tipounidade of comboUnidade \" [value]=\"tipounidade.id\">\r\n                                    {{tipounidade.nomeUnidade}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Sala Atendimento\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.Salaid\" placeholder=\"Sala Atendimento\" >\r\n                                <mat-option *ngFor=\"let tipoSala of comboSala \" [value]=\"tipoSala.id\">\r\n                                    {{tipoSala.nomeSala}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Substituição\">\r\n                                <input name=\"substituicao\" [(ngModel)]=\"agenda.substituicao\" [checked]=\"agenda.substituicao\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Grupo Agenda\">\r\n                            <p></p>\r\n                            <mat-select [(value)]=\"agenda.GrupoAgendaid\" placeholder=\"Grupo Agenda\" >\r\n                                <mat-option *ngFor=\"let tipoGrupo of comboTipoGrupoAgenda \" [value]=\"tipoGrupo.id\">\r\n                                    {{tipoGrupo.nomeGrupoAgenda}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Vigência Início\"\r\n                             [(ngModel)]=\"agenda.vigenciaInicio\" name=\"vigenciaInicio\" type=\"datetime-local\" teste >\r\n                        </mat-form-field>\r\n\r\n            \r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Vigência Fim\" \r\n                             [(ngModel)]=\"agenda.vigenciaFim\" name=\"vigenciaFim\" type=\"datetime-local\">\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"Considera Feriado\">\r\n                                <input name=\"considerarFeriado\" [(ngModel)]=\"agenda.considerarFeriado\" [checked]=\"agenda.considerarFeriado\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field>\r\n                            <input matInput placeholder=\"bloqueado\">\r\n                                <input name=\"bloqueado\" [(ngModel)]=\"agenda.bloqueado\" [checked]=\"agenda.bloqueado\" type=\"checkbox\">\r\n                        </mat-form-field>\r\n\r\n\r\n                    </form>\r\n            \r\n                    <button *ngIf=\"agenda.nomeAgenda && agenda.vigenciaInicio && agenda.vigenciaFim\"  mat-raised-button (click)=\"createAgenda()\" color=\"primary\" > \r\n                        Salvar\r\n                    </button>\r\n                    \r\n                    <button mat-raised-button (click)=\"fecharPopup()\" color=\"primary\" > \r\n                        Cancelar\r\n                    </button>\r\n            </mat-card>\r\n\r\n        </div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-agenda-delete',\n  templateUrl: './agenda-delete.component.html',\n  styleUrls: ['./agenda-delete.component.css']\n})\nexport class AgendaDeleteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>Exclusão de agenda</p>\n","import { Router } from '@angular/router';\nimport { Componentes } from './../../../Negocio/Componentes';\nimport { Aplicacao } from './../../../Negocio/Aplicacao';\nimport { UtilService } from './../../../services/util.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { AgendaDto } from 'src/app/models/Agenda/modelRetornoAgenda';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AgendaCreateComponent } from '../agenda-create/agenda-create.component';\nimport { Overlay } from '@angular/cdk/overlay';\n\n\n@Component({\n  selector: 'app-agenda-read',\n  templateUrl: './agenda-read.component.html',\n  styleUrls: ['./agenda-read.component.css']\n})\nexport class AgendaReadComponent implements OnInit {\n\n  Colunas = ['id','DtCriacao', 'NomeAgenda','Funcionario','NomeEmpresa','NomeUnidade','NomeSala',\n                      'substituicao','GrupoAgenda','vigenciaInicio','vigenciaFim','considerarFeriado','bloqueado','action']  \n  agenda : AgendaDto[];\n\n  constructor(\n              public dialog: MatDialog,\n              public overlay : Overlay,\n              private UtilService : UtilService,\n              private route : Router,\n              private _repAgenda : ServiceAllService<AgendaDto>\n             ) { }\n\n  ngOnInit(): void {\n    this.UtilService.AtualizarMenu(Aplicacao.Agenda,'app_registration','');\n    this.buscarAgenda();\n  }\n\n \n  buscarAgenda(){\n    let filtroAgenda = (<HTMLSelectElement>document.getElementById('busca')).value;\n\n    this._repAgenda.read(Endpoint.Agenda).subscribe(ag => {\n      this.agenda = filtroAgenda == null ? ag :  ag.filter(x => x.nomeAgenda.toLowerCase().includes(filtroAgenda.toLowerCase()))\n    \n    });\n\n  }\n\n  LimparAgenda(){\n    this.agenda = new Array();\n  }\n\n\n\n  addNovaAgenda(): void {\n   const scrollStrategy = this.overlay.scrollStrategies.reposition();\n   const dialogRef = this.dialog.open(AgendaCreateComponent, {\n     width : '700px',\n     height : '900px',\n     scrollStrategy\n\n     \n   });\n\n   dialogRef.afterClosed().subscribe(result => {\n     console.log(`Dialog result: ${result}`);\n   });\n  \n  }\n\n\n\n\n}\n","<mat-dialog-content>\n    <div class=\"mat-elevation-z3\">\n\n        \n        <button mat-button [matMenuTriggerFor]=\"menu\">Agenda</button>\n        <mat-menu #menu=\"matMenu\">\n        \n        <a routerLinkActive=\"agenda-create-active\" (click)=\"addNovaAgenda()\" mat-menu-item>Nova Agenda</a>\n\n        <a mat-menu-item>Grupo de Agenda</a>\n        <a mat-menu-item>Sala</a>\n        </mat-menu>\n        \n            <span class=\"botaoBusca\" (click)=\"buscarAgenda()\">\n              <i class=\"material-icons\">search</i>\n            </span>\n\n            <input class=\"textBusca\"  name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n\n          <table class=\"tabelaagenda\" mat-table [dataSource]=\"agenda\">\n            <!-- Id Column -->\n            \n            <ng-container matColumnDef=\"id\">\n              <th mat-header-cell *matHeaderCellDef>Id</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n            </ng-container>\n        \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"DtCriacao\">\n              <th mat-header-cell *matHeaderCellDef>Criado Em</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.dtCriacao | date: 'dd/MM/yyyy hh:mm:ss'}}</td>\n            </ng-container>\n            \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"NomeAgenda\">\n              <th mat-header-cell *matHeaderCellDef>Nome Agenda</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeAgenda}}</td>\n            </ng-container>\n      \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"Funcionario\">\n              <th mat-header-cell *matHeaderCellDef>Funcionário</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n            </ng-container>\n      \n            <!-- Name Price -->\n            <ng-container matColumnDef=\"NomeEmpresa\">\n              <th mat-header-cell *matHeaderCellDef>Empresa</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeFantasia}}</td>\n            </ng-container>\n      \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"NomeUnidade\">\n              <th mat-header-cell *matHeaderCellDef>Unidade</th>\n              <td mat-cell *matCellDef=\"let row\">{{row.nomeUnidade}}</td>\n            </ng-container>\n      \n            <ng-container matColumnDef=\"NomeSala\">\n                <th mat-header-cell *matHeaderCellDef>Sala</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.nomeSala}}</td>\n              </ng-container>\n    \n              <ng-container matColumnDef=\"GrupoAgenda\">\n                <th mat-header-cell *matHeaderCellDef>Grupo Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.nomeGrupoAgenda}}</td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"substituicao\">\n                <th mat-header-cell *matHeaderCellDef>Pode Substituir?</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.substituicao}}</td>\n              </ng-container>\n\n              \n              <ng-container matColumnDef=\"vigenciaInicio\">\n                <th mat-header-cell *matHeaderCellDef>Inicio Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.vigenciaInicio | date: 'dd/MM/yyyy hh:mm:ss'}} </td>\n              </ng-container>\n\n\n              <ng-container matColumnDef=\"vigenciaFim\">\n                <th mat-header-cell *matHeaderCellDef>Fim Agenda</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.vigenciaFim | date: 'dd/MM/yyyy hh:mm:ss'}}</td>\n              </ng-container>\n\n              \n              <ng-container matColumnDef=\"considerarFeriado\">\n                <th mat-header-cell *matHeaderCellDef>Cons. Feriado</th>\n                <td mat-cell *matCellDef=\"let row\">{{row.considerarFeriado}}</td>\n              </ng-container>\n\n            <!-- status -->\n            <ng-container matColumnDef=\"bloqueado\">\n              <th mat-header-cell *matHeaderCellDef>Ativa</th>\n                <td mat-cell *matCellDef=\"let row\">\n                  <div *ngIf=\"row.bloqueado == 'Sim'\" >\n                    <i class=\"material-icons\">\n                      lock\n                    </i>\n                  </div>\n                  <div *ngIf=\"row.bloqueado == 'Não'\" >\n                    <i class=\"material-icons\">  \n                      lock_open\n                    </i>\n                  </div>\n                </td>\n              </ng-container>\n      \n            \n            <!-- Coluna de Ações -->\n            <ng-container matColumnDef=\"action\">\n              <th mat-header-cell *matHeaderCellDef>Ações</th>\n              <td mat-cell *matCellDef=\"let row\">\n                  <a [routerLink]=\"['agenda-create']\" (click)=\"LimparAgenda()\" class=\"delete\">\n                    <i class=\"material-icons\">\n                      person_add\n                    </i>\n                  </a>\n                  <a routerLinkActive=\"agenda-update-active\" routerLink=\"agenda-update/{{ row.id }}\" (click)=\"LimparAgenda()\" class=\"edit\">\n                      <i class=\"material-icons\">\n                          edit\n                      </i>\n                  </a>\n                  <a routerLinkActive=\"agenda-delete-active\" routerLink=\"agenda-delete/{{ row.id }}\" (click)=\"LimparAgenda()\" class=\"delete\">\n                      <i class=\"material-icons\">\n                          delete\n                      </i>\n                  </a>\n                  \n              </td>\n            </ng-container>\n                \n        \n            <tr mat-header-row *matHeaderRowDef=\"Colunas\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: Colunas;\"></tr>\n          </table>\n\n      </div>\n\n      <div class=\"row\">\n        <router-outlet></router-outlet>\n      </div>\n</mat-dialog-content>\n  ","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { endWith, filter } from 'rxjs/operators';\nimport { Agenda } from 'src/app/models/Agenda/modelAgenda';\nimport { GrupoAgenda } from 'src/app/models/Agenda/modelGrupoAgenda';\nimport { Empresa } from 'src/app/models/empresa/ModelEmpresa';\nimport { Sala } from 'src/app/models/Sala/SalaModel';\nimport { Unidade } from 'src/app/models/Unidade/unidadeModel';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\nimport { Endpoint } from 'src/app/Negocio/Endpoint';\nimport { ServiceAllService } from 'src/app/services/service-all.service';\nimport { UtilService } from 'src/app/services/util.service';\n\n@Component({\n  selector: 'app-agenda-update',\n  templateUrl: './agenda-update.component.html',\n  styleUrls: ['./agenda-update.component.css']\n})\nexport class AgendaUpdateComponent implements OnInit {\n\n  constructor(\n            private router: Router,\n            private utilService : UtilService,\n            private route: ActivatedRoute,\n            private agendaService : ServiceAllService<Agenda>,\n            private serviceUnidade : ServiceAllService<Unidade>,\n            private serviceSala : ServiceAllService<Sala>,\n            private serviceGrupoAGenda : ServiceAllService<GrupoAgenda>,\n            private serviceEmpresa : ServiceAllService<Empresa>,\n            private serviceUsuario : ServiceAllService<Usuario>\n\n            ) { }\n\n  comboProfissional  : Usuario[];\n  comboUnidade : Unidade[];\n  comboSala : Sala[];\n  comboTipoGrupoAgenda : GrupoAgenda[];\n  empresa : Empresa[];\n\n\n\n  agenda : Agenda = {\n    DtCriacao: new Date, \n    nomeAgenda: null,\n    Profissionalid: null,\n    Empresaid: null,\n    Unidadeid: null,\n    Salaid: null,\n    substituicao: false,\n    GrupoAgendaid: null,\n    vigenciaInicio: null,\n    vigenciaFim: null,\n    considerarFeriado: false,\n    bloqueado: false\n  }\n\n  \n  \n  ngOnInit(): void {\n    this.buscarAgendaPorId();\n  \n  }\n\n      UpdateAgenda(){\n        this.agendaService.update(this.agenda, Endpoint.Agenda).subscribe(() => {\n          this.utilService.showMessage(\"Agenda Atualizada com Sucesso!\", false)\n          this.router.navigate(['agendaHomeDefault'])\n        });\n\n      }\n      cancel(){\n        this.router.navigate(['agendaHomeDefault'])\n      }\n\n\n\n      buscarAgendaPorId(){\n             \n        const id = this.route.snapshot.paramMap.get('id')\n            this.agendaService.readById(id, Endpoint.Agenda).subscribe(agId => {\n              this.agenda = agId\n              this.carregaCombos();\n            });\n      }\n\n      carregaCombos(){\n\n        let empId = Number(localStorage.getItem(\"empId\"))\n\n        this.serviceUsuario.read(Endpoint.Usuario).subscribe(pr => {\n          this.comboProfissional = pr.filter(x => x.profissional && Number(x.empresaid) == empId );\n        });\n\n        this.serviceUnidade.read(Endpoint.Unidade).subscribe(un => {\n          this.comboUnidade = un.filter(x => x.empresaid == empId );\n        });\n\n        this.serviceSala.read(Endpoint.Sala).subscribe(sl =>{\n          this.comboSala = sl.filter(x => x.empresaid == empId );\n        });\n        \n        this.serviceGrupoAGenda.read(Endpoint.GrupoAgenda).subscribe(ga => {\n          this.comboTipoGrupoAgenda = ga.filter(x => x.empresaid == empId );\n        });\n        \n        this.serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n          this.empresa = emp.filter(x => x.id == empId );\n        })\n      }\n\n}\n","<div class=\"container\">\n\n    <mat-card>\n        <mat-card-title>Atualizar Agenda</mat-card-title>\n            <form>\n                <mat-form-field>\n                    <input matInput placeholder=\"Nome Agenda\" \n                     [(ngModel)]=\"agenda.nomeAgenda\" name=\"nomeAgenda\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Profissional\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.Profissionalid\" placeholder=\"Profissional\" >\n                        <mat-option *ngFor=\"let tipoProf of comboProfissional \" [value]=\"tipoProf.id\">\n                            {{tipoProf.nome}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Unidade Atendimento\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.Unidadeid\" placeholder=\"Unidade Atendimento\" >\n                        <mat-option *ngFor=\"let tipounidade of comboUnidade \" [value]=\"tipounidade.id\">\n                            {{tipounidade.nomeUnidade}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Sala Atendimento\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.Salaid\" placeholder=\"Sala Atendimento\" >\n                        <mat-option *ngFor=\"let tipoSala of comboSala \" [value]=\"tipoSala.id\">\n                            {{tipoSala.nomeSala}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Substituição\">\n                        <input name=\"substituicao\" [(ngModel)]=\"agenda.substituicao\" [checked]=\"agenda.substituicao\" type=\"checkbox\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Grupo Agenda\">\n                    <p></p>\n                    <mat-select [(value)]=\"agenda.GrupoAgendaid\" placeholder=\"Grupo Agenda\" >\n                        <mat-option *ngFor=\"let tipoGrupo of comboTipoGrupoAgenda \" [value]=\"tipoGrupo.id\">\n                            {{tipoGrupo.nomeGrupoAgenda}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Vigência Início\"\n                     [(ngModel)]= \"agenda.vigenciaInicio\" name=\"vigenciaInicio\" type=\"datetime-local\" teste >\n                </mat-form-field>\n\n    \n                <mat-form-field>\n                    <input matInput placeholder=\"Vigência Fim\" \n                     [(ngModel)]=\"agenda.vigenciaFim\" name=\"vigenciaFim\" type=\"datetime-local\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"Considera Feriado\">\n                        <input name=\"considerarFeriado\" [(ngModel)]=\"agenda.considerarFeriado\" [checked]=\"agenda.considerarFeriado\" type=\"checkbox\">\n                </mat-form-field>\n\n\n                <mat-form-field>\n                    <input matInput placeholder=\"bloqueado\">\n                        <input name=\"bloqueado\" [(ngModel)]=\"agenda.bloqueado\" [checked]=\"agenda.bloqueado\" type=\"checkbox\">\n                </mat-form-field>\n\n\n            </form>\n    \n            <button *ngIf=\"agenda.nomeAgenda && agenda.vigenciaInicio && agenda.vigenciaFim\"  mat-raised-button (click)=\"UpdateAgenda()\"  color=\"primary\" > \n                Salvar\n            </button>\n            \n            <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n                Cancelar\n            </button>\n    </mat-card>\n\n</div>","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home-agenda',\n  templateUrl: './home-agenda.component.html',\n  styleUrls: ['./home-agenda.component.css']\n})\nexport class HomeAgendaComponent implements OnInit {\n\n  constructor(private route : Router) { }\n\n  ngOnInit(): void {\n    this.route.navigate(['Agenda'])\n  }\n}\n","<app-agenda-read></app-agenda-read>","export enum Aplicacao{\r\n  Agenda = 'Agenda',\r\n  Cartões = 'Cartões',\r\n  Vendas = 'Vendas',\r\n  Octoplex = 'Octoplex'\r\n  \r\n}\r\n\r\nexport const TipoAplicacao = new Map<string, string>([\r\n  ['Agenda', 'Agenda'],\r\n  ['Cartões', 'Cartões'],\r\n  ['FrenteCaixa', 'FrenteCaixa'],\r\n  ['Octoplex', 'Octoplex'],\r\n])","export enum Endpoint {\r\n    Empresa = '/Empresa',\r\n    GrupoUsuario = '/GrupoUsuario',\r\n    Produto = '/Produto',\r\n    Usuario = '/Usuario',\r\n    Agenda = '/Agenda',\r\n    Unidade = '/Unidade',\r\n    Sala = '/Sala',\r\n    GrupoAgenda = '/GrupoAgenda',\r\n    Token = '/Token'\r\n\r\n}","import { HomeAgendaComponent } from './Aplicacoes/agenda/home-agenda/home-agenda.component';\nimport { AgendaReadComponent } from './Aplicacoes/agenda/agenda-read/agenda-read.component';\nimport { AgendaDeleteComponent } from './Aplicacoes/agenda/agenda-delete/agenda-delete.component';\nimport { AgendaUpdateComponent } from './Aplicacoes/agenda/agenda-update/agenda-update.component';\nimport { AgendaCreateComponent } from './Aplicacoes/agenda/agenda-create/agenda-create.component';\n\nimport { Aplicacao } from './Negocio/Aplicacao';\nimport { EmpresaDeleteComponent } from './components/empresa/empresa-delete/empresa-delete.component';\nimport { EmpresaUpdateComponent } from './components/empresa/empresa-update/empresa-update.component';\nimport { EmpresaCreateComponent } from './components/empresa/empresa-create/empresa-create.component';\nimport { EmpresaComponent } from './views/empresa/empresa.component';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from \"./views/home/home.component\";\nimport { ProductCrudComponent } from \"./views/product-crud/product-crud.component\";\nimport { UsuarioCrudComponent } from './views/usuario-crud/usuario-crud.component';\n\nimport { ProductCreateComponent } from './components/product/product-create/product-create.component';\nimport { ProductUpdateComponent } from './components/product/product-update/product-update.component';\nimport { ProductDeleteComponent } from './components/product/product-delete/product-delete.component';\n\nimport { UsuarioCreateComponent } from './components/usuario/usuario-create/usuario-create.component';\nimport { UsuarioUpdateComponent } from './components/usuario/usuario-update/usuario-update.component';\nimport { UsuarioDeleteComponent } from './components/usuario/usuario-delete/usuario-delete.component';\n\nimport { ChamadoCrudComponent } from './views/chamado-crud/chamado-crud.component';\nimport { ChamadoCreateComponent } from './components/chamados/chamado-create/chamado-create.component';\nimport { ChamadoUpdateComponent } from './components/chamados/chamado-update/chamado-update.component';\nimport { ChamadoDeleteComponent } from './components/chamados/chamado-delete/chamado-delete.component';\n\n\n//Rotas de componentes Negócio\n\nconst routes: Routes = [\n  {path : \"\", component:HomeComponent },\n  {path: \"login\", component: LoginComponent },\n  //Rotas de Produtos\n  {path: \"products\", component: ProductCrudComponent },\n  {path: \"products/create\", component : ProductCreateComponent },\n  {path: \"products/update/:id\", component : ProductUpdateComponent },\n  {path: \"products/delete/:id\", component : ProductDeleteComponent },\n\n  //Rotas de usuarios\n  {path: \"usuarios\", component : UsuarioCrudComponent },\n  {path: \"usuarios/create\", component : UsuarioCreateComponent },\n  {path: \"usuarios/update/:id\", component : UsuarioUpdateComponent },\n  {path: \"usuarios/delete/:id\", component : UsuarioDeleteComponent },\n\n  //Rotas de chamados\n  {path: \"chamados\", component : ChamadoCrudComponent },\n  {path: \"chamados/create\", component : ChamadoCreateComponent },\n  {path: \"chamados/update/:id\", component : ChamadoUpdateComponent },\n  {path: \"chamados/delete/:id\", component : ChamadoDeleteComponent },\n\n  //Rotas de empresa\n  {path: \"empresa\", component : EmpresaComponent },\n  {path: \"empresa/create\", component : EmpresaCreateComponent },\n  {path: \"empresa/update/:id\", component : EmpresaUpdateComponent },\n  {path: \"empresa/delete/:id\", component : EmpresaDeleteComponent },\n\n  //Rotas das APlicações\n  //Agenda\n  {path: 'home-component' , component : HomeAgendaComponent},\n  {path: Aplicacao.Agenda , component : HomeAgendaComponent,\n    children:[\n      {path: 'agendaHomeDefault', redirectTo: Aplicacao.Agenda, pathMatch: 'full'},\n      {path: 'agenda-home', component : HomeAgendaComponent},\n      {path: 'agenda-create', component : AgendaCreateComponent},\n      {path: 'agenda-delete/:id', component : AgendaDeleteComponent },\n      {path: 'agenda-update/:id', component : AgendaUpdateComponent},\n    ]},\n  \n      \n]\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","//import { LoginService } from '../app/'\nimport { Component } from '@angular/core';\nimport { LoginService } from './services/login.service';\n\n\n\n@Component({\n  selector: 'app-root',\ntemplateUrl: 'app.conponent.html'\n})\nexport class AppComponent {\n  nome = 'Palm';\n\nmostrarMenu : boolean = false; \nmostrarlogin : boolean = true; \n\nconstructor(private authService : LoginService){\n\n}\n\nngOnInit(){\n    this.authService.mostrarMenuEmitter.subscribe(\n        mostrar => this.mostrarMenu = mostrar\n    );\n\n    this.authService.mostrarLoginEmitter.subscribe(\n        mostrarLogin => this.mostrarlogin = mostrarLogin\n    );\n}\n\n}\n\n\n\n","<app-login *ngIf=\"mostrarlogin\"></app-login>\r\n<app-header *ngIf=\"mostrarMenu\"></app-header>\r\n<app-nav *ngIf=\"mostrarMenu\"></app-nav>\r\n<app-footer *ngIf=\"mostrarMenu\"></app-footer>\r\n\r\n\r\n","import { LoginService } from './services/login.service';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, LOCALE_ID } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './components/template/header/header.component';\nimport { FooterComponent } from './components/template/footer/footer.component';\nimport { NavComponent } from './components/template/nav/nav.component';\n\nimport { HomeComponent } from './views/home/home.component';\nimport { ProductCrudComponent } from './views/product-crud/product-crud.component';\nimport { UsuarioCrudComponent } from './views/usuario-crud/usuario-crud.component';\n\nimport { ProductCreateComponent } from './components/product/product-create/product-create.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport localePt from '@angular/common/locales/pt';\nimport { registerLocaleData } from  '@angular/common';\nimport { LoginComponent } from './components/login/login.component';\n\n\n\n\nregisterLocaleData(localePt);\n\n//Modulos Material\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n import {MatDialogModule} from '@angular/material/dialog';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDividerModule} from '@angular/material/divider';\n\nimport { ProductReadComponent } from './components/product/product-read/product-read.component';\nimport { ProductReadTableprodutosComponent } from './components/product/product-read-tableprodutos/product-read-tableprodutos.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ProductUpdateComponent } from './components/product/product-update/product-update.component';\nimport { ProductDeleteComponent } from './components/product/product-delete/product-delete.component';\nimport { RedDirective } from './diretivas/red.directive';\nimport { UsuarioComponent } from './components/usuario/usuario.component';\nimport { UsuarioReadComponent } from './components/usuario/usuario-read/usuario-read.component';\nimport { UsuarioCreateComponent } from './components/usuario/usuario-create/usuario-create.component';\nimport { UsuarioDeleteComponent } from './components/usuario/usuario-delete/usuario-delete.component';\nimport { UsuarioUpdateComponent } from './components/usuario/usuario-update/usuario-update.component';\nimport { ChamadoCrudComponent } from './views/chamado-crud/chamado-crud.component';\nimport { ChamadoCreateComponent } from './components/chamados/chamado-create/chamado-create.component';\nimport { ChamadoUpdateComponent } from './components/chamados/chamado-update/chamado-update.component';\nimport { ChamadoDeleteComponent } from './components/chamados/chamado-delete/chamado-delete.component';\nimport { ChamadoReadComponent } from './components/chamados/chamado-read/chamado-read.component';\nimport { EmpresaComponent } from './views/empresa/empresa.component';\nimport { EmpresaCreateComponent } from './components/empresa/empresa-create/empresa-create.component';\nimport { EmpresaUpdateComponent } from './components/empresa/empresa-update/empresa-update.component';\nimport { EmpresaDeleteComponent } from './components/empresa/empresa-delete/empresa-delete.component';\nimport { EmpresaReadComponent } from './components/empresa/empresa-read/empresa-read.component';\nimport { AgendaUpdateComponent } from './Aplicacoes/agenda/agenda-update/agenda-update.component';\nimport { AgendaDeleteComponent } from './Aplicacoes/agenda/agenda-delete/agenda-delete.component';\nimport { AgendaCreateComponent } from './Aplicacoes/agenda/agenda-create/agenda-create.component';\nimport { AgendaReadComponent } from './Aplicacoes/agenda/agenda-read/agenda-read.component';\nimport { HomeAgendaComponent } from './Aplicacoes/agenda/home-agenda/home-agenda.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    FooterComponent,\n    NavComponent,\n    HomeComponent,\n    ProductCrudComponent,\n    ProductCreateComponent,\n    ProductReadComponent,\n    ProductReadTableprodutosComponent,\n    ProductUpdateComponent,\n    ProductDeleteComponent,\n    LoginComponent,\n    RedDirective,\n    UsuarioCrudComponent,\n    UsuarioComponent,\n    UsuarioReadComponent,\n    UsuarioCreateComponent,\n    UsuarioDeleteComponent,\n    UsuarioUpdateComponent,\n    ChamadoCrudComponent,\n    ChamadoCreateComponent,\n    ChamadoUpdateComponent,\n    ChamadoDeleteComponent,\n    ChamadoReadComponent,\n    EmpresaComponent,\n    EmpresaCreateComponent,\n    EmpresaUpdateComponent,\n    EmpresaDeleteComponent,\n    EmpresaReadComponent,\n    AgendaUpdateComponent,\n    AgendaDeleteComponent,\n    AgendaCreateComponent,\n    AgendaReadComponent,\n    HomeAgendaComponent,\n  \n    \n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    HttpClientModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatMenuModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatDividerModule,\n  ],\n  providers: \n  [\n    {\n    provide : LOCALE_ID,\n    useValue : 'pt-BR',\n    },\n  [LoginService],\n ],\n  \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-create',\n  templateUrl: './chamado-create.component.html',\n  styleUrls: ['./chamado-create.component.css']\n})\nexport class ChamadoCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-create works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-delete',\n  templateUrl: './chamado-delete.component.html',\n  styleUrls: ['./chamado-delete.component.css']\n})\nexport class ChamadoDeleteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-delete works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-read',\n  templateUrl: './chamado-read.component.html',\n  styleUrls: ['./chamado-read.component.css']\n})\nexport class ChamadoReadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-read works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-update',\n  templateUrl: './chamado-update.component.html',\n  styleUrls: ['./chamado-update.component.css']\n})\nexport class ChamadoUpdateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chamado-update works!</p>\n","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Router } from '@angular/router';\nimport { UtilService } from './../../../services/util.service';\nimport { Contato } from './../../../models/contato/modelContato';\nimport { ContatoService } from './../../../services/contato.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { cnpj } from 'cpf-cnpj-validator';\n\n@Component({\n  selector: 'app-empresa-create',\n  templateUrl: './empresa-create.component.html',\n  styleUrls: ['./empresa-create.component.css']\n})\nexport class EmpresaCreateComponent implements OnInit {\n\n \nempresa : Empresa = {\n    dtCriacao : null,\n    cnpj: null,\n    razaoSocial: null,\n    nomeFantasia: null,\n    inscricaoEstadual: null,\n    inscricaoMunicipal: null,\n    cnes : null,\n    codPIS : null,\n    observacao : null,\n    codCnae : null,\n    empresaPai : null,\n    criadoPor : null,\n    bloqueado : null\n    \n}\n\n\n\n  constructor(private utilService : UtilService,\n              private router : Router,\n              private servicoEmpresa : ServiceAllService<Empresa>\n\n\n              )\n             { }\n\n  ngOnInit(): void {\n   \n  }\n\n  cadastrarEmpresa(){\n    \n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n    let empPai = Number(localStorage.getItem(\"empId\"));\n    this.empresa.criadoPor  = Number(localStorage.getItem(\"usId\"));\n    this.empresa.dtCriacao = new Date;\n    this.empresa.empresaPai = empPai;\n       \n    this.empresa.bloqueado = false;\n    \n    if(grpId == TipoUsuario.Usuario)\n    {\n      this.utilService.showMessage(\"Você não possui permissão para cadastro de empresas\", false)\n\n    }else\n    {\n     if(cnpj.isValid(this.empresa.cnpj)){\n       this.servicoEmpresa.read(Endpoint.Empresa).subscribe(bemp => {\n          bemp = bemp;\n         let retornoEmp = bemp.filter(x => x.cnpj == this.empresa.cnpj)\n         let retornomaster = bemp.filter(x => x.id == empPai);\n\n          if (retornoEmp.length == 0 ){\n            \n            if(grpId == TipoUsuario.Administrador){\n\n                this.servicoEmpresa.create(this.empresa, Endpoint.Empresa).subscribe(emp => {\n                  emp = emp;\n                        \n                  let empresaPai = emp.id;\n                         \n                              emp.empresaPai = empresaPai;\n                              this.servicoEmpresa.update(emp,Endpoint.Empresa).subscribe(() => {})\n                         \n                          this.utilService.showMessage(\"Empresa cadastrada com sucesso!\",false);\n                          this.router.navigate(['empresa']);\n                        })\n                }else if (grpId == TipoUsuario.Master && retornomaster.filter(x => x.empresaPai == empPai).length > 0)\n                {\n                  \n                  this.servicoEmpresa.create(this.empresa, Endpoint.Empresa).subscribe(emp => {\n                    emp = emp;\n                          \n                    let empresaPai = emp.id;\n                          \n                              emp.bloqueado = true;\n                              emp.empresaPai = Number(localStorage.getItem(\"empId\"));\n                              this.servicoEmpresa.update(emp,Endpoint.Empresa).subscribe(() => {})\n                       \n                            this.utilService.showMessage(\"Empresa cadastrada com sucesso!\",false);\n                            this.router.navigate(['empresa']);\n                          })\n                }else{\n                  this.utilService.showMessage(\"Para criação de uma empresa precisa está logado com a Matriz.!\",false);\n                }\n          }\n          else\n           this.utilService.showMessage(\"Cnpj já cadastrado!\",false);\n        });  \n      }\n      else{\n        this.utilService.showMessage(\"Cnpj inválido\",false);\n      }\n    }\n  }\n\n  cancel(){\n    this.router.navigate(['empresa'])\n  }\n\n}\n","<mat-tab-group>\n    <mat-tab label=\"Empresa\">\n        <section>\n\n        <div class=\"container\">\n\n            <mat-card>\n                <mat-card-title>Nova Empresa</mat-card-title>\n                    <form>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cnpj\" \n                             [(ngModel)]=\"empresa.cnpj\" name=\"cnpj\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Nome\"\n                            [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Razão Social\"\n                            [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Inscrição Estadual\"\n                            [(ngModel)]=\"empresa.inscricaoEstadual\" name=\"inscricaoEstadual\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Inscrição Municipal\"\n                            [(ngModel)]=\"empresa.inscricaoMunicipal\" name=\"inscricaoMunicipal\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"CNES\"\n                            [(ngModel)]=\"empresa.cnes\" name=\"cnes\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cod. PIS\"\n                            [(ngModel)]=\"empresa.codPIS\" name=\"codPIS\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Cod. CNAE\"\n                            [(ngModel)]=\"empresa.codCnae\" name=\"codCnae\">\n                        </mat-form-field>\n                        <mat-form-field>\n                            <input matInput placeholder=\"Observação\"\n                            [(ngModel)]=\"empresa.observacao\" name=\"observacao\">\n                        </mat-form-field>\n            \n                    </form>\n            \n                    <button *ngIf=\"empresa.cnpj && empresa.nomeFantasia && empresa.razaoSocial\"  mat-raised-button (click)=\"cadastrarEmpresa()\" color=\"primary\" > \n                        Salvar\n                    </button>\n                    \n                    <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n                        Cancelar\n                    </button>\n            </mat-card>\n\n        </div>\n\n        </section>\n</mat-tab>\n<mat-tab label=\"Contato\"> Contatos</mat-tab>\n<mat-tab label=\"Endereços\">Endereços </mat-tab>\n</mat-tab-group>","import { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { CanActivate, Router, ActivatedRoute } from '@angular/router';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\n\n@Component({\n  selector: 'app-empresa-delete',\n  templateUrl: './empresa-delete.component.html',\n  styleUrls: ['./empresa-delete.component.css']\n})\nexport class EmpresaDeleteComponent implements OnInit {\n\n\n  empresa : Empresa\n  constructor(private serviceEmpresa : ServiceAllService<Empresa>,\n              private serviceUsuario : ServiceAllService<Usuario>,\n              private router : Router,\n              private route : ActivatedRoute,\n              private mensagem : UtilService\n\n            ) { }\n\n  ngOnInit(): void {\n    this.BuscarEmpresa();\n  }\n\n\n  excluirEmpresa(){\n    \n    let existeUsuario = null;\n    \n    this.serviceUsuario.read(Endpoint.Usuario).subscribe(usr => {\n        usr = usr;\n        existeUsuario = usr.filter(x => x.empresaid == this.empresa.id.toString())\n       \n        if (existeUsuario.length > 0)\n        {\n          this.mensagem.showMessage(\"Empresa não pode ser excluida porque possui Dependências de usuários.\", false)\n        }    \n        else{\n            let grpId = Number(localStorage.getItem(\"grpUs\"));\n          \n            if (grpId == TipoUsuario.Administrador){\n        \n              this.serviceEmpresa.delete(this.empresa.id, Endpoint.Empresa).subscribe(()=>{\n                this.mensagem.showMessage(\"Empresa excluida com sucesso !\", false);\n                this.router.navigate(['/empresa'])\n              })\n            }\n              else{\n                this.mensagem.showMessage(\"Permissão de exclusão negada !\", false);\n                this.router.navigate(['/empresa'])\n              }\n        }\n    });\n  }\n\n  cancel(){\n    this.router.navigate(['/empresa'])\n  }\n\n   BuscarEmpresa(){\n    const id = this.route.snapshot.paramMap.get('id');\n    \n    this.serviceEmpresa.readById(id, Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n\n    })\n\n   }\n\n\n}\n","<mat-card>\n    <mat-card-title>Excluir Empresa</mat-card-title>\n        <form>\n                       \n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\"\n                [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\">\n            </mat-form-field>\n           \n            <mat-form-field>\n                <input matInput placeholder=\"Nome Fantasia\"\n                [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\">\n            </mat-form-field>\n           \n           \n            <mat-form-field>\n                <input matInput placeholder=\"Cnpj\" \n                 [(ngModel)]=\"empresa.cnpj\" name=\"cnpj\">\n\n            </mat-form-field>\n            \n        </form>\n\n        <button mat-raised-button (click)=\"excluirEmpresa()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\r\nimport { Endpoint } from './../../../Negocio/Endpoint';\r\nimport { Router } from '@angular/router';\r\nimport { ServiceAllService } from './../../../services/service-all.service';\r\nimport { Endereco } from './../../../models/endereco/modelEndereco';\r\nimport { Contato } from './../../../models/contato/modelContato';\r\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { elementAt } from 'rxjs/operators';\r\nimport { TipoUsuarioSistema } from 'src/app/models/usuarios/enumUsuarios';\r\n\r\n@Component({\r\n  selector: 'app-empresa-read',\r\n  templateUrl: './empresa-read.component.html',\r\n  styleUrls: ['./empresa-read.component.css']\r\n})\r\nexport class EmpresaReadComponent implements OnInit {\r\n\r\n  \r\n  empresa: Empresa[];\r\n  empresas: Empresa[];\r\n  contato : Contato;\r\n  endereco : Endereco;\r\n  displayedColumns = ['id','cnpj', 'razaoSocial','nomeFantasia','inscricaoEstadual','inscricaoMunicipal','bloqueado','action']  \r\n\r\n  constructor(private router : Router,\r\n              private serviceEmpresa : ServiceAllService<Empresa>\r\n             ) { }\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.buscarEmpresa();\r\n\r\n  }\r\n\r\n  buscarEmpresa(): void \r\n  {\r\n    let filtroEmpresa = (<HTMLSelectElement>document.getElementById('busca')).value;\r\n    let empId = localStorage.getItem(\"empId\");\r\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\r\n\r\n    this.serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\r\n      emp = emp;\r\n\r\n      \r\n      this.empresa =  new Array();\r\n\r\n          if(grpId == TipoUsuario.Administrador)\r\n          {\r\n            emp.forEach(element => {\r\n            this.empresa.push(element)\r\n             });\r\n          }\r\n          else if(grpId == TipoUsuario.Master)\r\n          {\r\n            emp.forEach(master => {\r\n              if(master.empresaPai.toString()== empId) \r\n              this.empresa.push(master)\r\n            });\r\n\r\n          }\r\n\r\n      let empresaFIltrada = new Array();\r\n      if (filtroEmpresa){\r\n           \r\n        for (let index = 0; index < this.empresa.length; index++) {\r\n          const element = this.empresa[index];\r\n            if (element.nomeFantasia.toLowerCase().includes(filtroEmpresa.toLowerCase()))\r\n            empresaFIltrada.push(element);\r\n        }\r\n        this.empresa = new Array();\r\n        this.empresa = empresaFIltrada;    \r\n      }else{\r\n        this.empresa = this.empresa;\r\n      }\r\n\r\n\r\n    })\r\n  }\r\n\r\n  navigateToEmpresaCreate() : void {\r\n    this.router.navigate(['empresa/create'])\r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\n      \r\n\r\n\r\n\r\n\r\n","<div>\n  <input class=\"search\" name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n   \n   <span (click)=\"buscarEmpresa()\">\n     <i class=\"material-icons\">search</i>\n   </span>\n</div>\n\n<div class=\"mat-elevation-z4\">\n    <table mat-table [dataSource]=\"empresa\">\n      <!-- Id Column -->\n      \n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n  \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"cnpj\">\n        <th mat-header-cell *matHeaderCellDef>Cnpj</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.cnpj}}</td>\n      </ng-container>\n      \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"razaoSocial\">\n        <th mat-header-cell *matHeaderCellDef>Razão Social</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.razaoSocial}}</td>\n      </ng-container>\n\n       <!-- Name Column -->\n       <ng-container matColumnDef=\"nomeFantasia\">\n        <th mat-header-cell *matHeaderCellDef>Nome Fantasia</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nomeFantasia}}</td>\n      </ng-container>\n\n      <!-- Name Price -->\n      <ng-container matColumnDef=\"inscricaoEstadual\">\n        <th mat-header-cell *matHeaderCellDef>Ins. Estadual</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.inscricaoEstadual}}</td>\n      </ng-container>\n\n       <!-- Name Column -->\n       <ng-container matColumnDef=\"inscricaoMunicipal\">\n        <th mat-header-cell *matHeaderCellDef>Ins. Municipal</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.inscricaoMunicipal}}</td>\n      </ng-container>\n\n      <!-- status -->\n      <ng-container matColumnDef=\"bloqueado\">\n        <th mat-header-cell *matHeaderCellDef>Bloqueado</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div *ngIf=\"row.bloqueado\" >\n              <i class=\"material-icons\">\n                lock\n              </i>\n            </div>\n            <div *ngIf=\"!row.bloqueado\" >\n              <i class=\"material-icons\">  \n                lock_open\n              </i>\n            </div>\n          </td>\n        </ng-container>\n\n       \n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n\n            <a routerLink=\"/empresa/update/{{ row.id }}\" class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            <a routerLink=\"/empresa/delete/{{ row.id }}\" class=\"delete\">\n                <i class=\"material-icons\">\n                    delete\n                </i>\n            </a>\n            \n\n        </td>\n      </ng-container>\n          \n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n</div>\n\n<div class=\"footer\">\n  <span (click)=\"navigateToEmpresaCreate()\">\n    <i class=\"material-icons\">person_add</i>\n  </span>\n</div>\n\n","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { UtilService } from './../../../services/util.service';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Component, OnInit } from '@angular/core';\nimport { cnpj } from 'cpf-cnpj-validator';\n\n@Component({\n  selector: 'app-empresa-update',\n  templateUrl: './empresa-update.component.html',\n  styleUrls: ['./empresa-update.component.css']\n})\nexport class EmpresaUpdateComponent implements OnInit {\n\n  empresa : Empresa;\n  usuariologado : boolean;\n  constructor(private router : Router,\n              private route: ActivatedRoute,\n              private empresaService : ServiceAllService<Empresa>,\n              private mensagem : UtilService\n              ) { }\n\n  ngOnInit(): void {\n  \n  if (Number(localStorage.getItem(\"grpUs\")) == TipoUsuario.Administrador)\n     this.usuariologado = true;\n  \n  this.ObterEmpresa();\n  \n  }\n\n\n  atualizarEmpresa() : void {\n    \n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n    if(grpId == TipoUsuario.Usuario)\n    {\n      this.mensagem.showMessage(\"Você não possui permissão para editar o cadastro de empresas\", false)\n\n    }else\n    {\n     if (cnpj.isValid(this.empresa.cnpj)){\n               try {\n                        this.empresaService.update(this.empresa, Endpoint.Empresa).subscribe(()=>{\n                        this.mensagem.showMessage(\"Empresa atualizada com sucesso\", false)\n                        this.router.navigate(['/empresa'])\n                      });\n\n                    } catch (error) {\n                      this.mensagem.showMessage(\"Erro na atualização dos dados \" + error, true);\n                    }\n\n      }else{\n        this.mensagem.showMessage(\"Cnpj Inválido \" , false);\n      }\n      }\n  }\n\n  cancel(){\n    this.router.navigate(['/empresa'])\n  }\n\n  \n  ObterEmpresa() {\n    const id = this.route.snapshot.paramMap.get('id')\n    this.empresaService.readById(id, Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n    })    \n       \n  }\n  \n\n}\n\n\n","<mat-card>\n    <mat-card-title>Atualizar dados da Empresa</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Cnpj\" \n                 [(ngModel)]=\"empresa.cnpj\" disabled=\"true\" name=\"cnpj\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\"\n                [(ngModel)]=\"empresa.nomeFantasia\" name=\"nomeFantasia\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Razão Social\"\n                [(ngModel)]=\"empresa.razaoSocial\" name=\"razaoSocial\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Inscrição Estadual\"\n                [(ngModel)]=\"empresa.inscricaoEstadual\" name=\"inscricaoEstadual\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Inscrição Municipal\"\n                [(ngModel)]=\"empresa.inscricaoMunicipal\" name=\"inscricaoMunicipal\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"CNES\"\n                [(ngModel)]=\"empresa.cnes\" name=\"cnes\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Cod. PIS\"\n                [(ngModel)]=\"empresa.codPIS\" name=\"codPIS\">\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Cod. CNAE\"\n                [(ngModel)]=\"empresa.codCnae\" name=\"codCnae\">\n            </mat-form-field>\n            \n            <div *ngIf=\"usuariologado\">\n                <mat-form-field >\n                            <input matInput placeholder=\"Bloqueado\">\n                                        <input name=\"status\" [(ngModel)]=\"empresa.bloqueado\" [checked]=\"empresa.bloqueado\" type=\"checkbox\">\n                </mat-form-field>\n            </div>\n          \n            <mat-form-field>\n    \n                <input matInput placeholder=\"Observação\"\n                [(ngModel)]=\"empresa.observacao\" name=\"observacao\">\n            </mat-form-field>\n\n        </form>\n\n        <button *ngIf=\"empresa.cnpj && empresa.nomeFantasia && empresa.razaoSocial\"  mat-raised-button (click)=\"atualizarEmpresa()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>","import { Endpoint } from './../../Negocio/Endpoint';\nimport { Empresa } from './../../models/empresa/ModelEmpresa';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { Acesso } from '../../models/acessoModel';\nimport { UtilService } from './../../services/util.service';\nimport { LoginService } from './../../services/login.service';\n\nimport { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\nacesso : Acesso = new Acesso();\n\n\n\nconstructor(private router :Router,\n             private authservice : LoginService,\n             ) { }\n\n  ngOnInit(): void {\n  \n  }\n  \n  logarSistema(keyEvent : any){\n\n    if (keyEvent.which === 13 || keyEvent.which == 1)\n      this.authservice.logarSistema(this.acesso);\n\n  }\n  \n}\n","<mat-card >\n    <mat-card-title><i class=\"material-icons\">account_box</i></mat-card-title>\n        <form>\n            <mat-form-field > \n                <input matInput placeholder=\"Chave Empresa\" \n                 [(ngModel)]=\"acesso.nome\" name=\"name\" placeholder=\"Empresa\">\n                 \n            </mat-form-field>\n\n            <mat-form-field > \n                <input matInput placeholder=\"login\" \n                 [(ngModel)]=\"acesso.login\" name=\"name\" placeholder=\"login\">\n                 \n            </mat-form-field>\n           \n            <mat-form-field >\n                <input matInput placeholder=\"senha\"\n                [(ngModel)]=\"acesso.senha\" type=\"password\" name=\"senha\" (keypress)=\"logarSistema($event)\">\n                \n            </mat-form-field>\n        </form>\n        \n            <div *ngIf=\"acesso.login && acesso.senha && acesso.nome\">\n                <button mat-raised-button (click)=\"logarSistema($event)\"  color=\"primary\"> \n                    Login\n                </button> \n            </div>\n          \n   \n       \n        \n\n</mat-card>        \n","import { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Aplicacao, TipoAplicacao } from './../../../Negocio/Aplicacao';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { Token } from '@angular/compiler/src/ml_parser/lexer';\nimport { stringify } from 'querystring';\nimport { UtilService } from './../../../services/util.service';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-product-create',\n  templateUrl: './product-create.component.html',\n  styleUrls: ['./product-create.component.css']\n})\nexport class ProductCreateComponent implements OnInit {\n\n  comboProduto =  [];\n  empresa : Empresa[];\n  comboEmpresa : Empresa;\n\n    product : Product = {  \n    dtCriacao : null,\n    criadoPor : null,\n    nome : null,\n    valor : 0,\n    empresaid : null,\n    bloqueado : false,\n    }\n\n  constructor(\n              private utilService : UtilService,\n              private router : Router,\n              private ProdutoEmpresa : ServiceAllService<Product>,\n              private ServiceEmpresa : ServiceAllService<Empresa>\n               ) { }\n\n  ngOnInit(): void {\n    this.buscarProduto();\n    this.buscarEmpresa()\n  }\n\n  associarProdutoEmpresa() : void {\n\n    this.product.criadoPor  = Number(localStorage.getItem(\"usId\"));\n    this.product.dtCriacao = new Date;\n    this.product.bloqueado = false;\n    \n    this.ProdutoEmpresa.read(Endpoint.Produto).subscribe(p => {\n      p = p;\n\n      let ativo = p.filter(x => x.nome == this.product.nome && x.empresaid == this.product.empresaid )\n      \n      if (ativo.length == 0)\n      {\n        this.ProdutoEmpresa.create(this.product, Endpoint.Produto).subscribe(() => {\n          this.utilService.showMessage('Produto Criado!');\n          this.router.navigate(['products']);\n          })\n      \n      }else{\n        this.utilService.showMessage('Esse Produto Já foi cadastrado para essa empresa!');\n      }\n\n    })\n    \n  }\n\n  cancel() : void {\n\n    this.router.navigate(['products'])\n  }\n\n  buscarProduto(){\n    \n      TipoAplicacao.forEach(element => {\n        this.comboProduto.push(element)\n      });\n     return this.comboProduto;\n  }\n  buscarEmpresa(){\n    this.ServiceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n      this.empresa = emp;\n    })\n  }\n  \n}\n","<mat-card>\n    <mat-card-title>Habilitar - Produto Empresa</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Produto\">\n                <p></p>\n                <mat-select [(value)]=\"product.nome\" placeholder=\"productId\" >\n                    <mat-option *ngFor=\"let produto of comboProduto \" [value]=\"produto\">\n                         {{produto}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"product.empresaid\" placeholder=\"EmpresaID\" >\n                    <mat-option *ngFor=\"let comboEmpresa of empresa\" [value]=\"comboEmpresa.id\">\n                            {{comboEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Preço R$\"\n                [(ngModel)]=\"product.valor\" name=\"valor\">\n\n            </mat-form-field>\n            \n        </form>\n\n        <button mat-raised-button (click)=\"associarProdutoEmpresa()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>\n\n","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-product-delete',\n  templateUrl: './product-delete.component.html',\n  styleUrls: ['./product-delete.component.css']\n})\nexport class ProductDeleteComponent implements OnInit {\n\n  product : Product = {\n    id: null,\n    dtCriacao : null,\n    criadoPor : null,\n    nome: null,\n    valor : 0,\n    empresaid : null,\n    bloqueado : null,\n  }\n\n  constructor(private productService : ProductService,\n              private router : Router,\n              private utilService : UtilService,\n              private route : ActivatedRoute,\n              private deleteProduto : ServiceAllService<Product> ) { }\n\n  ngOnInit(): void {\n    \n    const id = this.route.snapshot.paramMap.get('id')\n    this.productService.readById(id).subscribe(product => {\n      this.product = product;\n    });\n\n  }\n  deleteProduct():void{\n      this.deleteProduto.delete(this.product.id, Endpoint.Produto).subscribe(() => {\n        this.utilService.showMessage(\"Produto Excluído com Sucesso!\")\n        this.router.navigate(['/products'])\n      })\n    \n  }\n\n  cancel():void{\n    this.router.navigate(['/products'])\n  }\n\n}\n\n\n  \n\n \n\n\n\n  \n","<mat-card>\n    <mat-card-title>Excluir Produto</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" disabled\n                [(ngModel)]=\"product.nome\" name=\"nome\">\n\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"deleteProduct()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>\n\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface ProductReadTableprodutosItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: ProductReadTableprodutosItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n];\n\n/**\n * Data source for the ProductReadTableprodutos view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class ProductReadTableprodutosDataSource extends DataSource<ProductReadTableprodutosItem> {\n  data: ProductReadTableprodutosItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator;\n  sort: MatSort;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<ProductReadTableprodutosItem[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: ProductReadTableprodutosItem[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: ProductReadTableprodutosItem[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable } from '@angular/material/table';\nimport { ProductReadTableprodutosDataSource, ProductReadTableprodutosItem } from './product-read-tableprodutos-datasource';\n\n@Component({\n  selector: 'app-product-read-tableprodutos',\n  templateUrl: './product-read-tableprodutos.component.html',\n  styleUrls: ['./product-read-tableprodutos.component.css']\n})\nexport class ProductReadTableprodutosComponent implements AfterViewInit, OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatTable) table: MatTable<ProductReadTableprodutosItem>;\n  dataSource: ProductReadTableprodutosDataSource;\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['id', 'name'];\n\n  ngOnInit() {\n    this.dataSource = new ProductReadTableprodutosDataSource();\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.table.dataSource = this.dataSource;\n  }\n}\n","<div class=\"mat-elevation-z8\">\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\">\n    <!-- Id Column -->\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.name}}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator #paginator\n      [length]=\"dataSource?.data.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"10\"\n      [pageSizeOptions]=\"[5, 10, 100]\">\n  </mat-paginator>\n</div>\n","import { stringify } from 'querystring';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Router } from '@angular/router';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { ProductService } from './../../../services/product.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Product } from '../../../models/produtos/product.model';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-product-read',\n  templateUrl: './product-read.component.html',\n  styleUrls: ['./product-read.component.css']\n})\nexport class ProductReadComponent implements OnInit {\n\n\n\nproducts: Product[]\n\ndisplayedColumns = ['id','nome', 'valor','empresaid','bloqueado','action']  \n\n  constructor(private router : Router,\n              private serviceProduto : ServiceAllService<Product>,\n              private serviceEmpresa : ServiceAllService<Empresa>\n             ) { }\n\n  ngOnInit(): void {\n      this.buscarProduto()\n  }\n\n  navigateToProdutoCreate() : void {\n    this.router.navigate(['products/create'])\n  }\n\n  buscarProduto() : void {\n\n    this.serviceProduto.read(Endpoint.Produto).subscribe(product => {\n        product = product;\n\n        this.products = new Array();\n\n        product.forEach(element => {\n          \n            this.serviceEmpresa.readById(element.empresaid.toString(), Endpoint.Empresa).subscribe(e => {\n              e = e;\n              if (e)\n                element.empresaid = e.razaoSocial;\n            })\n            this.products.push(element)\n        });\n    })\n  }\n}\n","<div class=\"mat-elevation-z4\">\n    <table mat-table [dataSource]=\"products\">\n      <!-- Id Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"nome\">\n        <th mat-header-cell *matHeaderCellDef>Nome</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n      </ng-container>\n      \n       <!-- Name Price -->\n       <ng-container matColumnDef=\"valor\">\n        <th mat-header-cell *matHeaderCellDef>Preço</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.valor | currency: 'BRL'}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"empresaid\">\n        <th mat-header-cell *matHeaderCellDef>Empresa</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.empresaid}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"bloqueado\">\n        <th mat-header-cell *matHeaderCellDef>Status</th>\n        <td mat-cell *matCellDef=\"let row\">\n            <div *ngIf=\"row.bloqueado\" >\n              <i class=\"material-icons\">\n                lock\n              </i>\n            </div>\n            <div *ngIf=\"!row.bloqueado\" >\n              <i class=\"material-icons\">  \n                lock_open\n              </i>\n            </div>\n        </td>\n      </ng-container>\n\n\n\n\n      \n\n\n\n\n\n\n\n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n\n            <a routerLink=\"/products/update/{{ row.id }}\" class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            <a routerLink=\"/products/delete/{{ row.id }}\" class=\"delete\">\n                <i class=\"material-icons\">\n                    delete\n                </i>\n            </a>\n        </td>\n      </ng-container>\n          \n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n\n  </div>\n\n  <div class=\"footer\">\n    <span (click)=\"navigateToProdutoCreate()\">\n      <i class=\"material-icons\">person_add</i>\n    </span>\n  </div>","import { Endpoint } from './../../../Negocio/Endpoint';\n\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProductService } from './../../../services/product.service';\nimport { Product } from '../../../models/produtos/product.model';\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-product-update',\n  templateUrl: './product-update.component.html',\n  styleUrls: ['./product-update.component.css']\n})\nexport class ProductUpdateComponent implements OnInit {\n\nproduct: Product = {\n    id : null,\n    dtCriacao : null,\n    criadoPor : null,\n    nome: null,\n    valor: 0,\n    empresaid :null,\n    bloqueado : null\n  }\n  \n\n  constructor(\n              private router: Router,\n              private utilService : UtilService,\n              private route: ActivatedRoute,\n              private ProdutoService : ServiceAllService<Product>\n              ) { }\n\n\n  ngOnInit(): void {\n    \n    this.buscarProduto();\n   \n  }\n\n  updateProduct(): void {\n    this.product.criadoPor  = Number(localStorage.getItem(\"usId\"));\n      this.ProdutoService.update(this.product, Endpoint.Produto).subscribe(() => {\n      this.utilService.showMessage(\"Produto Atualizado com Sucesso!\")\n      this.router.navigate(['/products'])\n    })\n\n  }\n\n  cancel(): void {\n    this.router.navigate(['/products'])\n\n  }\n  buscarProduto() : void {\n\n    const id = this.route.snapshot.paramMap.get('id')\n      this.ProdutoService.readById(id, Endpoint.Produto).subscribe(product => {\n          this.product = product;\n      })\n  }  \n\n}\n","<mat-card>\n    <mat-card-title>Alterar Produto</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"product.nome\" name=\"nome\">\n\n            </mat-form-field>\n            <mat-form-field>\n                <input matInput placeholder=\"Preço R$\"\n                [(ngModel)]=\"product.valor\" name=\"valor\">\n\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Bloqueado\">\n                    <input name=\"usuariosisteja\" [(ngModel)]=\"product.bloqueado\" [checked]=\"product.bloqueado\" type=\"checkbox\">\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"updateProduct()\" color=\"primary\" > \n            Atualizar\n        </button>\n        \n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n            Voltar\n        </button>\n       \n</mat-card>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar class=\"footer\">\n    <span>\n    Desenvolvido com \n        <i class=\"material-icons red v-middle\" appRed >\n            home\n        </i>\n        por <strong><span>Alberto</span></strong>\n    </span>\n</mat-toolbar>","import { HeaderService } from './header.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private headerService : HeaderService) { }\n\n  ngOnInit(): void {\n  }\n\nget title(): string {\n  return this.headerService.headerData.title\n}\n\nget icon(): string {\n  return this.headerService.headerData.icon\n}\n\nget routeUrl(): string {\n  return this.headerService.headerData.routeUrl\n}\n\n}\n","<mat-toolbar class=\"header mat-elevation-z4\">\n    <span>\n        <a routerLink=\"/\">\n            <img class=\"logo\" src=\"assets/img/logo.jpg\" alt=\"logo\">\n        </a>\n    </span>\n    <span class=\"title-group\">\n        <a routerLink=\"{{ routeUrl }}\" >\n            <i class=\"material-icons\">\n                {{ icon }}\n            </i>\n        \n            {{ title }}\n        </a>\n    </span> \n</mat-toolbar>\n\n","import { HeaderData } from './header.data.model';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeaderService {\n\n  private _headerData = new BehaviorSubject<HeaderData>({\n    title : 'Início',\n    icon : 'home',\n    routeUrl : ''\n  })\n\n\n  constructor() { }\n\nget headerData() : HeaderData {\n  return this._headerData.value;\n}\n\nset headerData(headerData : HeaderData) {\n   this._headerData.next(headerData)\n}\n\n\n}\n","import { TipoUsuario } from './../../../models/usuarios/enumUsuarios';\nimport { Component, OnInit } from '@angular/core';\nimport { LoginService } from 'src/app/services/login.service';\n\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\nopened = false;\nlock = false;  \n  constructor(private auth: LoginService) { }\n\n  ngOnInit(): void {\n  this.validarAcesso();\n  }\n\n  sairSistema(){\n    \n    this.auth.sairSistema();\n    \n  }\nvalidarAcesso(){\n  this.lock = Number(localStorage.getItem(\"grpUs\")) == TipoUsuario.Administrador ? true : false;\n}\n \n\n}\n","<mat-sidenav-container class=\"container\">\n    <mat-sidenav  class=\"sidenav\" mode=\"side\" \n            fixedInViewport=\"true\" fixedTopGap=\"64\" fixedBottomGap=\"64\" [(opened)]=\"opened\">\n            <mat-nav-list class=\"nav-list\">\n            \n                <a mat-list-item routerLink=\"/\">\n                <i class=\"material-icons\">\n                    home\n                </i>\n                Início\n            </a>\n            <!--Menus de cadastro-->    \n            <button mat-button [matMenuTriggerFor]=\"menu\" class=\"menuColor\" >\n                <i class=\"material-icons\">storefront</i>\n                \n                <mat-menu #menu=\"matMenu\">\n                        <a mat-list-item routerLink=\"empresa\" >\n                            <i class=\"material-icons\">\n                                reorder\n                            </i>\n                            Empresa\n                        </a>\n                        <a *ngIf=\"lock\" mat-list-item routerLink=\"products\" >\n                            <i class=\"material-icons\">\n                                storefront\n                            </i>\n                            Produto - Empresa\n                        </a>\n                        <a mat-list-item routerLink=\"chamados\">\n                            <i class=\"material-icons\">\n                                reorder\n                            </i>\n                            Solicitações\n                        </a>\n                        <a mat-list-item routerLink=\"usuarios\">\n                            <i class=\"material-icons\">\n                                perm_identity\n                            </i>\n                            Usuários\n                        </a>\n\n                        \n                </mat-menu>\n            </button>\n\n            <a mat-list-item (click)=\"sairSistema()\">\n                <i class=\"material-icons\">\n                    logout\n                </i>\n                Sair\n            </a>\n        </mat-nav-list>\n    </mat-sidenav>\n    <!--\n        Chamar o componente Home como página Principal\n    -->\n    <mat-sidenav-content class=\"content\">\n        <div *ngIf=\"!opened\">\n            <i class=\"material-icons\" (click)=\"opened=!opened\" >\n                navigate_next \n            </i>\n        </div>\n            \n        <div *ngIf=\"opened\">\n                <i class=\"material-icons\" (click)=\"opened=!opened\" >\n                    navigate_before \n                </i>\n        </div>\n        <router-outlet></router-outlet>\n    </mat-sidenav-content>\n\n</mat-sidenav-container>\n\n","import { stringify } from 'querystring';\nimport { UsuarioReadComponent } from './../usuario-read/usuario-read.component';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { GrupoUsuario } from './../../../models/usuarios/GrupoUsuarios';\nimport { LoginService } from 'src/app/services/login.service';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { TipoUsuario, TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Usuario } from '../../../models/usuarios/modelLogin';\nimport { Component, OnInit } from '@angular/core';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\n\n@Component({\n  selector: 'app-usuario-create',\n  templateUrl: './usuario-create.component.html',\n  styleUrls: ['./usuario-create.component.css']\n})\nexport class UsuarioCreateComponent implements OnInit {\n\nempresa : Empresa[];\n\ndadosEmpresa : Empresa;\nusuario : Usuario = new Usuario();\n\ngrupousuario : GrupoUsuario[];\n\ncriargrupousuario : GrupoUsuario = new GrupoUsuario()\n\ncomboTipousuario = [];\n\nconstructor(  private serviceUsuario : ServiceAllService<Usuario>,\n              private serviceEmpresa : ServiceAllService<Empresa>,\n              private serviceGrupoUsuario : ServiceAllService<GrupoUsuario>,\n              private utilService : UtilService,\n              private serviceLogin : LoginService,\n              \n              private router : Router) { }\n\n  ngOnInit(): void {\n      let grpId = Number(localStorage.getItem(\"grpUs\"));\n      this.alimentarCombo();\n      this.buscarEmpresa();\n  }\n  \n  createUsuario() : void {\n    \n    this.usuario.criadoPor  = Number(localStorage.getItem(\"usId\"));\n    this.usuario.dtCriacao = new Date;\n   \n    this.usuario.grupoUsuarioId = this.usuario.grupoUsuarioId.toString().trim() == \"Administrador\" ? TipoUsuario.Administrador.toString() \n                                : this.usuario.grupoUsuarioId.toString().trim() == \"Sistema\" ? TipoUsuario.Sistema.toString()\n                                : this.usuario.grupoUsuarioId.toString().trim() == \"Master\" ? TipoUsuario.Master.toString()\n                                : this.usuario.grupoUsuarioId.toString() == \"Usuario\" ? TipoUsuario.Usuario.toString() : null;\n    \n    \n\n    this.serviceUsuario.read(Endpoint.Usuario).subscribe(user => {\n      user = user;\n\n      let ativo = user.filter(x => x.login.toLowerCase() == this.usuario.login.toLowerCase() && x.empresaid == this.usuario.empresaid);\n           \n            if (ativo.length > 0)\n            {\n              this.utilService.showMessage('Esse Usuário já existe para essa Empresa');\n              this.usuario.login =  null; \n              user =  new Array();\n            }else{\n           \n              this.serviceEmpresa.readById(this.usuario.empresaid, Endpoint.Empresa).subscribe(emp => {\n                emp = emp;\n                if (!emp.bloqueado){\n                  this.serviceUsuario.create(this.usuario, Endpoint.Usuario).subscribe(() => {\n                    this.utilService.showMessage('Usuário Criado!');\n                    this.router.navigate(['usuarios']);\n                  });\n                }\n                else\n                {\n                  this.utilService.showMessage(`Não pode ser criado Usuário para empresa ${emp.razaoSocial} porque essa empresa está bloqueada.`, false);\n                }\n              });\n              \n              user =  new Array();\n            }\n\n    })\n  }\n\n  cancel(): void{\n    this.router.navigate(['/usuarios'])\n  }\n\n  buscarEmpresa() {\n   \n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    this.serviceEmpresa.read(Endpoint.Empresa).subscribe(emp => {\n        emp = emp; \n\n        this.empresa =  new Array()\n\n          emp.forEach(empresasCarregadas => {\n        \n            if(grpId == TipoUsuario.Administrador)\n              this.empresa.push(empresasCarregadas)\n            else if (grpId == TipoUsuario.Master && empId == empresasCarregadas.empresaPai.toString())\n                this.empresa.push(empresasCarregadas)\n            });\n    })\n  }\n\n  alimentarCombo() : void  {\n\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    for (var tipo in TipoUsuario) {\n      if (TipoUsuario.hasOwnProperty(tipo) &&\n        (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Administrador ) {\n\n          this.comboTipousuario.push(tipo)\n          \n      }\n      else if (TipoUsuario.hasOwnProperty(tipo) &&\n      (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Master ){\n\n        if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Master || TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n            this.comboTipousuario.push(tipo);\n        }\n    }\n  }\n\n  createGrupoUsuario(){\n    this.criargrupousuario.criadoPor  = Number(localStorage.getItem(\"usId\"));\n    this.criargrupousuario.dtCriacao = new Date;\n    this.criargrupousuario.empresaId = Number(localStorage.getItem(\"empId\"));\n\n      this.serviceGrupoUsuario.create(this.criargrupousuario, Endpoint.GrupoUsuario).subscribe(() => {\n        this.utilService.showMessage('Grupo de Usuário Criado!');\n      })\n  }\n}\n","<mat-card>\n    <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                [(ngModel)]=\"usuario.nome\" name=\"name\">\n\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Senha\" type=\"password\"\n                [(ngModel)]=\"usuario.senha\" name=\"senha\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Crachá\"\n                [(ngModel)]=\"usuario.cracha\" name=\"cracha\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Usuario de Sistema\">\n                    <input name=\"usuariosisteja\" [(ngModel)]=\"usuario.bolSistema\" [checked]=\"usuario.bolSistema\" type=\"checkbox\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Reseta Senha\">\n                    <input name=\"usuariresetasenha\" [(ngModel)]=\"usuario.bolResetaSenha\" [checked]=\"usuario.bolResetaSenha\" type=\"checkbox\">\n            </mat-form-field>\n\n            \n            <mat-form-field>\n                <input matInput placeholder=\"Tipo de Usuário\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.grupoUsuarioId\" placeholder=\"tipousuario\" >\n                    <mat-option *ngFor=\"let tipo of comboTipousuario \" [value]=\"tipo\">\n                        {{tipo}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.empresaid\" placeholder=\"EmpresaID\" >\n                    <mat-option *ngFor=\"let dadosEmpresa of empresa\" [value]=\"dadosEmpresa.id\">\n                    {{dadosEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Profissional\">\n                    <input name=\"usuarioProfissional\" [(ngModel)]=\"usuario.profissional\" [checked]=\"usuario.profissional\" type=\"checkbox\">\n            </mat-form-field>\n\n    </form>\n            <button *ngIf=\"usuario.nome && usuario.login && usuario.senha && usuario.grupoUsuarioId && usuario.empresaid\" mat-raised-button (click)=\"createUsuario()\" color=\"primary\" > \n                Salvar\n            </button>\n  \n            <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n                Voltar\n            </button>\n  \n \n</mat-card>","import { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { EmpresaService } from './../../../services/empresa.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UsuarioService } from './../../../services/usuario.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from './../../../models/usuarios/modelLogin';\n\n@Component({\n  selector: 'app-usuario-delete',\n  templateUrl: './usuario-delete.component.html',\n  styleUrls: ['./usuario-delete.component.css']\n})\nexport class UsuarioDeleteComponent implements OnInit {\nempresa : Empresa\nusuario : Usuario;\n\n  constructor(private usuarioService : ServiceAllService<Usuario>,\n              private empresaService : ServiceAllService<Empresa>,\n              private router : Router,\n              private utilService : UtilService,\n              private route : ActivatedRoute\n             ) { }\n\n  ngOnInit(): void {\n    this.carregaUsuario()\n  }\n\ncarregaUsuario(){\n\n  const id = this.route.snapshot.paramMap.get('id')\n  this.usuarioService.readById(id, Endpoint.Usuario).subscribe(usuario => {\n    this.usuario = usuario;\n    \n    this.buscarEmpresa().subscribe(empresa =>{\n      this.empresa = empresa;\n      this.usuario.empresaid = this.empresa.nomeFantasia;\n     \n    });\n  })\n\n}\n\n  deleteUsuario(): void{\n      this.usuarioService.delete(this.usuario.id , Endpoint.Usuario).subscribe(() => {\n      this.utilService.showMessage(\"Usuário Excluído com Sucesso!\")\n      this.router.navigate(['/usuarios'])\n    })\n  }\n  cancel():void{\n    this.router.navigate(['/usuarios'])\n  }\n\n  buscarEmpresa(){\n    return this.empresaService.readById(this.usuario.empresaid, Endpoint.Empresa);\n  }\n}\n","<mat-card>\n    <mat-card-title>Excluir Usuário</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"usuario.nome\" name=\"nome\">\n\n            </mat-form-field>\n            \n            \n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\"\n                [(ngModel)]=\"usuario.empresaid\" name=\"empresaid\">\n            </mat-form-field>\n\n        </form>\n\n        <button mat-raised-button (click)=\"deleteUsuario()\" color=\"primary\" > \n            Excluir\n        </button>\n        \n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n            Cancelar\n        </button>\n</mat-card>","\n<div>\n   <input class=\"search\" name=\"busca\" id=\"busca\" type=\"text\" value=\"\">\n    \n    <span (click)=\"getUser()\">\n      <i class=\"material-icons\">search</i>\n    </span>\n</div>\n<div class=\"mat-elevation-z4\">\n    <table mat-table [dataSource]=\"usuario\">\n      <!-- Id Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n  \n      <!-- Nome -->\n      <ng-container matColumnDef=\"nome\">\n        <th mat-header-cell *matHeaderCellDef>Nome</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.nome}}</td>\n      </ng-container>\n      \n\n        <!-- Login -->\n        <ng-container matColumnDef=\"login\">\n            <th mat-header-cell *matHeaderCellDef>Login</th>\n            <td mat-cell *matCellDef=\"let row\">{{row.login}}</td>\n        </ng-container> \n\n\n        <!-- Empresa -->\n        <ng-container matColumnDef=\"empresaid\">\n          <th mat-header-cell *matHeaderCellDef>Empresa</th>\n          <td mat-cell *matCellDef=\"let row\">{{row.empresaid}}</td>\n      </ng-container> \n       \n      <ng-container matColumnDef=\"grupoUsuarioId\">\n        <th mat-header-cell *matHeaderCellDef>Tipo de Usuário</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.grupoUsuarioId}}</td>\n    </ng-container> \n\n\n <!-- status -->\n <ng-container matColumnDef=\"bloqueado\">\n  <th mat-header-cell *matHeaderCellDef>Bloqueado</th>\n    <td mat-cell *matCellDef=\"let row\">\n      <div *ngIf=\"row.bloqueado\" >\n        <i class=\"material-icons\">\n          lock\n        </i>\n      </div>\n      <div *ngIf=\"!row.bloqueado\" >\n        <i class=\"material-icons\">  \n          lock_open\n        </i>\n      </div>\n    </td>\n  </ng-container>\n\n\n\n      <!-- Coluna de Ações -->\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Ações</th>\n        <td mat-cell *matCellDef=\"let row\">\n      \n         \n          <a routerLink=\"/usuarios/update/{{ row.id }}\" class=\"edit\">\n                <i class=\"material-icons\">\n                    edit\n                </i>\n            </a>\n            \n            <a *ngIf=\"userAutenticado\" routerLink=\"/usuarios/delete/{{ row.id }}\" class=\"delete\">\n              \n                <i class=\"material-icons\">\n                    delete \n                           \n                </i>\n              \n            </a>\n           \n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\">teste</tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      \n      \n\n    </table>\n\n</div>\n<div class=\"footer\">\n  <span (click)=\"navigateToUsuarioCreate()\">\n    <i class=\"material-icons\">person_add</i>\n  </span>\n</div>\n","import { TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { UtilService } from './../../../services/util.service';\nimport { GrupoUsuario } from './../../../models/usuarios/GrupoUsuarios';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Router } from '@angular/router';\nimport { map, catchError, take, tap, elementAt } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Endpoint } from './../../../Negocio/Endpoint';\n\nimport { Usuario } from './../../../models/usuarios/modelLogin';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatTable } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { EmpresaService } from './../../../services/empresa.service';\nimport { UsuarioService } from './../../../services/usuario.service';\nimport { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { __await } from 'tslib';\nimport { FooterComponent } from '../../template/footer/footer.component';\nimport { TipoUsuario } from 'src/app/models/usuarios/enumUsuarios';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { UsuarioCreateComponent } from '../usuario-create/usuario-create.component';\n\n\n@Component({\n  selector: 'app-usuario-read',\n  templateUrl: './usuario-read.component.html',\n  styleUrls: ['./usuario-read.component.css']\n})\n\n\nexport class UsuarioReadComponent implements OnInit {\n\n  usuario : Usuario[];\n  userAutenticado : boolean = false; \n  \n  displayedColumns = ['id','nome','login','empresaid','grupoUsuarioId','bloqueado','action']  \n \n  constructor(\n              private serviceEmpresa: ServiceAllService<Empresa>,\n              private serviceUsuario : ServiceAllService<Usuario>,\n              private mensagem : UtilService, \n              private router : Router\n             ) \n             { }\n\n\n  ngOnInit(): void {\n     this.getUser();\n\n     let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n  }\n  \n\n\n  navigateToUsuarioCreate(): void{\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    if (grpId == TipoUsuario.Usuario) \n      this.mensagem.showMessage(\"Você não possui permissão para criação de usuários\", true)\n    else\n      this.router.navigate(['usuarios/create']);\n  }\n\n  async getUser() {\n      \n      let filtroUsuario = (<HTMLSelectElement>document.getElementById('busca')).value;\n      let empId = localStorage.getItem(\"empId\");\n      let grpId = Number(localStorage.getItem(\"grpUs\"));\n      let logado = Number(localStorage.getItem(\"usId\"));\n      this.userAutenticado = grpId == TipoUsuario.Usuario ? false : true;\n  \n      this.serviceUsuario.read(Endpoint.Usuario).subscribe(u =>{\n        u = u;\n        let responseUsuarios = u;\n\n        let usuarioFIltrados = new Array();\n         \n        if (filtroUsuario){\n           \n          for (let index = 0; index < responseUsuarios.length; index++) {\n            const element = responseUsuarios[index];\n              if (element.nome.toLowerCase().includes(filtroUsuario.toLowerCase()))\n                usuarioFIltrados.push(element);\n          }\n          responseUsuarios = new Array();\n          responseUsuarios = usuarioFIltrados;    \n        }\n\n        this.serviceEmpresa.read(Endpoint.Empresa).subscribe(e => {\n          e = e;     \n          let responseEmpresa = e;\n\n          this.usuario = new Array();\n          let empresaID = null;\n          let idEmpresa = null;\n          let IdEmpresaPai = null;\n\n          for (let index = 0; index < responseUsuarios.length; index++) {\n            const usr = responseUsuarios[index];\n            \n                  for (let index = 0; index <  responseEmpresa.length; index++) {\n                    const emp =  responseEmpresa[index];\n                    \n                    if(usr.empresaid == emp.id.toString().trim())\n                    {\n                      empresaID = emp.id;\n                      usr.empresaid = emp.razaoSocial;\n                      usr.grupoUsuarioId = usr.grupoUsuarioId == localStorage.getItem(\"grpUsGrpAdm\") ? \"Administrador\"\n                                         : usr.grupoUsuarioId == localStorage.getItem(\"grpUsGrpsis\") ? \"Sistema\" \n                                         : usr.grupoUsuarioId == localStorage.getItem(\"grpUsGrpUs\") ? \"Usuario\" \n                                         : usr.grupoUsuarioId == localStorage.getItem(\"grpUsGrpMs\") ? \"Master\" \n                                         : usr.grupoUsuarioId;\n\n                      idEmpresa = emp.id;\n                      IdEmpresaPai = emp.empresaPai;\n                      \n                        if(grpId == TipoUsuario.Administrador)\n                        {\n                          this.usuario.push(usr);\n                            break;  \n                          }\n                          else if(grpId == TipoUsuario.Master)\n                          { \n                            if(idEmpresa == empId || IdEmpresaPai == empId && usr.grupoUsuarioId != \"Administrador\")\n                            {\n                              this.usuario.push(usr);\n                              empresaID = null;\n                              idEmpresa = null;\n                              break;\n                            }\n                          }\n                          else if(grpId == TipoUsuario.Usuario)\n                          { \n                            \n                            if(idEmpresa == empId && usr.id == logado)\n                            {\n                              this.usuario.push(usr);\n                              empresaID = null;\n                              idEmpresa = null;\n                              break;\n                            }\n                            \n                          }\n\n                        }\n                  }\n          }\n      })\n  })\n   \n  \n }\n  \n\n}\n\n\n\n","import { TipoUsuario, TipoUsuarioSistema } from './../../../models/usuarios/enumUsuarios';\nimport { Endpoint } from './../../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../../services/service-all.service';\nimport { UtilService } from './../../../services/util.service';\nimport { Observable } from 'rxjs';\nimport { EmpresaService } from './../../../services/empresa.service';\nimport { Empresa } from './../../../models/empresa/ModelEmpresa';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UsuarioService } from './../../../services/usuario.service';\nimport { Usuario } from '../../../models/usuarios/modelLogin';\nimport { Component, OnInit } from '@angular/core';\nimport { query } from '@angular/animations';\n\n\n@Component({\n  selector: 'app-usuario-update',\n  templateUrl: './usuario-update.component.html',\n  styleUrls: ['./usuario-update.component.css']\n})\nexport class UsuarioUpdateComponent implements OnInit {\n\n  empresa : Empresa[];\n  dadosEmpresa : Empresa;\n  usuario : Usuario ;\n  userAutenticado : boolean = false; \n  \n  comboTipousuario = [];\n\n\n  constructor(private usarioService : ServiceAllService<Usuario>,\n             private empresaService : ServiceAllService<Empresa>,\n             private utilService: UtilService,\n             private router : Router,\n             private route: ActivatedRoute\n             ) { }\n\n  ngOnInit(): void {\n    this.buscarUsuario();\n    this.buscarEmpresa();\n  }\n\n  updateUsuario() : void {\n  let grpId = Number(localStorage.getItem(\"grpUs\"));\n  this.usuario.grupoUsuarioId = this.usuario.grupoUsuarioId == \"Administrador\" ? TipoUsuario.Administrador.toString() \n                                   :this.usuario.grupoUsuarioId == \"Sistema\" ? TipoUsuario.Sistema.toString()\n                                   : this.usuario.grupoUsuarioId == \"Usuario\" ? TipoUsuario.Usuario.toString()\n                                   : this.usuario.grupoUsuarioId == \"Master\" ? TipoUsuario.Master.toString()\n                                   : null \n    \n      this.usarioService.read(Endpoint.Usuario).subscribe(user => {\n        user = user;\n                              \n        let ativo = user.filter(x => x.login.toLowerCase() == this.usuario.login.toLowerCase() && x.empresaid == this.usuario.empresaid && x.id == this.usuario.id);\n     \n          if (ativo.length > 0 )\n          {\n              this.usarioService.update(this.usuario, Endpoint.Usuario).subscribe(() => {\n                this.utilService.showMessage(\"Usuário Atualizado com Sucesso!\")\n                this.router.navigate(['/usuarios'])\n              })\n              user =  new Array();\n            }else if(grpId == TipoUsuario.Administrador){\n                \n              this.usarioService.update(this.usuario, Endpoint.Usuario).subscribe(() => {\n                  this.utilService.showMessage(\"Usuário Atualizado com Sucesso!\")\n                  this.router.navigate(['/usuarios'])\n                })\n                user =  new Array();\n            }else{\n\n              this.utilService.showMessage('A empresa do Usuário não pode ser Alterada', false);\n              this.usuario.login =  null; \n              user =  new Array();\n          }\n      })\n  }\n\n  cancel(): void{\n    this.router.navigate(['/usuarios'])\n  }\n\n  buscarEmpresa() {\n    \n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    this.empresaService.read(Endpoint.Empresa).subscribe(emp => {\n      emp = emp;\n\n      this.empresa =  new Array()\n\n      emp.forEach(empresasCarregadas => {\n        \n        if(grpId == TipoUsuario.Administrador)\n          this.empresa.push(empresasCarregadas)\n        else if (grpId == TipoUsuario.Master && empId == empresasCarregadas.id.toString() || grpId == TipoUsuario.Usuario && empId == empresasCarregadas.id.toString() || empId == empresasCarregadas.empresaPai.toString())\n            this.empresa.push(empresasCarregadas)\n        });\n\n    });\n  }\n\n  buscarUsuario(){\n    const id = this.route.snapshot.paramMap.get('id')\n    this.usarioService.readById(id, Endpoint.Usuario).subscribe(usuario => {\n      this.usuario = usuario;\n\n      let tipousuario = usuario.grupoUsuarioId;\n      this.usuario.grupoUsuarioId = this.usuario.grupoUsuarioId == TipoUsuario.Administrador.toString() ? \"Administrador\"\n                                   :this.usuario.grupoUsuarioId == TipoUsuario.Sistema.toString()  ? \"Sistema\"\n                                   : this.usuario.grupoUsuarioId == TipoUsuario.Usuario.toString()  ? \"Usuario\" \n                                   : this.usuario.grupoUsuarioId == TipoUsuario.Master.toString()  ? \"Master\" \n                                   : null \n     \n     this.carregarComboTipoUsuario(this.usuario.grupoUsuarioId, tipousuario); \n    });\n  }\n\n  carregarComboTipoUsuario(usuario : string, tipousuario : string) : void  {\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    \n      for (var tipo in TipoUsuario) {\n      \n           if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Administrador ) {\n    \n              this.comboTipousuario.push(tipo)\n              \n            }\n            else if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Master ){\n    \n            if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Master || TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n                this.comboTipousuario.push(tipo);\n          \n            }\n            else if (TipoUsuario.hasOwnProperty(tipo) &&\n            (isNaN(parseInt(tipo))) && grpId == TipoUsuario.Usuario ){\n      \n              if(TipoUsuarioSistema.get(tipo) == TipoUsuario.Usuario)            \n                  this.comboTipousuario.push(tipo);\n            \n            }\n      }\n  }\n}\n","<mat-card>\n    <mat-card-title>Alterar Usuário</mat-card-title>\n        <form>\n            <mat-form-field>\n                <input matInput placeholder=\"Nome\" \n                 [(ngModel)]=\"usuario.nome\" name=\"nome\">\n            </mat-form-field>\n            \n            <mat-form-field>\n                <input matInput placeholder=\"Login\"\n                [(ngModel)]=\"usuario.login\" name=\"login\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Senha\" type=\"password\"\n                [(ngModel)]=\"usuario.senha\" name=\"senha\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Tipo de Usuário\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.grupoUsuarioId\" placeholder=\"GrupoUsuarioID\">\n                         <mat-option *ngFor=\"let tipo of comboTipousuario\" [value]=\"tipo\">\n                        {{tipo}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Empresa\">\n                <p></p>\n                <mat-select [(value)]=\"usuario.empresaid\" placeholder=\"EmpresaID\">\n                    <mat-option *ngFor=\"let dadosEmpresa of empresa\" [value]=\"dadosEmpresa.id\">\n                       {{dadosEmpresa.nomeFantasia}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Bloqueado\">\n                    <input name=\"status\" [(ngModel)]=\"usuario.bloqueado\" [checked]=\"usuario.bloqueado\" type=\"checkbox\">\n            </mat-form-field>\n\n            <mat-form-field>\n                <input matInput placeholder=\"Profissional\">\n                    <input name=\"profissional\" [(ngModel)]=\"usuario.profissional\" [checked]=\"usuario.profissional\" type=\"checkbox\">\n            </mat-form-field>\n\n      \n        </form>\n\n        <button *ngIf=\"usuario.nome && usuario.login && usuario.grupoUsuarioId && usuario.empresaid\" mat-raised-button (click)=\"updateUsuario()\" color=\"primary\" > \n            Salvar\n        </button>\n        \n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\" > \n            Voltar\n        </button>\n</mat-card>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-usuario',\n  templateUrl: './usuario.component.html',\n  styleUrls: ['./usuario.component.css']\n})\nexport class UsuarioComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>usuario works!</p>\n","import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appRed]'\n})\nexport class RedDirective {\n\n  constructor(private el: ElementRef) { \n    el.nativeElement.style.color = '#e35e6b';\n  }\n\n}\n","export class Acesso{\r\n    login : string\r\n    senha : string\r\n    nome : string\r\n}","export class GrupoUsuario{\r\n    id? : number\r\n    dtCriacao : Date\r\n    nome : string\r\n    usuarioApp : boolean\r\n    empresaId : number\r\n    criadoPor : number\r\n    bloqueado : boolean\r\n\r\n}","import { convertActionBinding, ConvertActionBindingResult } from '@angular/compiler/src/compiler_util/expression_converter';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport enum TipoUsuario {\r\n    \r\n    Administrador =  Number(localStorage.getItem(\"grpUsGrpAdm\")),\r\n    Sistema = Number(localStorage.getItem(\"grpUsGrpsis\")),\r\n    Usuario = Number(localStorage.getItem(\"grpUsGrpUs\")),\r\n    Master = Number(localStorage.getItem(\"grpUsGrpMs\")),\r\n}\r\n\r\nexport const TipoUsuarioSistema = new Map<string, number>([\r\n['Administrador', Number(localStorage.getItem(\"grpUsGrpAdm\"))],\r\n['Sistema', Number(localStorage.getItem(\"grpUsGrpsis\"))],\r\n['Usuario', Number(localStorage.getItem(\"grpUsGrpUs\"))],\r\n['Master', Number(localStorage.getItem(\"grpUsGrpMs\"))]\r\n])\r\n","export class Usuario {\r\nid ? : number\r\ndtCriacao : Date\r\nnome : string\r\nlogin : string\r\nsenha : string\r\ncracha : string\r\nbolSistema: boolean\r\nbolResetaSenha : boolean\r\ndataTrocaSenha : Date\r\ncriadoPor : number\r\nbloqueado : boolean\r\nempresaid : string\r\ngrupoUsuarioId : string\r\nprofissional : boolean\r\n}\r\n","import { GrupoUsuario } from './../models/usuarios/GrupoUsuarios';\nimport { ServiceAllService } from './service-all.service';\nimport { Endpoint } from './../Negocio/Endpoint';\nimport { TipoUsuario, TipoUsuarioSistema } from './../models/usuarios/enumUsuarios';\nimport { ObjetoToken } from './../models/Token/ObjetoToken';\nimport { Empresa } from './../models/empresa/ModelEmpresa';\nimport { Acesso } from '../models/acessoModel';\nimport { UtilService } from './util.service';\n\nimport { environment } from './../../environments/environment';\n\nimport { map, catchError, take, retry } from 'rxjs/operators';\nimport { Observable, EMPTY, from, empty, pipe } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Router } from '@angular/router';\nimport { Injectable, EventEmitter  } from '@angular/core';\nimport { stringify } from 'querystring';\nimport { Token } from '@angular/compiler/src/ml_parser/lexer';\nimport { STRING_TYPE } from '@angular/compiler';\n\nconst httpOptions = {\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  title = 'multiple-env-demo';\n  environmentName = '';\n  environmentUrl = 'Debug api';\n  acesso : Acesso = new Acesso();\n  objetoToken : ObjetoToken []\n\n  private tipoUsuarios = [];\n\n  private usuarioAutenticado: boolean = false; \n\n  mostrarMenuEmitter = new EventEmitter<boolean>();\n  mostrarLoginEmitter = new EventEmitter<boolean>();\n  \n\n  constructor(private router: Router,\n              private snackbar : MatSnackBar,\n              private http: HttpClient,\n              private utilService : UtilService,\n               \n              ) { \n                this.environmentName = environment.environmentName;\n              this.environmentUrl =  environment.BASE_URL;\n              }\n\n  async logarSistema(acesso: Acesso) {\n    \n    try {\n      let response = await this.http.post<ObjetoToken>(this.environmentUrl + Endpoint.Token, acesso).toPromise()\n     \n\n       if (response != null && !response.bloqueado && !response.statusEmpresa )\n          {\n\n            this.mostrarMenuEmitter.emit(true);\n            this.mostrarLoginEmitter.emit(false)\n            this.usuarioAutenticado = true;\n            this.router.navigate(['/']);\n                        \n            localStorage.setItem(\"tId\", response.token)\n            localStorage.setItem(\"usId\", response.id)\n            localStorage.setItem(\"grpUs\", response.grupoUsuarioid)\n           \n            localStorage.setItem(\"stUs\", response.bloqueado);\n            localStorage.setItem(\"empId\", response.empresaid);\n            this.utilService.showMessage(\"Seja Bem Vindo!  \" + acesso.login , false);\n\n            response.gruposUsuarios.forEach(element => {\n\n              if (element.nome == \"Administrador\")\n                  localStorage.setItem(\"grpUsGrpAdm\", element.id.toString())\n              else if (element.nome == \"Sistema\")\n                  localStorage.setItem(\"grpUsGrpsis\", element.id.toString())\n              else if (element.nome == \"Usuario\")\n                  localStorage.setItem(\"grpUsGrpUs\", element.id.toString())\n              else if (element.nome == \"Master\")\n                  localStorage.setItem(\"grpUsGrpMs\", element.id.toString())\n            });\n            \n          }\n          else\n          {\n            this.usuarioAutenticado = false;\n            this.mostrarMenuEmitter.emit(false);\n            this.mostrarLoginEmitter.emit(true);\n            \n            if (response.bloqueado)\n              this.utilService.showMessage(\"Usuário bloqueado!\", true);\n            else if (response.statusEmpresa)\n              this.utilService.showMessage(\"Empresa bloqueada!\", true);\n            else \n              this.utilService.showMessage(\"Usuário ou senha Inválido!\", true);\n        }\n      \n      } catch (error) {\n        this.utilService.showMessage(\"Erro de acesso a API\", true);\n      }\n    \n  }\n  sairSistema(){\n    this.mostrarMenuEmitter.emit(false);\n    this.mostrarLoginEmitter.emit(true)\n    localStorage.removeItem(\"tId\");\n    localStorage.removeItem(\"usId\");\n    localStorage.removeItem(\"grpUs\");\n    localStorage.removeItem(\"stUs\");\n    localStorage.removeItem(\"empId\");\n    this.utilService.showMessage(\"Até logo! \", false);\n    this.router.navigate(['/login']);\n  }\n\n  header(){\n    var reqHeader = new HttpHeaders({ \n        'Content-Type' : 'application/json; charset=utf-8',\n        'Accept'       : 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('tId')\n    })\n    return { headers: reqHeader };\n  }\n\n  TipoUsuarioSistema(){\n    \n    TipoUsuarioSistema.forEach(element => {\n      this.tipoUsuarios.push(element)\n    });\n   return this.tipoUsuarios;\n  }\n  \n}\n\n\n\n\n\n","import { LoginService } from 'src/app/services/login.service';\n\nimport { UtilService } from './util.service';\nimport { environment } from '../../environments/environment';\nimport { Component } from '@angular/core';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Product } from '../models/produtos/product.model';\nimport { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  title = '';\n  environmentName = '';\n  environmentUrl = '';\n   \nconstructor(private snackbar : MatSnackBar,\n              private http : HttpClient,\n              private utilService: UtilService,\n              private loginservice : LoginService\n              \n             ) { \n              this.environmentName = environment.environmentName;\n              this.environmentUrl =  environment.BASE_URL + '/Produto';\n             }\n\n    //Criar um produto\n    create(product : Product): Observable<Product>{\n      return this.http.post<Product>(this.environmentUrl, product, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n    \n    // Buscar todos Get All\n    read(): Observable<Product[]>{\n      return this.http.get<Product[]>(this.environmentUrl, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      ); \n    }\n\n   //Buscar um produto por id\n   readById(id: string): Observable<Product>{\n    const url = `${this.environmentUrl}/${id}`\n\n      return this.http.get<Product>(url, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n   }\n\n   // Atualizar Produto \n   update(product: Product): Observable<Product> {    \n    return this.http.put<Product>(this.environmentUrl, product, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n    );\n   }\n\n   delete(id: number) : Observable<Product>{\n    const url = `${this.environmentUrl}/${id}`      \n    return this.http.delete<Product>(url, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n    );\n\n   }\n\n}\n","import { map, catchError, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { LoginService } from 'src/app/services/login.service';\nimport { UtilService } from './util.service';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceAllService <T>{\n\n  title = '';\n  environmentName = '';\n  environmentUrl = '';\n\n  constructor(\n    private snackbar : MatSnackBar,\n              private http : HttpClient,\n              private utilService: UtilService,\n              private loginservice : LoginService\n              ) {\n                this.environmentName = environment.environmentName;\n                this.environmentUrl =  environment.BASE_URL;\n              }\n\n\n    //Criar Cadastro\n    create(T : T, tipo: string) : Observable <T>{\n      return this.http.post<T>(this.environmentUrl + tipo , T, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    // Buscar todos Get All\n    read(tipo: string): Observable<T[]>{\n      return this.http.get<T[]>(this.environmentUrl + tipo, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      ); \n    }\n\n    //Buscar um cadastro por id\n    readById(id: string, tipo: string): Observable<T>{\n    const url = `${this.environmentUrl + tipo}/${id}`\n\n      return this.http.get<T>(url, this.loginservice.header()).pipe(\n        map(obj => obj),\n        catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    // Atualizar Produto \n    update(T: T, tipo: string): Observable<T> {    \n    return this.http.put<T>(this.environmentUrl + tipo, T, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n      );\n    }\n\n    delete(id: number, tipo : string) : Observable<T>{\n      const url = `${this.environmentUrl + tipo}/${id}`      \n      return this.http.delete<T>(url, this.loginservice.header()).pipe(\n      map(obj => obj),\n      catchError(e => this.utilService.erroHandler(e))\n      );\n\n    }\n\n}\n","import { HeaderService } from './../components/template/header/header.service';\nimport { ObjetoToken } from './../models/Token/ObjetoToken';\n\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, EMPTY } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilService {\n\n  constructor(private snackbar : MatSnackBar,\n             private http : HttpClient,\n             private headerService : HeaderService\n             ) { }\n\n\n  showMessage(msg : string, isErro: boolean = false) : void { \n    this.snackbar.open(msg, 'X' , { \n      duration : 3000,\n      horizontalPosition: \"right\",\n      verticalPosition : \"top\",\n      panelClass : isErro ? ['msg-error'] : ['msg-sucess']\n    })\n\n}\n\n  erroHandler(e: any) : Observable<any>{\n    this.showMessage(\"Erro ao Acessar a API!\", true )\n    return EMPTY \n  }\n\n  convertToBase64(txt : string){\n    return btoa(txt);\n  }\n\n  convertBase64toText(txt: string){\n    return atob(txt);\n\n  }\n\n  AtualizarMenu(titulo : string, icone : string, urlIcone : string ) {\n      this.headerService.headerData.title = titulo ;\n      this.headerService.headerData.icon = icone\n      this.headerService.headerData.routeUrl = urlIcone\n  \n  }\n\n\n}","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chamado-crud',\n  templateUrl: './chamado-crud.component.html',\n  styleUrls: ['./chamado-crud.component.css']\n})\nexport class ChamadoCrudComponent implements OnInit {\n\n  constructor(private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  navigateToChamadoCreate():void{\n    this.router.navigate(['chamados/read'])\n  }\n\n}\n","<button mat-raised-button (click)=\"navigateToChamadoCreate()\"\n        color=\"primary\" > \n        Novo\n</button>\n\n\n<app-chamado-read></app-chamado-read>\n\n","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-empresa',\n  templateUrl: './empresa.component.html',\n  styleUrls: ['./empresa.component.css']\n})\nexport class EmpresaComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  navigateToEmpresaCreate() : void {\n    this.router.navigate(['empresa/create'])\n  }\n\n\n}\n","<app-empresa-read></app-empresa-read>\n\n","import { UtilService } from './../../services/util.service';\nimport { TipoUsuario } from './../../models/usuarios/enumUsuarios';\nimport { Endpoint } from './../../Negocio/Endpoint';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { HeaderService } from './../../components/template/header/header.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ok } from 'assert';\nimport { Product } from 'src/app/models/produtos/product.model';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\nprodutos : Product[];\n\n\n  constructor(private serviceProdutos : ServiceAllService<Product>,\n              private headerService : HeaderService,\n              private utilService : UtilService\n              ) \n              {\n               // this.headerService.headerData = {\n               //  title : 'Início',\n              //    icon : 'home',\n              //    routeUrl : ''\n               // }\n              }\n\n  ngOnInit(): void {\n    this.ObterComponentes();\n    this.utilService.AtualizarMenu(\"Início\",\"home\",'');\n  }\n  \n  \n  ObterComponentes(){\n     \n    let empId = localStorage.getItem(\"empId\");\n    let grpId = Number(localStorage.getItem(\"grpUs\"));\n\n    this.serviceProdutos.read(Endpoint.Produto).subscribe(prod => {\n      prod = prod;\n\n      this.produtos = new Array();\n        prod.forEach(element => {\n          if (empId == element.empresaid)\n              this.produtos.push(element)\n        });\n    });\n  }\n}\n","<mat-card class=\"home mat-elevation-z3\">\n    <mat-card-title class=\"title\">\n        Bem Vindo\n    </mat-card-title>\n</mat-card>\n\n<div class=\"content\">\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\n      <div fxFlex=\"10%\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let prod of produtos\">\n        <mat-card  class=\" mat-elevation-z3\">\n            <mat-card-header>\n                <mat-card-title>{{prod.nome}}</mat-card-title>\n            </mat-card-header>\n            <a *ngIf=\"!prod.bloqueado\" mat-list-item routerLink=\"{{prod.nome}}\" >\n                <i class=\"material-icons\" >\n                   schedule\n                </i>\n            </a>\n            <mat-card-footer>\n                <div *ngIf=\"prod.bloqueado\">\n                    <i class=\"material-icons\" >\n                        block\n                     </i>\n                </div>\n            </mat-card-footer>\n\n        </mat-card>\n      </div>\n    </div>\n  </div>","import { HeaderService } from './../../components/template/header/header.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router} from '@angular/router';\n\n\n@Component({\n  selector: 'app-product-crud',\n  templateUrl: './product-crud.component.html',\n  styleUrls: ['./product-crud.component.css']\n})\nexport class ProductCrudComponent implements OnInit {\n\n  constructor(private router : Router,\n             private headerService : HeaderService\n             ) { \n\n    this.headerService.headerData = {\n      title : 'Cadastro de Produtos',\n      icon : 'storefront',\n      routeUrl : '/products'\n    }\n\n\n  }\n\n  ngOnInit(): void {\n  }\n\nnavigateToProductsCreate() : void {\n  this.router.navigate(['products/create'])\n}\n\n}\n","<app-product-read></app-product-read>\n\n","import { stringify } from 'querystring';\nimport { query } from '@angular/animations';\nimport { UsuarioReadComponent } from './../../components/usuario/usuario-read/usuario-read.component';\nimport { Empresa } from './../../models/empresa/ModelEmpresa';\nimport { Endpoint } from './../../Negocio/Endpoint';\nimport { UsuarioService } from './../../services/usuario.service';\nimport { ServiceAllService } from './../../services/service-all.service';\nimport { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { Usuario } from 'src/app/models/usuarios/modelLogin';\n\n@Component({\n  selector: 'app-usuario-crud',\n  templateUrl: './usuario-crud.component.html',\n  styleUrls: ['./usuario-crud.component.css']\n})\nexport class UsuarioCrudComponent implements OnInit {\n\n  constructor(\n              private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  \n}\n","<app-usuario-read></app-usuario-read>\n\n\n\n\n\n","export const environment = {\n  production: false,\n  environmentName: \"QA\",\n  apiUrl:  'http://localhost:5000',\n  BASE_URL : '/api'\n\n\n};\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}